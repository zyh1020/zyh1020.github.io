"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[3524],{1709:(i,s,a)=>{a.d(s,{l:()=>n});const n=JSON.parse('{"category":{"/":{"path":"/category/","map":{"Dubbo":{"path":"/category/dubbo/","indexes":[0,1]},"Java":{"path":"/category/java/","indexes":[2,3,4,5,6,7,8,9,10,11,12,13,14]},"Docker":{"path":"/category/docker/","indexes":[15,16,17]},"Jvm":{"path":"/category/jvm/","indexes":[18,19,20,21,22,23]},"MQ":{"path":"/category/mq/","indexes":[24,25,26,27,28,29,30]},"Mybatis":{"path":"/category/mybatis/","indexes":[31,32,33,34,35,36,37]},"Netty":{"path":"/category/netty/","indexes":[38]},"Nginx":{"path":"/category/nginx/","indexes":[39,40]},"Redis":{"path":"/category/redis/","indexes":[41,42,43,44,45,46]},"Spring":{"path":"/category/spring/","indexes":[47,48,49,50,51]},"SpringBoot":{"path":"/category/springboot/","indexes":[52,53,54,55,56,57,58]},"SpringCloud":{"path":"/category/springcloud/","indexes":[59,60,61,62,63,64,65,66,67]},"SpringMvc":{"path":"/category/springmvc/","indexes":[68,69]},"mysql":{"path":"/category/mysql/","indexes":[70,71,72,73,74,75,76]},"zookeeper":{"path":"/category/zookeeper/","indexes":[77,78,79,80,81,82]},"多线程":{"path":"/category/%E5%A4%9A%E7%BA%BF%E7%A8%8B/","indexes":[83,84,85,86,87,88,89,90,91,92,93]},"工作流":{"path":"/category/%E5%B7%A5%E4%BD%9C%E6%B5%81/","indexes":[94,95,96,97]},"工具":{"path":"/category/%E5%B7%A5%E5%85%B7/","indexes":[98,99,100,101,102,103,104]},"设计模式":{"path":"/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","indexes":[105,106,107,108,109,110,111,112]}}}},"tag":{"/":{"path":"/tag/","map":{"必看":{"path":"/tag/%E5%BF%85%E7%9C%8B/","indexes":[61,50,39,34,35,36,24,26,22,4,7,69,11,14,107,108,78,79,94,1]},"Dubbo":{"path":"/tag/dubbo/","indexes":[0,1]},"基础":{"path":"/tag/%E5%9F%BA%E7%A1%80/","indexes":[66,53,48,51,38,27,30,20,5,9,13,109,81,103,0]},"推荐":{"path":"/tag/%E6%8E%A8%E8%8D%90/","indexes":[65,55,43,45,46,72,25,29,6,8,97,101,104,85,90,15]},"Java":{"path":"/tag/java/","indexes":[2,3,4,5,6,7,8,9,10,11,12,13,14]},"常用":{"path":"/tag/%E5%B8%B8%E7%94%A8/","indexes":[64,54,58,76,31,33,37,18,3,10,110,111,112,96,99,87,88,16]},"干货":{"path":"/tag/%E5%B9%B2%E8%B4%A7/","indexes":[63,52,74,75,19,21,2,68,77,89,91,92,93]},"偏僻":{"path":"/tag/%E5%81%8F%E5%83%BB/","indexes":[59,62,67,47,71,73,28,12,105,106,80,98,100,83,84,86]},"进阶":{"path":"/tag/%E8%BF%9B%E9%98%B6/","indexes":[60,49,56,57,41,42,44,40,70,32,23,82,95,102,17]},"Docker":{"path":"/tag/docker/","indexes":[15,16,17]},"Jvm":{"path":"/tag/jvm/","indexes":[18,19,20,21,22,23]},"MQ":{"path":"/tag/mq/","indexes":[24,25,26,27,28,29,30]},"Mybatis":{"path":"/tag/mybatis/","indexes":[31,32,33,34,35,36,37]},"Netty":{"path":"/tag/netty/","indexes":[38]},"Nginx":{"path":"/tag/nginx/","indexes":[39,40]},"Redis":{"path":"/tag/redis/","indexes":[41,42,43,44,45,46]},"Spring":{"path":"/tag/spring/","indexes":[47,48,49,50,51]},"SpringBoot":{"path":"/tag/springboot/","indexes":[52,53,54,55,56,57,58]},"SpringCloud":{"path":"/tag/springcloud/","indexes":[59,60,61,62,63,64,65,66,67]},"SpringMvc":{"path":"/tag/springmvc/","indexes":[68,69]},"mysql":{"path":"/tag/mysql/","indexes":[70,71,72,73,74,75,76]},"zookeeper":{"path":"/tag/zookeeper/","indexes":[77,78,79,80,81,82]},"多线程":{"path":"/tag/%E5%A4%9A%E7%BA%BF%E7%A8%8B/","indexes":[83,84,85,86,87,88,89,90,91,92,93]},"工作流":{"path":"/tag/%E5%B7%A5%E4%BD%9C%E6%B5%81/","indexes":[94,95,96,97]},"工具":{"path":"/tag/%E5%B7%A5%E5%85%B7/","indexes":[98,99,100,101,102,103,104]},"设计模式":{"path":"/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","indexes":[105,106,107,108,109,110,111,112]}}}}}')},2878:(i,s,a)=>{a.d(s,{P:()=>n});const n={}},3781:(i,s,a)=>{a.d(s,{U:()=>n});const n=JSON.parse('{"article":{"/":{"path":"/article/","indexes":[59,60,113,61,62,63,64,65,66,67,52,53,54,55,47,48,49,56,57,41,50,42,43,44,58,45,51,46,39,40,38,70,71,72,73,74,75,76,31,32,33,34,35,36,37,24,25,26,27,28,29,30,18,19,20,21,22,23,2,3,4,5,68,6,7,8,69,9,10,11,12,13,14,105,106,107,108,109,110,111,112,77,78,79,80,81,82,94,95,96,97,98,99,100,101,102,103,104,83,84,85,86,87,88,89,90,15,91,16,92,93,17,0,1]}},"star":{"/":{"path":"/star/","indexes":[53,58,38,71,27,28,23,4,109,83,84,87,89,90,93]}},"timeline":{"/":{"path":"/timeline/","indexes":[59,60,113,61,62,63,64,65,66,67,52,53,54,55,47,48,49,56,57,41,50,42,43,44,58,45,51,46,39,40,38,70,71,72,73,74,75,76,31,32,33,34,35,36,37,24,25,26,27,28,29,30,18,19,20,21,22,23,2,3,4,5,68,6,7,8,69,9,10,11,12,13,14,105,106,107,108,109,110,111,112,77,78,79,80,81,82,94,95,96,97,98,99,100,101,102,103,104,83,84,85,86,87,88,89,90,15,91,16,92,93,17,0,1]}}}')},4607:(i,s,a)=>{a.d(s,{B:()=>ti});var n={};a.r(n),a.d(n,{default:()=>E});var t={};a.r(t);var e={};a.r(e);var l={};a.r(l),a.d(l,{default:()=>b});var h={};a.r(h);var k={};a.r(k),a.d(k,{default:()=>C});var p={};a.r(p),a.d(p,{default:()=>x});var r={};a.r(r);var d={};a.r(d);var g={};a.r(g),a.d(g,{default:()=>z});var B={};a.r(B),a.d(B,{default:()=>Z});var A={};a.r(A),a.d(A,{default:()=>V});var o={};a.r(o),a.d(o,{default:()=>$});var c={};a.r(c),a.d(c,{default:()=>ni});var y=a(5579);const E={enhance:({app:i})=>{i.component("GitContributors",y.B)}};var m=a(5359);const b=(0,m.re)({enhance:({app:i})=>{}});var u=a(3349),F=a(1781),v=a(9212);const C={enhance:({app:i})=>{i.component("CodeTabs",F.S),i.component("Tabs",v.t)}};var f=a(2996),D=a(3027);const x={enhance:({app:i})=>{i.component("CodeDemo",f.A),i.component("MdDemo",D.A)}};var S=a(2417),M=a(355),w=a(457),T=a(4764),j=a(7786),R=a(641),q=a(307);const z={enhance:({app:i})=>{(0,T.L)("VPIcon")||i.component("VPIcon",i=>(0,R.h)(q.G,{type:"iconify",prefix:"fa6-solid:",...i}))},setup:()=>{(0,j.r9V)("https://cdn.jsdelivr.net/npm/iconify-icon@2")}};var I=a(840),J=a(596),Q=a(8831);a(2771);const Z={enhance:({app:i})=>{(0,T.L)("Badge")||i.component("Badge",J.A),(0,T.L)("VPCard")||i.component("VPCard",Q.A)},setup:()=>{},rootComponents:[]};var P=a(6358),L=a(3827),N=a(1599),O=a(9540);const V={enhance({app:i}){(0,O.wn)(i),i.component("SearchBox",O.VA)}};var _=a(4546),H=a(2097),U=a(5260),Y=a(8160),G=a(8465),K=a(2024),W=a(1109),X=(a(2461),a(2472));a(7374),a(6829),a(6828),a(3248),(0,G.M_)(i=>{const s=i.title,a=i.index??!0,n=i.icon;return a?{title:s,content:n?()=>[(0,R.h)((0,R.g2)("VPIcon"),{icon:n,sizing:"both"}),s]:null,order:i.order,index:i.index}:null});const $={enhance:({app:i,router:s})=>{const{scrollBehavior:a}=s.options;s.options.scrollBehavior=async(...i)=>(await H.s.wait(),a(...i)),(0,U.i)(i),i.component("BloggerInfo",K.l),i.component("SocialMedias",K.k),i.component("GlobalEncrypt",X.J),i.component("LocalEncrypt",X.n)},setup:()=>{(0,U.s)(),(0,U.a)(),(0,W.su)()},layouts:{Layout:Y.L,NotFound:Y.N,Blog:K.B}};var ii=a(953);const si=(0,R.pM)({__name:"Home",setup:i=>(i,s)=>((0,R.uX)(),(0,R.Wv)((0,ii.R1)(K.B),null,{heroAfter:(0,R.k6)(()=>s[0]||(s[0]=[(0,R.Lk)("div",{id:"bannerWave1"},null,-1),(0,R.Lk)("div",{id:"bannerWave2"},null,-1)])),_:1}))}),ai=(0,a(6262).A)(si,[["__scopeId","data-v-1ca38d4f"]]),ni=(0,m.re)({layouts:{Home:ai}}),ti=[n,t,e,l,h,u,k,p,r,d,S,M,w,g,I,B,P,L,N,A,_,o,c].map(i=>i.default).filter(Boolean)},4776:(i,s,a)=>{a.d(s,{M:()=>n});const n=JSON.parse('["/blog/Dubbo/dubbo%E4%B8%AD%E7%9A%84spi%E6%9C%BA%E5%88%B6.html","/blog/Dubbo/@DubboReference%E6%B3%A8%E8%A7%A3.html","/blog/Java/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.html","/blog/Java/String%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0.html","/blog/Java/Lambda%E5%92%8CStream.html","/blog/Java/java%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.html","/blog/Java/%E6%B5%AE%E7%82%B9%E7%B2%BE%E5%BA%A6%EF%BC%88float%E3%80%81double%EF%BC%89%E8%BF%90%E7%AE%97%E4%B8%8D%E7%B2%BE%E7%A1%AE%E7%9A%84%E5%8E%9F%E5%9B%A0.html","/blog/Java/QLExpress%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","/blog/Java/HashMap%E5%8E%9F%E7%90%86.html","/blog/Java/%E6%97%A5%E5%BF%97%E6%9E%B6%E6%9E%84%E5%8E%86%E5%8F%B2.html","/blog/Java/java%E5%BC%82%E5%B8%B8.html","/blog/Java/java%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%B7%E8%B4%9D.html","/blog/Java/%E5%8F%8D%E5%B0%84.html","/blog/Java/java%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6.html","/blog/Java/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html","/blog/Docker/%E5%AE%89%E8%A3%85nginx.html","/blog/Docker/%E5%AE%89%E8%A3%85mysql%E5%8D%95%E6%9C%BA%E7%89%88%E6%9C%AC.html","/blog/Docker/linux%E5%AE%89%E8%A3%85docker.html","/blog/Jvm/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E5%86%85%E5%AD%98%E5%88%92%E5%88%86.html","/blog/Jvm/jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.html","/blog/Jvm/jvm%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.html","/blog/Jvm/jvm%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%BB%93%E6%9E%84%E5%92%8C%E5%88%9B%E5%BB%BA.html","/blog/Jvm/jvm%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7.html","/blog/Jvm/JVM%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html","/blog/MQ/RocketMQ%E6%A0%B8%E5%BF%83%E6%93%8D%E4%BD%9C.html","/blog/MQ/RabbitMQ%E6%95%B4%E5%90%88Spring%E6%88%96SpringBoot.html","/blog/MQ/RabbitMQ%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E4%BC%A0%E9%80%92.html","/blog/MQ/RabbitMQ%E5%85%AD%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F.html","/blog/MQ/RabbitMQ%E7%9A%84%E5%90%84%E7%A7%8D%E9%98%9F%E5%88%97.html","/blog/MQ/RabbitMQ%E5%AE%89%E8%A3%85.html","/blog/MQ/%E5%AE%89%E8%A3%85RocketMQ.html","/blog/Mybatis/spring%E6%95%B4%E5%90%88mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html","/blog/Mybatis/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90sql%E6%89%A7%E8%A1%8C.html","/blog/Mybatis/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90Mapp%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html","/blog/Mybatis/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html","/blog/Mybatis/mybatis%E7%BC%93%E5%AD%98.html","/blog/Mybatis/Mybatis%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90.html","/blog/Mybatis/mybatis%E6%8F%92%E4%BB%B6.html","/blog/Netty/BIO%EF%BC%8CNIO%E5%92%8CAIO%E6%A8%A1%E5%9E%8B.html","/blog/Nginx/SSL%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85.html","/blog/Nginx/%E4%B8%80%E7%AF%87%E6%90%9E%E5%AE%9Anignx.html","/blog/Redis/Redis%E6%8C%81%E4%B9%85%E5%8C%96.html","/blog/Redis/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%EF%BC%8C%E9%94%81%E5%92%8C%E4%BA%8B%E5%8A%A1.html","/blog/Redis/Redis%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","/blog/Redis/Redis%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1.html","/blog/Redis/redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html","/blog/Redis/Redis%E4%B8%BB%E4%BB%8E%EF%BC%8C%E5%93%A8%E5%85%B5%E5%92%8C%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F.html","/blog/Spring/Spring%E7%9A%84@Conditional%E6%B3%A8%E8%A7%A3.html","/blog/Spring/spring%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html","/blog/Spring/spring%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.html","/blog/Spring/spring%E7%9A%84AOP%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html","/blog/Spring/spring%E7%9A%84IOC%E5%8A%A0%E8%BD%BD%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B.html","/blog/SpringBoot/SpringBoot%E6%B3%A8%E5%86%8CBean%E7%9A%846%E7%A7%8D%E6%96%B9%E5%BC%8F.html","/blog/SpringBoot/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86.html","/blog/SpringBoot/SpringBoot%E5%A4%96%E7%BD%AEtomcat%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html","/blog/SpringBoot/SpringBoot%E7%9A%84run%E6%96%B9%E6%B3%95.html","/blog/SpringBoot/SpringBoot%E5%86%85%E5%B5%8Ctomcat%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html","/blog/SpringBoot/SpringBoot%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC.html","/blog/SpringBoot/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89starter.html","/blog/SpringCloud/Sentinel%E9%99%90%E6%B5%81.html","/blog/SpringCloud/SpringCloud%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA.html","/blog/SpringCloud/nacos%E7%9A%84%E5%AE%89%E8%A3%85.html","/blog/SpringCloud/Sentinel%E7%86%94%E6%96%AD.html","/blog/SpringCloud/nacos%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86.html","/blog/SpringCloud/OpenFeign.html","/blog/SpringCloud/nacos%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html","/blog/SpringCloud/sentinel%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html","/blog/SpringCloud/@SentinelResource%E6%B3%A8%E8%A7%A3.html","/blog/SpringMvc/springMvc%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html","/blog/SpringMvc/SpringMvc%E4%BD%BF%E7%94%A8Validation%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C.html","/blog/mysql/MySQL%E7%9A%84sql%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.html","/blog/mysql/MySQL%E7%9A%84MVCC.html","/blog/mysql/mysql%E7%9A%84Buffer%20Pool.html","/blog/mysql/mysql%E7%9A%84%E9%94%81.html","/blog/mysql/mysql%E7%9A%84%E7%B4%A2%E5%BC%95.html","/blog/mysql/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1.html","/blog/mysql/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8MySQL%E6%95%B0%E6%8D%AE%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E5%88%B0%E4%B8%83%E7%89%9B%E4%BA%91.html","/blog/zookeeper/zookeeper%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html","/blog/zookeeper/zookeeper%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html","/blog/zookeeper/zookeeper%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","/blog/zookeeper/%E6%89%8B%E5%86%99zookeeper%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.html","/blog/zookeeper/%E6%89%8B%E5%86%99zookeeper%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83.html","/blog/zookeeper/%E5%AE%89%E8%A3%85zookeeper.html","/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/volatile%E7%9A%84%E5%8E%9F%E7%90%86.html","/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%20.html","/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Semaphore%E5%8E%9F%E7%90%86.html","/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/ReentrantReadWriteLock%E5%8E%9F%E7%90%86.html","/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/ReentrantLock%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html","/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/JMM%E6%A8%A1%E5%9E%8B.html","/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/CountDownLatch%E5%92%8CCyclicBarrier.html","/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/ConcurrentHashMap%E5%88%86%E6%AE%B5%E9%94%81.html","/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/CAS%E5%92%8CAtomic.html","/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80.html","/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0ThreadPoolExecutor.html","/blog/%E5%B7%A5%E4%BD%9C%E6%B5%81/SpringBoot%E6%95%B4%E5%90%88flowable.html","/blog/%E5%B7%A5%E4%BD%9C%E6%B5%81/flowable%E8%AF%B7%E5%81%87%E6%B5%81%E7%A8%8B%E6%A1%88%E4%BE%8B.html","/blog/%E5%B7%A5%E4%BD%9C%E6%B5%81/Flowable%E6%B5%81%E7%A8%8B%E5%9B%BE.html","/blog/%E5%B7%A5%E4%BD%9C%E6%B5%81/flowable%20%E4%BC%9A%E7%AD%BE%E3%80%81%E8%BD%AC%E6%B4%BE%E3%80%81%E5%A7%94%E6%B4%BE%E3%80%81%E5%8A%A0%E7%AD%BE.html","/blog/%E5%B7%A5%E5%85%B7/xshell8%E5%AE%89%E8%A3%85.html","/blog/%E5%B7%A5%E5%85%B7/ssh%E6%9C%8D%E5%8A%A1%E7%99%BB%E5%BD%95linux.html","/blog/%E5%B7%A5%E5%85%B7/Odsidian%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8.html","/blog/%E5%B7%A5%E5%85%B7/NavicatPremium16%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E6%BF%80%E6%B4%BB.html","/blog/%E5%B7%A5%E5%85%B7/idea2024.1.7%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%92%8C%E6%BF%80%E6%B4%BB.html","/blog/%E5%B7%A5%E5%85%B7/Jmeter%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8.html","/blog/%E5%B7%A5%E5%85%B7/%E5%9B%BE%E5%BA%8A%E7%A5%9E%E5%99%A8PicGo_%E4%B8%83%E7%89%9B%E4%BA%91.html","/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.html","/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html","/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html","/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.html","/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html","/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F-%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F.html","/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html","/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html","/blog/"]')},4923:(i,s,a)=>{},6653:(i,s,a)=>{a.d(s,{K:()=>n});const n=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":{"tokens":["$2b$10$uEt5p8qZsPbApHO5KOTKf.uep7yeP9WTgQWamhb6Zbspq9vj6e8eC"],"hint":"Password: 1234"}}},"editLink":false,"darkmode":false,"navbarLayout":{"start":["Brand"],"center":["Links","Outlook"],"end":["Search"]},"blog":{"description":"一个菜鸟和牛马","avatar":"http://img.zouyh.top/theme/blog/heard.png","intro":"/intro.html"},"repoDisplay":false,"navbarAutoHide":"always","prevLink":true,"nextLink":true,"lastUpdated":true,"author":{"name":"Mr.Zyh","url":"http://img.zouyh.top/"},"docsDir":"src","footer":"豫ICP备2022026603号","displayFooter":true,"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routerLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":["/",{"text":"文章","icon":"book-open","link":"/blog/"},{"text":"分类","icon":"bookmark","link":"/category/"},{"text":"时间轴","icon":"calendar","link":"/timeline/"}],"sidebar":{"/":[{"text":"文章目录","icon":"folder-open","prefix":"blog/","children":"structure"}]}}}}')},8123:(i,s,a)=>{a.d(s,{v:()=>n});const n={"/blog/":[{text:"Docker",prefix:"Docker/",collapsible:!0,children:["linux安装docker","安装mysql单机版本","安装nginx"]},{text:"Dubbo",prefix:"Dubbo/",collapsible:!0,children:["@DubboReference注解","dubbo中的spi机制"]},{text:"Java",prefix:"Java/",collapsible:!0,children:["HashMap原理","java对象的拷贝","java异常","java访问权限修饰符","java运算符优先级","Lambda和Stream","QLExpress表达式","String字符串常量池","TCP三次握手","反射","常见问题","日志架构历史","浮点精度（float、double）运算不精确的原因"]},{text:"Jvm",prefix:"Jvm/",collapsible:!0,children:["jvm垃圾收集器","jvm对象的结构和创建","JVM的垃圾回收机制","jvm类加载机制","jvm调优工具","JVM运行时内存划分"]},{text:"MQ",prefix:"MQ/",collapsible:!0,children:["RabbitMQ六种工作模式","RabbitMQ安装","RabbitMQ整合Spring或SpringBoot","RabbitMQ消息的可靠传递","RabbitMQ的各种队列","RocketMQ核心操作","安装RocketMQ"]},{text:"Mybatis",prefix:"Mybatis/",collapsible:!0,children:["Mybatis动态数据源","mybatis插件","mybatis源码解析Mapp配置文件","mybatis源码解析sql执行","mybatis源码解析核心配置文件","mybatis缓存","spring整合mybatis源码解析"]},{text:"Mysql",prefix:"mysql/",collapsible:!0,children:["mysql的Buffer Pool","MySQL的MVCC","MySQL的sql执行流程","mysql的事务","mysql的索引","mysql的锁","云服务器MySQL数据自动备份到七牛云"]},{text:"Netty",prefix:"Netty/",collapsible:!0,children:["BIO，NIO和AIO模型"]},{text:"Nginx",prefix:"Nginx/",collapsible:!0,children:["SSL证书安装","一篇搞定nignx"]},{text:"Redis",prefix:"Redis/",collapsible:!0,children:["Redis主从，哨兵和集群模式","Redis发布订阅，锁和事务","redis实现分布式锁","Redis持久化","Redis核心数据结构","Redis缓存设计"]},{text:"Spring",prefix:"Spring/",collapsible:!0,children:["Spring的@Conditional注解","spring的AOP原理解析","spring的IOC加载整体流程","spring的事务原理解析","spring的循环依赖"]},{text:"Spring Boot",prefix:"SpringBoot/",collapsible:!0,children:["SpringBoot事件监听","SpringBoot内嵌tomcat原理解析","SpringBoot外置tomcat原理解析","SpringBoot注册Bean的6种方式","SpringBoot的run方法","SpringBoot自动装配原理","SpringBoot自定义starter"]},{text:"Spring Cloud",prefix:"SpringCloud/",collapsible:!0,children:["@SentinelResource注解","nacos快速开始","nacos的安装","nacos的服务治理","OpenFeign","sentinel快速开始","Sentinel熔断","Sentinel限流","SpringCloud项目创建"]},{text:"Spring Mvc",prefix:"SpringMvc/",collapsible:!0,children:["SpringMvc使用Validation参数校验","springMvc源码解析"]},{text:"Zookeeper",prefix:"zookeeper/",collapsible:!0,children:["zookeeper实现分布式锁","zookeeper常用命令","zookeeper源码解析","安装zookeeper","手写zookeeper注册中心","手写zookeeper配置中心"]},{text:"多线程",prefix:"多线程/",collapsible:!0,children:["CAS和Atomic","ConcurrentHashMap分段锁","CountDownLatch和CyclicBarrier","JMM模型","ReentrantLock原理解析","ReentrantReadWriteLock原理","Semaphore原理","synchronized底层原理 ","volatile的原理","线程基础","线程池ThreadPoolExecutor"]},{text:"工作流",prefix:"工作流/",collapsible:!0,children:["flowable 会签、转派、委派、加签","Flowable流程图","flowable请假流程案例","SpringBoot整合flowable"]},{text:"工具",prefix:"工具/",collapsible:!0,children:["idea2024.1.7的下载和激活","Jmeter的安装使用","NavicatPremium16的安装与激活","Odsidian文本编辑器","ssh服务登录linux","xshell8安装","/blog/%E5%B7%A5%E5%85%B7/%E5%9B%BE%E5%BA%8A%E7%A5%9E%E5%99%A8PicGo_%E4%B8%83%E7%89%9B%E4%BA%91.html"]},{text:"设计模式",prefix:"设计模式/",collapsible:!0,children:["关系模式-策略模式","关系模式-责任链模式","创建模式-单例模式","创建模式-工厂模式","创建模式-生成器模式","结构模式-代理模式","结构模式-装饰者模式","结构模式-适配器模式"]}]}},8164:(i,s,a)=>{a.d(s,{J:()=>t,c:()=>n});const n=JSON.parse('{"/blog/%E5%B7%A5%E5%85%B7/%E5%9B%BE%E5%BA%8A%E7%A5%9E%E5%99%A8PicGo+%E4%B8%83%E7%89%9B%E4%BA%91.html":"/blog/%E5%B7%A5%E5%85%B7/%E5%9B%BE%E5%BA%8A%E7%A5%9E%E5%99%A8PicGo_%E4%B8%83%E7%89%9B%E4%BA%91.html"}'),t=Object.fromEntries([["/",{loader:()=>a.e(4470).then(a.bind(a,9908)),meta:{title:"主页",icon:"house"}}],["/intro.html",{loader:()=>a.e(3912).then(a.bind(a,7657)),meta:{title:"",icon:"circle-info"}}],["/blog/",{loader:()=>a.e(7487).then(a.bind(a,6199)),meta:{date:1755935409e3,readingTime:{minutes:.03,words:9},title:"目录",icon:"list",type:"article"}}],["/blog/Dubbo/@DubboReference%E6%B3%A8%E8%A7%A3.html",{loader:()=>a.e(9596).then(a.bind(a,8201)),meta:{author:"Ms.Zyh",date:16501536e5,category:["Dubbo"],tag:["必看","Dubbo"],sticky:!1,excerpt:'<p>对于Dubbo用的最多的就是@DubboService用于服务的提供方，@DubboReference用于服务的调用方。<br>\n不管是服务端还是客户端，在使用Dubbo的时候都会先使用@EnableDubbo，比如下面的demo：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">SpringBootApplication</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">EnableDubbo</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, args);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.46,words:1337},title:"@DubboReference注解",icon:"file-lines",type:"article"}}],["/blog/Dubbo/dubbo%E4%B8%AD%E7%9A%84spi%E6%9C%BA%E5%88%B6.html",{loader:()=>a.e(4343).then(a.bind(a,8555)),meta:{author:"Ms.Zyh",date:16509312e5,category:["Dubbo"],tag:["基础","Dubbo"],sticky:!1,excerpt:'<h3>一，spi是什么？</h3>\n<figure><img src="http://img.zouyh.top/article-img/20240917135120387.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>\n<p>SPI（Service Provider Interface）是JDK内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用。当服务的提供者提供了一种接口的实现之后，需要在classpath下的<code>META-INF/services/</code>目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。</p>',readingTime:{minutes:14.91,words:4473},title:"dubbo中的spi机制",icon:"file-lines",type:"article"}}],["/blog/Java/HashMap%E5%8E%9F%E7%90%86.html",{loader:()=>a.e(1139).then(a.bind(a,2624)),meta:{author:"Ms.Zyh",date:16832448e5,category:["Java"],tag:["推荐","Java"],sticky:!1,excerpt:'<h3>一，HashMap原理</h3>\n<h4>1.1 数据结构</h4>\n<p>从结构实现来讲，HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，如下如所示:</p>\n<img src="http://img.zouyh.top/article-img/20240917134940109.png" alt="image-20230320114228827" style="zoom: 67%;">\n<p>从源码可知，HashMap类中有一个非常重要的字段，就是 <code>Node&lt;K,V&gt;[] table</code>，即哈希桶数组</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">transient</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Node</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">K</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">V</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] table</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',readingTime:{minutes:11.23,words:3369},title:"HashMap原理",icon:"file-lines",type:"article"}}],["/blog/Java/Lambda%E5%92%8CStream.html",{loader:()=>a.e(1673).then(a.bind(a,6226)),meta:{author:"Ms.Zyh",date:16859232e5,category:["Java"],tag:["必看","Java"],sticky:!1,excerpt:"<h3>一，Lambda</h3>\n<h4>1.1 简介</h4>\n<p>Lambda 表达式是 JDK8 的一个新特性，可以取代大部分的匿名内部类，写出更优雅的 Java 代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。</p>\n<h4>1.2 对接口的要求</h4>\n<p>​\t虽然使用 Lambda 表达式可以对某些接口进行简单的实现，但并不是所有的接口都可以使用 Lambda 表达式来实现。Lambda 规定接口中只能有一个需要被实现的方法，不是规定接口中只能有一个方法。</p>\n<h4>1.3 @FunctionalInterface</h4>\n<p><code>@FunctionalInterface</code>修饰函数式接口的，要求接口中的抽象方法只有一个。 这个注解往往会和 lambda 表达式一起出现。</p>",readingTime:{minutes:14.07,words:4220},title:"Lambda和Stream",icon:"file-lines",type:"article"}}],["/blog/Java/QLExpress%E8%A1%A8%E8%BE%BE%E5%BC%8F.html",{loader:()=>a.e(8712).then(a.bind(a,9235)),meta:{author:"Ms.Zyh",date:16835904e5,category:["Java"],tag:["必看","Java"],sticky:!1,excerpt:"<h3>一，背景介绍</h3>\n<p>由阿里的电商业务规则、表达式（布尔组合）、特殊数学公式计算（高精度）、语法分析、脚本二次定制等强需求而设计的一门动态脚本引擎解析工具。<br>\n在阿里集团有很强的影响力，同时为了自身不断优化、发扬开源贡献精神，于2012年开源。<br>\nQLExpress脚本引擎被广泛应用在阿里的电商业务场景，具有以下的一些特性:</p>\n<ul>\n<li>线程安全，引擎运算过程中的产生的临时变量都是threadlocal类型。</li>\n<li>高效执行，比较耗时的脚本编译过程可以缓存在本地机器，运行时的临时变量创建采用了缓冲池的技术，和groovy性能相当。</li>\n<li>弱类型脚本语言，和groovy，javascript语法类似，虽然比强类型脚本语言要慢一些，但是使业务的灵活度大大增强。</li>\n<li>安全控制,可以通过设置相关运行参数，预防死循环、高危系统api调用等情况。</li>\n<li>代码精简，依赖最小，250k的jar包适合所有java的运行环境，在android系统的低端pos机也得到广泛运用。</li>\n</ul>",readingTime:{minutes:15.34,words:4602},title:"QLExpress表达式",icon:"file-lines",type:"article"}}],["/blog/Java/String%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0.html",{loader:()=>a.e(5775).then(a.bind(a,2332)),meta:{author:"Ms.Zyh",date:16870464e5,category:["Java"],tag:["常用","Java"],sticky:!1,excerpt:'<h3>一，String字符串常量池</h3>\n<h4>1.1 字符串常量池的设计思想</h4>\n<ol>\n<li>字符串的分配，和其他的对象分配一样，耗费高昂的时间与空间代价，作为最基础的数据类型，大量频繁的创建 字符串，极大程度地影响程序的性能</li>\n<li>JVM为了提高性能和减少内存开销，在实例化字符串常量的时候进行了一些优化 为字符串开辟一个字符串常量池，类似于缓存区创建字符串常量时，首先查询字符串常量池是否存在该字符串存在该字符串，返回引用实例，不存在，实例化该字符串并放入池中</li>\n</ol>\n<h4>1.2 三种字符串操作</h4>\n<p>①，直接赋值字符串</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "zyh"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // s指向常量池中的引用</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',readingTime:{minutes:9.43,words:2829},title:"String字符串常量池",icon:"file-lines",type:"article"}}],["/blog/Java/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.html",{loader:()=>a.e(8349).then(a.bind(a,477)),meta:{author:"Ms.Zyh",date:16883424e5,category:["Java"],tag:["干货","Java"],sticky:!1,excerpt:"<p>假设两个人A、B两个情报员，需要通过书信交流情报。AB双方想要真正交流情报，首先需要建立交流渠道、需要确保自己能发（SYN）且别人能收（ACK）：<br>\n二次握手：<br>\nA：“你能收到我写的信吗？”（A:SYN）<br>\nB：“我能收到你写的信！你能收到我写的信吗？”（B:ACK-B:SYN）<br>\n三次握手：<br>\nA：“你能收到我写的信吗？”（A:SYN）<br>\nB：“我能收到你写的信！你能收到我写的信吗？”（B:ACK-B:SYN）<br>\nA：“我也能收到！”（A:ACK）<br>\n四次握手：<br>\nA：“你能收到我写的信吗？”（A:SYN）<br>\nB：“我能收到你写的信！”（B:ACK）<br>\nB：“你能收到我写的信吗？”（B:SYN）<br>\nA：“我也能收到！”（A:ACK）<br>\n好的，我们现在解释一下常见的问题。<br>\n问题1:为什么TCP二次握手不可以？<br>\n根据二次握手中A和B的交流、可以发现A可以确定自己能发（SYN）、B能收（ACK），但是B只能确定自己能发（SYN），A能不能收（ACK）到这就不确定了。试想一下你和你朋友写信，一直没收到朋友的回信，你还会继续写下去吗，你会怀疑自己是不是发的地址不对，或者朋友没有收到信，再说写下去也是白写，平白浪费时间。<br>\n问题2:为什么不是四次握手？<br>\n根据四次握手中A和B的交流、可以发现A可以确定自己能发（SYN）、B能收（ACK），B也能确定自己能发（SYN），A能收（ACK）到。那为什么不采用四次握手？因为B家没钱，为了节省钱，就写了一封信做了两件事，回答朋友的问题并问出自己的问题。</p>",readingTime:{minutes:1.58,words:474},title:"TCP三次握手",icon:"file-lines",type:"article"}}],["/blog/Java/java%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%B7%E8%B4%9D.html",{loader:()=>a.e(4082).then(a.bind(a,9084)),meta:{author:"Ms.Zyh",date:16814304e5,category:["Java"],tag:["必看","Java"],sticky:!1,excerpt:'<h3>一，java对象的拷贝</h3>\n<p>​\t将一个对象的引用复制给另一个对象，一共有三种方式。第一种是直接赋值，第二种方式是浅拷贝，第三种是深拷贝，这三种方式实际上都是为了拷贝对象。</p>\n<h4>1.1 直接赋值</h4>\n<p>​\t直接赋值是通过<code>=</code>进行赋值操作的，直接赋值对于不可变类而言相当于深拷贝，常见的不可变类八个基本类型的包装类和String类都属于不可变类。</p>\n<p>案例1，不可变类的赋值操作：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] args) {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "1"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> d </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"修改前c:"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">b);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 输出 1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"修改前d:"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">bb);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 输出 1</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "2"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"修改前c:"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">b);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 输出 2</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"修改前d:"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">bb);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 输出 2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.89,words:1166},title:"java对象的拷贝",icon:"file-lines",type:"article"}}],["/blog/Java/java%E5%BC%82%E5%B8%B8.html",{loader:()=>a.e(2596).then(a.bind(a,3905)),meta:{author:"Ms.Zyh",date:168264e7,category:["Java"],tag:["常用","Java"],sticky:!1,excerpt:"<h3>一，java异常</h3>\n<h4>1.1 定义</h4>\n<p>异常就是有异于常态，和正常情况不一样，有错误出现。在java中，阻止当前方法或作用域的情况，称之为异常。</p>\n<h4>1.2 异常的分类</h4>\n<ul>\n<li>运行时异常： <code>RuntimeException</code>类极其子类表示JVM在运行期间可能出现的错误。编译器不会检查此类异常，并且不要求处理异常，比如用空值对象的引用（<code>NullPointerException</code>）、数组下标越界（<code>ArrayIndexOutBoundException</code>）。此类异常属于不可查异常，一般是由程序逻辑错误引起的，在程序中可以选择捕获处理，也可以不处理。</li>\n<li>非运行时异常：Exception中除<code>RuntimeException</code>极其子类之外的异常。编译器会检查此类异常，如果程序中出现此类异常，比如说<code>IOException</code>，必须对该异常进行处理，要么使用try-catch捕获，要么使用throws语句抛出，否则编译不通过。（不能只使用throw并没有处理异常）</li>\n<li>错误：错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li>\n</ul>",readingTime:{minutes:5.63,words:1688},title:"java异常",icon:"file-lines",type:"article"}}],["/blog/Java/java%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6.html",{loader:()=>a.e(8910).then(a.bind(a,17)),meta:{author:"Ms.Zyh",date:16811712e5,category:["Java"],tag:["基础","Java"],sticky:!1,excerpt:"<h3>一，结论</h3>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>当前类(案例1)</th>\n<th>同一包内(案例2)</th>\n<th>子孙类(案例3)</th>\n<th>子孙类(不同包)(案例4)</th>\n<th>其他包(案例5)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y/N(案例4.1)</td>\n<td>N</td>\n</tr>\n<tr>\n<td>default</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n<td>N</td>\n</tr>\n<tr>\n<td>private</td>\n<td>Y</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n</tr>\n</tbody>\n</table>",readingTime:{minutes:1.96,words:589},title:"java访问权限修饰符",icon:"file-lines",type:"article"}}],["/blog/Java/java%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.html",{loader:()=>a.e(5556).then(a.bind(a,6229)),meta:{author:"Ms.Zyh",date:16855776e5,category:["Java"],tag:["基础","Java"],sticky:!1,excerpt:'<table>\n<thead>\n<tr>\n<th style="text-align:left">优先级</th>\n<th style="text-align:left">运算符</th>\n<th style="text-align:left">结合性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left">1</td>\n<td style="text-align:left"><code>()</code>、<code>[]</code>、 <code>.</code></td>\n<td style="text-align:left">从左到右</td>\n</tr>\n<tr>\n<td style="text-align:left">2</td>\n<td style="text-align:left"><code>!</code> 、<code>+</code>（正）、<code> -</code>（负）、 <code>~</code>、 <code>++</code> 、<code>—</code></td>\n<td style="text-align:left">从右向左</td>\n</tr>\n<tr>\n<td style="text-align:left">3</td>\n<td style="text-align:left"><code>*</code> 、<code>/ </code>、<code>%</code></td>\n<td style="text-align:left">从左向右</td>\n</tr>\n<tr>\n<td style="text-align:left">4</td>\n<td style="text-align:left"><code>+</code>(加) 、<code>-</code>(减)</td>\n<td style="text-align:left">从左向右</td>\n</tr>\n<tr>\n<td style="text-align:left">5</td>\n<td style="text-align:left"><code>&lt;&lt;</code> 、<code>&gt;&gt;</code>、 <code>&gt;&gt;&gt;</code></td>\n<td style="text-align:left">从左向右</td>\n</tr>\n<tr>\n<td style="text-align:left">6</td>\n<td style="text-align:left"><code>&lt; </code>、<code>&lt;=</code> 、<code>&gt;</code> 、<code>&gt;= </code>、 <code>instanceof</code></td>\n<td style="text-align:left">从左向右</td>\n</tr>\n<tr>\n<td style="text-align:left">7</td>\n<td style="text-align:left"><code>==</code> 、<code>!=</code></td>\n<td style="text-align:left">从左向右</td>\n</tr>\n<tr>\n<td style="text-align:left">8</td>\n<td style="text-align:left"><code>&amp;</code></td>\n<td style="text-align:left">从左向右</td>\n</tr>\n<tr>\n<td style="text-align:left">9</td>\n<td style="text-align:left"><code>^</code></td>\n<td style="text-align:left">从左向右</td>\n</tr>\n<tr>\n<td style="text-align:left">10</td>\n<td style="text-align:left"><code>｜</code></td>\n<td style="text-align:left">从左向右</td>\n</tr>\n<tr>\n<td style="text-align:left">11</td>\n<td style="text-align:left"><code>&amp;&amp;</code></td>\n<td style="text-align:left">从左向右</td>\n</tr>\n<tr>\n<td style="text-align:left">12</td>\n<td style="text-align:left"><code>｜｜</code></td>\n<td style="text-align:left">从左向右</td>\n</tr>\n<tr>\n<td style="text-align:left">13</td>\n<td style="text-align:left"><code>?:</code></td>\n<td style="text-align:left">从右向左</td>\n</tr>\n<tr>\n<td style="text-align:left">14</td>\n<td style="text-align:left"><code>=</code> 、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&amp;=</code>、<code>｜=</code>、<code>^=</code>、<code>~=</code>、<code>&lt;&lt;=</code>、<code>&gt;&gt;=</code>、<code>&gt;&gt;&gt;=</code></td>\n<td style="text-align:left">从右向左</td>\n</tr>\n</tbody>\n</table>',readingTime:{minutes:1.36,words:407},title:"java运算符优先级",icon:"file-lines",type:"article"}}],["/blog/Java/%E5%8F%8D%E5%B0%84.html",{loader:()=>a.e(7463).then(a.bind(a,1665)),meta:{author:"Ms.Zyh",date:16814304e5,category:["Java"],tag:["偏僻","Java"],sticky:!1,excerpt:'<p>下面所有案例使用的对象和接口：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> TestInterface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Component</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> TestObject</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> TestInterface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> desc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> TestObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(){</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> TestObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> name;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> TestObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> desc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">desc</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">desc;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> name;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testPrivate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> v;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testPublic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> v;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.54,words:1363},title:"反射",icon:"file-lines",type:"article"}}],["/blog/Java/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html",{loader:()=>a.e(8363).then(a.bind(a,8140)),meta:{author:"Ms.Zyh",date:16794432e5,category:["Java"],tag:["必看","Java"],sticky:!1,excerpt:"<h3>一，FastJson反序列化和lombock注解</h3>\n<h4>1，报错信息：</h4>\n<p><code>com.alibaba.fastjson.JSONException: default constructor not found</code></p>\n<h4>2，问题描述：</h4>\n<p>lombock的@Builder注解会自动生成全参构造，从而导致默认的无参数构造丢失，如果此时结合JSON的反序列化<code>JSON.parseObject(jsonString,calss);</code>方法就会报错。</p>\n<h4>3，解决方式：</h4>\n<p>使用@Builder注解时，同时添加无参和有参构造</p>",readingTime:{minutes:.67,words:202},title:"常见问题",icon:"file-lines",type:"article"}}],["/blog/Java/%E6%97%A5%E5%BF%97%E6%9E%B6%E6%9E%84%E5%8E%86%E5%8F%B2.html",{loader:()=>a.e(4116).then(a.bind(a,8479)),meta:{author:"Ms.Zyh",date:16828992e5,category:["Java"],tag:["基础","Java"],sticky:!1,excerpt:'<h3>一，日志架构历史</h3>\n<figure><img src="http://img.zouyh.top/article-img/20240917134943118.png" alt="image-20221221105052919" tabindex="0" loading="lazy"><figcaption>image-20221221105052919</figcaption></figure>\n<h4>1.1log4j</h4>\n<p>很多年前，一个叫 <code>Ceki Gülcü</code> 的大佬在一个项目中开发跟踪 API，这套跟踪 API 逐步演变成 <code>log4j</code>, 大概1999年，<code>log4j</code> 成为 Apache 的一员。</p>',readingTime:{minutes:3.7,words:1111},title:"日志架构历史",icon:"file-lines",type:"article"}}],["/blog/Java/%E6%B5%AE%E7%82%B9%E7%B2%BE%E5%BA%A6%EF%BC%88float%E3%80%81double%EF%BC%89%E8%BF%90%E7%AE%97%E4%B8%8D%E7%B2%BE%E7%A1%AE%E7%9A%84%E5%8E%9F%E5%9B%A0.html",{loader:()=>a.e(4179).then(a.bind(a,2229)),meta:{author:"Ms.Zyh",date:16836768e5,category:["Java"],tag:["推荐","Java"],sticky:!1,excerpt:'<blockquote>\n<p>结论：十进制小数与二进制的相互转换，时小数部分在转换过程中陷入了无线循环状态</p>\n</blockquote>\n<h3>一，问题描述</h3>\n<p>为什么浮点精度运算会有问题，我们平常使用的编程语言大多都有一个问题——浮点型精度运算会不准确。比如</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> num </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 输出结果为 0.30000000000000004</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> num2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0.65</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0.6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 输出结果为 0.05000000000000004</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.98,words:1493},title:"浮点精度（float、double）运算不精确的原因",icon:"file-lines",type:"article"}}],["/blog/Docker/linux%E5%AE%89%E8%A3%85docker.html",{loader:()=>a.e(6296).then(a.bind(a,7849)),meta:{author:"Ms.Zyh",date:16523136e5,category:["Docker"],tag:["进阶","Docker"],sticky:!1,excerpt:'<h3>一，安装</h3>\n<p>第一步：检查内核版本，必须是3.10及以上</p>\n<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[root@VM-4-7-centos ~]# uname -r</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">3.10.0-1160.99.1.el7.x86_64</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:1.36,words:408},title:"linux安装docker",icon:"file-lines",type:"article"}}],["/blog/Docker/%E5%AE%89%E8%A3%85mysql%E5%8D%95%E6%9C%BA%E7%89%88%E6%9C%AC.html",{loader:()=>a.e(4487).then(a.bind(a,9497)),meta:{author:"Ms.Zyh",date:16530048e5,category:["Docker"],tag:["常用","Docker"],sticky:!1,excerpt:'<h3>一，安装</h3>\n<p>1，官网搜索：<a href="https://hub.docker.com/search/?q=&amp;type=image%E6%88%96%E8%80%85%60docker" target="_blank" rel="noopener noreferrer">https://hub.docker.com/search/?q=&amp;type=image或者`docker</a> search 关键字`搜索<br>\n<img src="http://img.zouyh.top/article-img/202505241949706.png" alt="image.png" loading="lazy"></p>',readingTime:{minutes:.95,words:284},title:"安装mysql单机版本",icon:"file-lines",type:"article"}}],["/blog/Docker/%E5%AE%89%E8%A3%85nginx.html",{loader:()=>a.e(358).then(a.bind(a,2383)),meta:{author:"Ms.Zyh",date:1653696e6,category:["Docker"],tag:["推荐","Docker"],sticky:!1,excerpt:'<h3>一，安装</h3>\n<p>1，官网搜索：<a href="https://hub.docker.com/search/?q=&amp;type=image%E6%88%96%E8%80%85%60docker" target="_blank" rel="noopener noreferrer">https://hub.docker.com/search/?q=&amp;type=image或者`docker</a> search 关键字`搜索<br>\n2，拉取镜像:</p>\n<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> nginx</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',readingTime:{minutes:1.51,words:454},title:"安装nginx",icon:"file-lines",type:"article"}}],["/blog/Jvm/JVM%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html",{loader:()=>a.e(2091).then(a.bind(a,9576)),meta:{author:"Ms.Zyh",date:16888608e5,category:["Jvm"],tag:["进阶","Jvm"],sticky:!1,excerpt:"<h3>一，JVM的垃圾回收机制</h3>\n<blockquote>\n<p>IDEA 控制台输出JVM的GC日志,在 VM options 添加 <code>-XX:+PrintGCDetails</code> 即可</p>\n</blockquote>\n<h4>1.1 如何判定垃圾对象</h4>\n<h5>1.1.1 引用计数法</h5>\n<p>​\t在每个对象都维护着一个内存字段来统计它被多少”部分”使用—引用计数器,每当有一个新的引用指向该对象时,引用计数器就+1 ,每当指向该引用对象失效时该计数器就-1 ,当引用数量为0的时候,则说明对象没有被任何引用指向,可以认定是”垃圾”对象.</p>\n",readingTime:{minutes:14.26,words:4279},title:"JVM的垃圾回收机制",icon:"file-lines",type:"article"}}],["/blog/Jvm/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E5%86%85%E5%AD%98%E5%88%92%E5%88%86.html",{loader:()=>a.e(7993).then(a.bind(a,9562)),meta:{author:"Ms.Zyh",date:16916256e5,category:["Jvm"],tag:["常用","Jvm"],sticky:!1,excerpt:'<h3>一，JVM运行时内存划分</h3>\n<img src="http://img.zouyh.top/article-img/20240917135026220.png" alt="image-20230207104425346" style="zoom: 67%;">\n<p>线程共享区：</p>\n<ul>\n<li>方法堆</li>\n<li>java堆</li>\n</ul>\n<p>线程独占区：</p>\n<ul>\n<li>虚拟机栈</li>\n<li>本地方法栈</li>\n<li>程序计数区</li>\n</ul>\n<h4>1.1 虚拟机栈</h4>\n<ul>\n<li>虚拟机栈描述的是Java方法执行的动态内存模型；</li>\n<li>栈帧：每一个方法的执行都会创建一个栈帧，伴随着方法从创建（压入虚拟机栈）到执行完成（弹出虚拟机栈）。用于存储局部变量表，操作数栈，动态链接，方法出口等。栈帧包含一个方法的主要信息。</li>\n<li>局部变量表：存放编译期可知的各种基本数据类型，引用类型，方法的出口地址；局部变量表的内存空间，在编译期完成分配，当进入一个方法时，这个方法，需要在帧中分配的空间时固定的，在方法运行期间不会改变局部变量表的大小。</li>\n<li>StackOverFlowError：通常是递归调用方法不合理，导致虚拟机栈空间不够了</li>\n</ul>',readingTime:{minutes:2.84,words:852},title:"JVM运行时内存划分",icon:"file-lines",type:"article"}}],["/blog/Jvm/jvm%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.html",{loader:()=>a.e(3641).then(a.bind(a,5154)),meta:{author:"Ms.Zyh",date:16897248e5,category:["Jvm"],tag:["基础","Jvm"],sticky:!1,excerpt:"<h3>一，七款经典垃圾收集器</h3>\n<p>七款经典的垃圾收集器：</p>\n<table>\n<thead>\n<tr>\n<th>收集器</th>\n<th>串行、并行or并发</th>\n<th>新生代/老年代</th>\n<th>算法</th>\n<th>目标</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Serial</td>\n<td>串行</td>\n<td>新生代</td>\n<td>复制算法</td>\n<td>响应速度优先</td>\n<td>单CPU环境下的Client模式</td>\n</tr>\n<tr>\n<td>Serial Old</td>\n<td>串行</td>\n<td>老年代</td>\n<td>标记-整理</td>\n<td>响应速度优先</td>\n<td>单CPU环境下的Client模式、CMS的后备预案</td>\n</tr>\n<tr>\n<td>ParNew</td>\n<td>并行</td>\n<td>新生代</td>\n<td>复制算法</td>\n<td>响应速度优先</td>\n<td>多CPU环境时在Server模式下与CMS配合</td>\n</tr>\n<tr>\n<td>Parallel Scavenge</td>\n<td>并行</td>\n<td>新生代</td>\n<td>复制算法</td>\n<td>吞吐量优先</td>\n<td>在后台运算而不需要太多交互的任务</td>\n</tr>\n<tr>\n<td>Parallel Old</td>\n<td>并行</td>\n<td>老年代</td>\n<td>标记-整理</td>\n<td>吞吐量优先</td>\n<td>在后台运算而不需要太多交互的任务</td>\n</tr>\n<tr>\n<td>CMS</td>\n<td>并发</td>\n<td>老年代</td>\n<td>标记-清除</td>\n<td>响应速度优先</td>\n<td>集中在互联网站或B/S系统服务端上的Java应用</td>\n</tr>\n<tr>\n<td>G1</td>\n<td>并发</td>\n<td>both</td>\n<td>标记-整理+复制算法</td>\n<td>响应速度优先</td>\n<td>面向服务端应用，将来替换CMS</td>\n</tr>\n</tbody>\n</table>",readingTime:{minutes:27.71,words:8313},title:"jvm垃圾收集器",icon:"file-lines",type:"article"}}],["/blog/Jvm/jvm%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%BB%93%E6%9E%84%E5%92%8C%E5%88%9B%E5%BB%BA.html",{loader:()=>a.e(1646).then(a.bind(a,54)),meta:{author:"Ms.Zyh",date:16894656e5,category:["Jvm"],tag:["干货","Jvm"],sticky:!1,excerpt:'<h3>一，对象的结构</h3>\n<img src="http://img.zouyh.top/article-img/20240917135027224.png" alt="image-20230208164713119" style="zoom: 80%;">\n<h4>1.1 对象头</h4>\n<p>​\tHotSpot虚拟机的对象头主要包括两部分信息markword和klass，如果是数组实例还会包含数组长度。</p>\n<h5>1.1.2 markword</h5>\n<p>​\t第一部分markword,用于存储对象自身的运行时数据，如<strong>哈希码（HashCode）</strong>、<strong>GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳</strong>等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为“MarkWord”。</p>',readingTime:{minutes:15.23,words:4569},title:"jvm对象的结构和创建",icon:"file-lines",type:"article"}}],["/blog/Jvm/jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.html",{loader:()=>a.e(7864).then(a.bind(a,3753)),meta:{author:"Ms.Zyh",date:16910208e5,category:["Jvm"],tag:["干货","Jvm"],sticky:!1,excerpt:'<h3>一，jvm类加载机制</h3>\n<h4>1.1 什么是类加载机制</h4>\n<p>​\tjava代码编译后就会生成JVM能够识别的二进制字节流文件*.class文件，将class文件加载到内存，最终成为可以被JVM直接使用的Java类型，这个过程叫做JVM的类加载机制。</p>\n<h4>1.2 类加载过程</h4>\n<p>class文件中的“类”从加载到JVM内存中，到卸载出内存过程有七个生命周期阶段：</p>\n<img src="http://img.zouyh.top/article-img/20240917135023217.png" alt="image-20230203103002359" style="zoom: 80%;">',readingTime:{minutes:17.48,words:5244},title:"jvm类加载机制",icon:"file-lines",type:"article"}}],["/blog/Jvm/jvm%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7.html",{loader:()=>a.e(2703).then(a.bind(a,2730)),meta:{author:"Ms.Zyh",date:168912e7,category:["Jvm"],tag:["必看","Jvm"],sticky:!1,excerpt:'<h3>一，jvm基础调优工具</h3>\n<h4>1.1 jps</h4>\n<p>作用：</p>\n<p>​\tJVM Process Status Tool，显示虚拟机进程。</p>\n<p>用法：</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>jps [-qmlvV]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',readingTime:{minutes:10.95,words:3285},title:"jvm调优工具",icon:"file-lines",type:"article"}}],["/blog/MQ/RabbitMQ%E5%85%AD%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(9977).then(a.bind(a,1977)),meta:{author:"Ms.Zyh",date:16932672e5,category:["MQ"],tag:["基础","MQ"],sticky:!1,excerpt:"<h3>一，RabbitMQ六种工作模式</h3>\n<p>​\tRabbitMQ 是一个消息中间件：它接受并转发消息。你可以把它当做一个快递站点，当你要发送一个包裹时，你把你的包裹放到快递站，快递员最终会把你的快递送到收件人那里，按照这种逻辑 RabbitMQ 是一个快递站，一个快递员帮你传递快件。RabbitMQ 与快递站的主要区别在于，它不处理快件而是接收，存储和转发消息数据。</p>\n<p>核心概念：</p>\n<ul>\n<li><code>Broker</code>：接收和分发消息的应用，RabbitMQ Server 就是 Message Broker</li>\n<li><code>Virtual host</code>：出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似 于网络中的 namespace 概念。当多个不同的用户使用同一个RabbitMQ server提供的服务时可以划分出多个vhost，每个用户在自己的vhost创建 exchange／queue等</li>\n<li><code>Connection</code>：publisher／consumer 和 broker 之间的 TCP 连接</li>\n<li><code>Channel</code>：如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP Connection 的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程 序支持多线程，通常每个 thread 创建单独的 channel 进行通讯，AMQP method 包含了 channel id 帮助客 户端和 message broker 识别 channel，所以 channel 之间是完全隔离的。Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销</li>\n<li><code>Exchange</code>：message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发消息到 queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout (multicast)</li>\n<li><code>Queue</code>：消息最终被送到这里等待 consumer 取走</li>\n<li><code>Binding</code>：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key，Binding 信息被保 存到 exchange 中的查询表中，用于 message 的分发依据.</li>\n</ul>",readingTime:{minutes:20.7,words:6210},title:"RabbitMQ六种工作模式",icon:"file-lines",type:"article"}}],["/blog/MQ/RabbitMQ%E5%AE%89%E8%A3%85.html",{loader:()=>a.e(9740).then(a.bind(a,8034)),meta:{author:"Ms.Zyh",date:1692576e6,category:["MQ"],tag:["推荐","MQ"],sticky:!1,excerpt:'<h3>一，基础安装</h3>\n<h4>1.1 安装ErLang</h4>\n<p>由于RabbitMQ是基于Erlang语言开发的，所以在安装RabbitMQ之前需要先安装Erlang的运行环境。</p>\n<p>erlang与RabbitMQ版本的对应关系:<a href="https://www.rabbitmq.com/which-erlang.html" target="_blank" rel="noopener noreferrer">https://www.rabbitmq.com/which-erlang.html</a></p>\n<p>如：RabbitMQ3.6.10，建议的erlang最小版本是R16Bo3，最大版本19.3.x</p>',readingTime:{minutes:3.75,words:1124},title:"RabbitMQ安装",icon:"file-lines",type:"article"}}],["/blog/MQ/RabbitMQ%E6%95%B4%E5%90%88Spring%E6%88%96SpringBoot.html",{loader:()=>a.e(3416).then(a.bind(a,6422)),meta:{author:"Ms.Zyh",date:16946496e5,category:["MQ"],tag:["推荐","MQ"],sticky:!1,excerpt:'<h3>一，RabbitMQ整合Spring</h3>\n<h4>1.1 引入基础配置</h4>\n<p>第一步：引入Spring整合RabbitMQ的jar包：</p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.springframework.amqp&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;spring-rabbit&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2.1.8.RELEASE&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.74,words:1423},title:"RabbitMQ整合Spring或SpringBoot",icon:"file-lines",type:"article"}}],["/blog/MQ/RabbitMQ%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E4%BC%A0%E9%80%92.html",{loader:()=>a.e(9062).then(a.bind(a,8314)),meta:{author:"Ms.Zyh",date:1694304e6,category:["MQ"],tag:["必看","MQ"],sticky:!1,excerpt:'<h3>一，消息的可靠投递</h3>\n<h4>1.1 消息的发布和确认</h4>\n<blockquote>\n<p>消息的发布和确认目的是为了让生产者确认消息已经投递成功了。</p>\n</blockquote>\n<p>消息的投递流程如下：</p>\n<img src="http://img.zouyh.top/article-img/20240917135111361.png" alt="image-20230428163339372" style="zoom:80%;">\n<p>根据消息的投递流程RabbitMQ 为我们提供了两种方式用来控制消息的投递可靠性模式。</p>\n<ul>\n<li><code>confirm</code> 确认模式：消息从 producer 到 exchange投递结果，设置ConnectionFactory的<code>publisher-confirm-type="true"</code> 开启确认模式，使用<code>rabbitTemplate.setConfirmCallback</code>设置回调函数，在方法中判断ack，如果为true，则发送成功，如果为false，则发送失败。</li>\n<li><code>return</code> 退回模式：消息从 exchange 到 queue 投递结果，设置ConnectionFactory的<code>publisher-returns="true"</code> 开启退回模式,使用<code>rabbitTemplate.setReturnCallback</code>设置退回函数，如果同时设置了<code>rabbitTemplate.setMandatory(true)</code>参数，则会将消息退回给producer。</li>\n</ul>',readingTime:{minutes:15.33,words:4598},title:"RabbitMQ消息的可靠传递",icon:"file-lines",type:"article"}}],["/blog/MQ/RabbitMQ%E7%9A%84%E5%90%84%E7%A7%8D%E9%98%9F%E5%88%97.html",{loader:()=>a.e(4889).then(a.bind(a,600)),meta:{author:"Ms.Zyh",date:1693008e6,category:["MQ"],tag:["偏僻","MQ"],sticky:!1,excerpt:'<h3>一，RabbitMQ的各种队列</h3>\n<h4>1.1 死信队列</h4>\n<p>由于特定的原因导致 queue 中的某些消息无法被消费，就变成了死信，死信队列是为了优雅的处理着这些无法被消费者正常消费的信息，消息变成死信有如下三种情况：</p>\n<ul>\n<li>消息 TTL 过期</li>\n<li>队列达到最大长度(队列满了，无法再添加数据到 mq 中)</li>\n<li>消息被拒绝(basic.reject 或 basic.nack)并且 requeue=false.</li>\n</ul>\n<p>架构图：</p>\n<img src="http://img.zouyh.top/article-img/20240917135113366.png" alt="image-20230505164250532" style="zoom: 80%;">',readingTime:{minutes:16.75,words:5026},title:"RabbitMQ的各种队列",icon:"file-lines",type:"article"}}],["/blog/MQ/RocketMQ%E6%A0%B8%E5%BF%83%E6%93%8D%E4%BD%9C.html",{loader:()=>a.e(3422).then(a.bind(a,8231)),meta:{author:"Ms.Zyh",date:16952544e5,category:["MQ"],tag:["必看","MQ"],sticky:!1,excerpt:'<h3>一，基础API操作</h3>\n<p>新建mavn项目导入jar包：</p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.apache.rocketmq&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;rocketmq-client&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;4.7.1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:21.12,words:6337},title:"RocketMQ核心操作",icon:"file-lines",type:"article"}}],["/blog/MQ/%E5%AE%89%E8%A3%85RocketMQ.html",{loader:()=>a.e(5340).then(a.bind(a,3610)),meta:{author:"Ms.Zyh",date:1692144e6,category:["MQ"],tag:["基础","MQ"],sticky:!1,excerpt:'<h3>一，Docker安装RocketMQ</h3>\n<h4>1.1 创建namesrv服务</h4>\n<p>拉取镜像</p>\n<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rocketmqinc/rocketmq</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',readingTime:{minutes:2.45,words:734},title:"安装RocketMQ",icon:"file-lines",type:"article"}}],["/blog/Mybatis/Mybatis%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90.html",{loader:()=>a.e(2057).then(a.bind(a,9410)),meta:{author:"Ms.Zyh",date:16967232e5,category:["Mybatis"],tag:["必看","Mybatis"],sticky:!1,excerpt:'<p>导入的jar包</p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">&lt;!-- 阿里巴巴数据库链接池--&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;com.alibaba&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;druid&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1.2.23&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">&lt;!-- 整合mybatis --&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.mybatis.spring.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;mybatis-spring-boot-starter&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">&lt;!-- 整合jdbcTemplate --&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;spring-boot-starter-jdbc&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.62,words:787},title:"Mybatis动态数据源",icon:"file-lines",type:"article"}}],["/blog/Mybatis/mybatis%E6%8F%92%E4%BB%B6.html",{loader:()=>a.e(4004).then(a.bind(a,5089)),meta:{author:"Ms.Zyh",date:16961184e5,category:["Mybatis"],tag:["常用","Mybatis"],sticky:!1,excerpt:"<h3>一，mybatis的插件</h3>\n<p>​\tmybatis作为一个应用广泛的优秀的ORM开源框架，这个框架具有强大的灵活性，在四大组件(Executor、StatementHandler、ParameterHandler、ResultSetHandler)处提供了简单易用的插件扩展机制。Mybatis对持久层的操作就是借助于四大核心对象。MyBatis支持用插件对四大核心对象进行拦截，对mybatis来说插件就是拦截器，用来增强核心对象的功能，增强功能本质上是借助于底层的动态代理实现的，换句话说，MyBatis中的四大对象都是代理对象，<strong>插件是通过代理的方式增强，缓存是通过装饰的方式增强</strong>。</p>",readingTime:{minutes:12.26,words:3678},title:"mybatis插件",icon:"file-lines",type:"article"}}],["/blog/Mybatis/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90Mapp%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html",{loader:()=>a.e(2004).then(a.bind(a,4344)),meta:{author:"Ms.Zyh",date:16980192e5,category:["Mybatis"],tag:["常用","Mybatis"],sticky:!1,excerpt:'<h3>一，加载Mapper配置文件</h3>\n<h4>1.1mappers有四种配置方式：</h4>\n<p><strong>方式一：</strong></p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">mappers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;   </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  \t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">package</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"被代理对象（接口）的所在包"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/&gt; </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">mappers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:22.06,words:6617},title:"mybatis源码解析Mapp配置文件",icon:"file-lines",type:"article"}}],["/blog/Mybatis/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90sql%E6%89%A7%E8%A1%8C.html",{loader:()=>a.e(1161).then(a.bind(a,4803)),meta:{author:"Ms.Zyh",date:1698192e6,category:["Mybatis"],tag:["进阶","Mybatis"],sticky:!1,excerpt:'<h3>一，mybatis源码解析sql执行</h3>\n<p>mybatis的简单使用案例</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\tpublic</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\t\tString</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> resource</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "mybatis‐config.xml"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\t\tReader</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> reader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\t\ttry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t//将XML配置文件构建为Configuration配置类</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t\treader </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Resources</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getResourceAsReader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(resource);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t// 通过加载配置文件流构建一个SqlSessionFactory DefaultSqlSessionFactory</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\t\t\tSqlSessionFactory</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> sqlMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> SqlSessionFactoryBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(reader);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t// 数据源 执行器 DefaultSqlSession</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\t\t\tSqlSession</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> session</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> sqlMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">openSession</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\t\t\ttry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t\t// 执行查询 底层执行jdbc</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t\t//User user = (User)session.selectOne("com.tuling.mapper.selectById", 1);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\t\t\t\tUserMapper</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> mapper</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> session</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">UserMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\t\t\tSystem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">mapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\t\t\t\tUser</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> mapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">selectById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\t\t\tSystem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getUserName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t\t} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> \t\t\t\te</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \t\t\t}</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> \t\t\t\tsession</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">IOException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\t\te</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:18.89,words:5667},title:"mybatis源码解析sql执行",icon:"file-lines",type:"article"}}],["/blog/Mybatis/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html",{loader:()=>a.e(1899).then(a.bind(a,9446)),meta:{author:"Ms.Zyh",date:16975008e5,category:["Mybatis"],tag:["必看","Mybatis"],sticky:!1,excerpt:'<h3>一，mybatis源码解析核心配置文件</h3>\n<h4>1.1传统的jdbc</h4>\n<p>先看一看传统的jdbc，这样有助于学习mybatis：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">() throws SQLException {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\tConnection</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> conn</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\tPreparedStatement</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> pstmt</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\ttry</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t// 1.加载驱动</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\tClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"com.mysql.jdbc.Driver"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t// 2.创建连接</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">\t\tconn</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> DriverManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">\t\tgetConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"jdbc:mysql://localhost:3306/mybatis_example"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "root"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "123456"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t// SQL语句</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\t\tString</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> sql</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"select id,user_name,create_time from t_user where id=?"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t// 获得sql执行者</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">\t\tpstmt</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">conn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">prepareStatement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(sql);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\tpstmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t// 执行查询</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\tpstmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\t\tResultSet</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> rs</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> pstmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getResultSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\trs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\t\tUser</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> user </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\tuser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">rs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getLong</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"id"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\tuser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setUserName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">rs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"user_name"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\tuser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setCreateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">rs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getDate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"create_time"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\tSystem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">\t} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\te</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">\t}</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t// 关闭资源</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\t\ttry</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\t\t\tif</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(conn</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\t\t\tconn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">\t\t\t}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\t\t\tif</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(pstmt</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\t\t\tpstmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">\t\t\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">\t\t} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">SQLException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\t\te</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">\t\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:20.35,words:6105},title:"mybatis源码解析核心配置文件",icon:"file-lines",type:"article"}}],["/blog/Mybatis/mybatis%E7%BC%93%E5%AD%98.html",{loader:()=>a.e(1435).then(a.bind(a,8420)),meta:{author:"Ms.Zyh",date:16969824e5,category:["Mybatis"],tag:["必看","Mybatis"],sticky:!1,excerpt:"<h3>一，mybatis的缓存</h3>\n<h4>1.1一级缓存</h4>\n<h5>1.1.1介绍</h5>\n<ol>\n<li>\n<p>MyBatis的一级查询缓存（也叫作本地缓存）是基于<code>org.apache.ibatis.cache.impl.PerpetualCache</code> 类的HashMap本地缓存，其作用域是SqlSession，myBatis 默认一级查询缓存是开启状态，且不能关闭。</p>\n</li>\n<li>\n<p>在同一个SqlSession中两次执行相同的 sql查询语句，第一次执行完毕后，会将查询结果写入到缓存中，第二次会从缓存中直接获取数据，而不再到数据库中进行查询，这样就减少了数据库的访问，从而提高查询效率。</p>\n</li>\n<li>\n<p>基于PerpetualCache 的 HashMap本地缓存，其存储作用域为 Session，PerpetualCache 对象是在SqlSession中的Executor的localcache属性当中存放，当 Session flush 或 close 之后，该Session中的所有 Cache 就将清空。</p>\n</li>\n</ol>",readingTime:{minutes:21.6,words:6480},title:"mybatis缓存",icon:"file-lines",type:"article"}}],["/blog/Mybatis/spring%E6%95%B4%E5%90%88mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html",{loader:()=>a.e(3271).then(a.bind(a,3072)),meta:{author:"Ms.Zyh",date:1698624e6,category:["Mybatis"],tag:["常用","Mybatis"],sticky:!1,excerpt:'<h3>一，spring整合mybatis源码解析</h3>\n<p>mybatis单独使用的简单例子：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\tpublic</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\t\tString</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> resource</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "mybatis‐config.xml"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\t\tReader</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> reader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\t\ttry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t//将XML配置文件构建为Configuration配置类</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t\treader </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Resources</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getResourceAsReader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(resource);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t// 通过加载配置文件流构建一个SqlSessionFactory DefaultSqlSessionFactory</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\t\t\tSqlSessionFactory</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> sqlSessionFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> SqlSessionFactoryBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(reader);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t// 数据源 执行器 DefaultSqlSession</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\t\t\tSqlSession</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> session</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> sqlSessionFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">openSession</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\t\t\ttry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t\t// 执行查询 底层执行jdbc</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t\t\t\t//User user = (User)session.selectOne("com.tuling.mapper.selectById", 1);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\t\t\t\tUserMapper</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> mapper</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> session</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">UserMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\t\t\tSystem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">mapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">\t\t\t\tUser</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> mapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">selectById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\t\t\tSystem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getUserName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t\t} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> \t\t\t\te</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \t\t\t}</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> \t\t\t\tsession</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">IOException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">\t\t\te</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:9.51,words:2853},title:"spring整合mybatis源码解析",icon:"file-lines",type:"article"}}],["/blog/Netty/BIO%EF%BC%8CNIO%E5%92%8CAIO%E6%A8%A1%E5%9E%8B.html",{loader:()=>a.e(1827).then(a.bind(a,9151)),meta:{author:"Ms.Zyh",date:17026848e5,category:["Netty"],tag:["基础","Netty"],sticky:!1,excerpt:'<blockquote>\n<p>IO模型就是说用什么样的通道进行数据的发送和接收，Java共支持3种网络编程IO模式：BIO，NIO，AIO</p>\n</blockquote>\n<h3>一，BIO同步阻塞IO</h3>\n<p>代码示例：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> BIO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        ServerSocket</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> serverSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ServerSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">8000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"-----&gt;1，等待客户端连接&lt;-------"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            Socket</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> clientSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">  =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> serverSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">accept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 建立连接</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"-----&gt;2，客户端连接完成&lt;-------"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">            byte</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">bytes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">];</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"-----&gt;3，等待客服端发送数据&lt;-------"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> read</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> clientSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getInputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(bytes);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"-----&gt;4，读取客服端发送数据完成&lt;-------"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(read </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"-----&gt;5，接收到客户端的数据："</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(bytes, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, read));</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:11.75,words:3524},title:"BIO，NIO和AIO模型",icon:"file-lines",type:"article"}}],["/blog/Nginx/SSL%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85.html",{loader:()=>a.e(1527).then(a.bind(a,9723)),meta:{author:"Ms.Zyh",date:17039808e5,category:["Nginx"],tag:["必看","Nginx"],sticky:!1,excerpt:'<h3>一、申请SSL证书</h3>\n<blockquote>\n<p>腾讯官方免费SSL证书申请文档： <a href="https://cloud.tencent.com/document/product/400/6814" target="_blank" rel="noopener noreferrer">https://cloud.tencent.com/document/product/400/6814</a></p>\n</blockquote>\n<p>这个比较简单跟着流程走基本上没问题的，申请的时候需要注意一下字段：</p>\n<ul>\n<li>免费证书绑定域名：<a href="http://tencent.xn--comwww-595j9909ac7e.tencent.com" target="_blank" rel="noopener noreferrer">tencent.com只赠送www.tencent.com</a>，<a href="http://xn--ssl-628d60uoyb.tencent.com" target="_blank" rel="noopener noreferrer">不包含ssl.tencent.com</a>，需单独申请；如需绑定泛域名（例如 *.tencent.com）或者绑定IP，请购买付费证书。</li>\n<li>域名验证方式：手动DNS验证比较简单。</li>\n</ul>',readingTime:{minutes:1.33,words:400},title:"SSL证书安装",icon:"file-lines",type:"article"}}],["/blog/Nginx/%E4%B8%80%E7%AF%87%E6%90%9E%E5%AE%9Anignx.html",{loader:()=>a.e(7175).then(a.bind(a,5152)),meta:{author:"Ms.Zyh",date:17035488e5,category:["Nginx"],tag:["进阶","Nginx"],sticky:!1,excerpt:'<h3>一，nginx的配置文件</h3>\n<img src="http://img.zouyh.top/article-img/20240917135104336.png" alt="image-20230328151550458" style="zoom:80%;">\n<ul>\n<li>work_processes：是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是 会受到硬件、软件等设备的制约。</li>\n<li>events：主要影响Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。</li>\n<li>http ：是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</li>\n<li>server ： 每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。 最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或IP配置</li>\n<li>location 块：  一个 server 块可以配置多个 location 块， 这块的主要作用是基于 Nginx  服务器接收到的请求字符串。</li>\n</ul>',readingTime:{minutes:7.42,words:2227},title:"一篇搞定nignx",icon:"file-lines",type:"article"}}],["/blog/Redis/Redis%E4%B8%BB%E4%BB%8E%EF%BC%8C%E5%93%A8%E5%85%B5%E5%92%8C%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(6442).then(a.bind(a,4809)),meta:{author:"Ms.Zyh",date:17060544e5,category:["Redis"],tag:["推荐","Redis"],sticky:!1,excerpt:'<h3>一，Redis的主从复制</h3>\n<p>​\t主机数据更新后根据配置和策略， 自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主。这样做的好处是读写分离，性能扩展，容灾快速恢复。</p>\n<img src="http://img.zouyh.top/article-img/20240917135019207.png" alt="image-20230303101109512" style="zoom:80%;">\n<h4>1.1 环境搭建</h4>\n<p>如果你的redis在不同的服务器上，可以不看同一台服务器上启动多个redis的实现步骤：</p>',readingTime:{minutes:19.53,words:5860},title:"Redis主从，哨兵和集群模式",icon:"file-lines",type:"article"}}],["/blog/Redis/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%EF%BC%8C%E9%94%81%E5%92%8C%E4%BA%8B%E5%8A%A1.html",{loader:()=>a.e(3584).then(a.bind(a,2313)),meta:{author:"Ms.Zyh",date:17147808e5,category:["Redis"],tag:["进阶","Redis"],sticky:!1,excerpt:'<h3>一，发布和订阅</h3>\n<p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。Redis 客户端可以订阅任意数量的频道：</p>\n<figure><img src="http://img.zouyh.top/article-img/20240917135017202.png" alt="image-20230302150557562" tabindex="0" loading="lazy"><figcaption>image-20230302150557562</figcaption></figure>\n<h4>1.1 命令</h4>',readingTime:{minutes:8.2,words:2461},title:"Redis发布订阅，锁和事务",icon:"file-lines",type:"article"}}],["/blog/Redis/Redis%E6%8C%81%E4%B9%85%E5%8C%96.html",{loader:()=>a.e(6470).then(a.bind(a,3036)),meta:{author:"Ms.Zyh",date:17162496e5,category:["Redis"],tag:["进阶","Redis"],sticky:!1,excerpt:'<p>Redis 提供了2个不同形式的持久化方式，RDB和AOF。</p>\n<h3>一，RDB</h3>\n<blockquote>\n<p>RDB是指在指定的时间间隔内将内存中的数据集快照写入磁盘， 也就是快照的方式，它恢复时是将快照文件直接读到内存里。</p>\n</blockquote>\n<h4>1.1 配置</h4>\n<p>RDB持久化方式默认是开启的，下面介绍的是RDB持久化方式的其它配置，需要编辑<code>redis.conf</code>文件：</p>\n<p>①，配置时间间隔：</p>\n<div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 含义：在900秒内如果有1个key发生了改变就保存数据</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379">save 900 1</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:6.79,words:2037},title:"Redis持久化",icon:"file-lines",type:"article"}}],["/blog/Redis/Redis%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",{loader:()=>a.e(6988).then(a.bind(a,4897)),meta:{author:"Ms.Zyh",date:17127072e5,category:["Redis"],tag:["推荐","Redis"],sticky:!1,excerpt:"<p>数据类型和对应的数据结构：</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>底层结构</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td>SDS</td>\n</tr>\n<tr>\n<td>List</td>\n<td>双向列表，压缩列表</td>\n</tr>\n<tr>\n<td>Hash</td>\n<td>压缩列表，Hash表</td>\n</tr>\n<tr>\n<td>Set</td>\n<td>整数集合，Hash表</td>\n</tr>\n<tr>\n<td>SortedSet</td>\n<td>压缩列表，跳表</td>\n</tr>\n</tbody>\n</table>",readingTime:{minutes:23.88,words:7163},title:"Redis核心数据结构",icon:"file-lines",type:"article"}}],["/blog/Redis/Redis%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1.html",{loader:()=>a.e(6226).then(a.bind(a,6162)),meta:{author:"Ms.Zyh",date:17108928e5,category:["Redis"],tag:["进阶","Redis"],sticky:!1,excerpt:"<h3>一，缓存穿透</h3>\n<p><strong>问题描述</strong>：</p>\n<p>​\tkey对应的数据并不存在，每次针对此key的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p>\n<p><strong>解决方式</strong>：</p>\n<ul>\n<li>空值缓存：如果一个查询返回的数据为空，不管数据是否不存在，我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟。</li>\n<li>加锁：根据key从缓存中获取到的value为空时，先锁上，再去查DB将数据加载到缓存，若其它线程获取锁失败，则等待一段时间后重试，从而避免了大量请求直接打到DB。单机可以使用synchronized或ReentrantLock加锁，分布式环境需要加分布式锁，如Redis分布式锁</li>\n<li>采用布隆过滤器：对于恶意攻击，向服务器请求大量不存在的数据造成的缓存穿透，还可以用布隆过滤器先做一次过滤，对于不存在的数据布隆过滤器一般都能够过滤掉，不让请求再往后端发送。布隆过滤器判断某个值存在时，这个值可能不存在；但是当它说不存在时，那就肯定不存在。</li>\n</ul>",readingTime:{minutes:22.18,words:6654},title:"Redis缓存设计",icon:"file-lines",type:"article"}}],["/blog/Redis/redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html",{loader:()=>a.e(6633).then(a.bind(a,9815)),meta:{author:"Ms.Zyh",date:1707696e6,category:["Redis"],tag:["推荐","Redis"],sticky:!1,excerpt:'<p>jvm锁失效的情况：</p>\n<ul>\n<li>Bean是多例：注意单例的controller使用<code>@Autowired</code>注入<code>@Scope(value = "prototype")</code>标注的service，在创建时已经确定service，service不会改变了，spring官方可能对于加了@Scope的bean的本意，并不是每次访问都创建一个新的bean，而是每个使用到的地方创建一个新的bean。</li>\n<li>事务：原因是事务提交是在释放锁之后进行的，假设线程A将数据由2修改为1，由于释放锁，线程B是不可以读到线程2未提交的数据，所以读到的还是2。如果使用<code>read uncommitted</code>事务隔离级别的可以解决，但是我们是不允许mysql数据库使用<code>read uncommitted</code>事务隔离级别的。</li>\n<li>集群部署：不在JVM环境肯定会失效。随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</li>\n</ul>',readingTime:{minutes:23.57,words:7072},title:"redis实现分布式锁",icon:"file-lines",type:"article"}}],["/blog/Spring/Spring%E7%9A%84@Conditional%E6%B3%A8%E8%A7%A3.html",{loader:()=>a.e(8571).then(a.bind(a,8302)),meta:{author:"Ms.Zyh",date:17196192e5,category:["Spring"],tag:["偏僻","Spring"],sticky:!1,excerpt:'<h3>一、@Conditional</h3>\n<p><code>@Conditional</code>来源于spring-context包下的一个注解。Conditional中文是条件的意思，<code>@Conditional</code>注解它的作用是按照一定的条件进行判断，满足条件给容器注册bean:</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Target</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">({</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">ElementType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">TYPE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> ElementType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">METHOD</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">})</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Retention</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">RetentionPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">RUNTIME</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Documented</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B"> Conditional</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    Class</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> extends Condition</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">value</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.42,words:1027},title:"Spring的@Conditional注解",icon:"file-lines",type:"article"}}],["/blog/Spring/spring%E7%9A%84AOP%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html",{loader:()=>a.e(1018).then(a.bind(a,4740)),meta:{author:"Ms.Zyh",date:171504e7,category:["Spring"],tag:["必看","Spring"],sticky:!1,excerpt:"<h3>一，Spring AOP 配置使用</h3>\n<p>目前 Spring AOP 一共有三种配置方式，Spring 做到了很好地向下兼容，所以大家可以放心使用。</p>\n<ul>\n<li>Spring 1.2 基于接口的配置：最早的 Spring AOP 是完全基于几个接口的，想看源码的同学可以从这里起步。</li>\n<li>Spring 2.0 schema-based 配置：Spring 2.0 以后使用 XML 的方式来配置，使用 命名空间</li>\n<li>Spring 2.0 @AspectJ 配置：使用注解的方式来配置，这种方式感觉是最方便的，还有，这里虽然叫 做 @AspectJ，但是这个和 AspectJ 其实没啥关系。</li>\n</ul>",readingTime:{minutes:26.26,words:7877},title:"spring的AOP原理解析",icon:"file-lines",type:"article"}}],["/blog/Spring/spring%E7%9A%84IOC%E5%8A%A0%E8%BD%BD%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B.html",{loader:()=>a.e(8291).then(a.bind(a,3086)),meta:{author:"Ms.Zyh",date:1707696e6,category:["Spring"],tag:["基础","Spring"],sticky:!1,excerpt:'<p>加载spring的上下文：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] args) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 加载spring上下文</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    AnnotationConfigApplicationContext</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> context </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> AnnotationConfigApplicationContext</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">MainConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:30.13,words:9038},title:"spring的IOC加载整体流程",icon:"file-lines",type:"article"}}],["/blog/Spring/spring%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html",{loader:()=>a.e(5084).then(a.bind(a,4793)),meta:{author:"Ms.Zyh",date:17194464e5,category:["Spring"],tag:["基础","Spring"],sticky:!1,excerpt:'<h3>一，spring事务源码解析</h3>\n<h4>1.1开启事务</h4>\n<p>来分析注解驱动事务的原理，同样的我们从@EnableTransactionManagement开始：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Target</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">({</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">ElementType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">TYPE</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">})</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Retention</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">RetentionPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">RUNTIME</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Documented</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Import</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">({</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">TransactionManagementConfigurationSelector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">})</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B"> EnableTransactionManagement</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> proxyTargetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">default</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    AdviceMode</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> mode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">default</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> AdviceMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">PROXY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 使用代理的方式，绝大部分情况下，我们都不会使用AspectJ的静态代理的</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> order</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">default</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2147483647</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:24.13,words:7240},title:"spring的事务原理解析",icon:"file-lines",type:"article"}}],["/blog/Spring/spring%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.html",{loader:()=>a.e(7306).then(a.bind(a,2853)),meta:{author:"Ms.Zyh",date:17186688e5,category:["Spring"],tag:["进阶","Spring"],sticky:!1,excerpt:'<h3>一，循环依赖产生的原因</h3>\n<p>所谓的循环依赖是指，A 依赖 B，B 又依赖 A，它们之间形成了循环依赖。</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Component</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Autowired</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> B</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:11.93,words:3579},title:"spring的循环依赖",icon:"file-lines",type:"article"}}],["/blog/SpringBoot/SpringBoot%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC.html",{loader:()=>a.e(8252).then(a.bind(a,2967)),meta:{author:"Ms.Zyh",date:17168544e5,category:["SpringBoot"],tag:["进阶","SpringBoot"],sticky:!1,excerpt:'<h3>一，自定义事件</h3>\n<p>事件：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> CustomEvent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ApplicationEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> CustomEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Object</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(source);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> name;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> name;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:7.76,words:2327},title:"SpringBoot事件监听",icon:"file-lines",type:"article"}}],["/blog/SpringBoot/SpringBoot%E5%86%85%E5%B5%8Ctomcat%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html",{loader:()=>a.e(9123).then(a.bind(a,9217)),meta:{author:"Ms.Zyh",date:17178048e5,category:["SpringBoot"],tag:["进阶","SpringBoot"],sticky:!1,excerpt:'<h3>一，SpringBoot内嵌tomcat原理解析</h3>\n<h4>1.1 测试案例</h4>\n<p>在看内嵌tomcat的创建启动流程方法之前，先简单的介绍一下内嵌的tomcat，SpringBoot创建web应用时要引入<code>spring-boot-starter-web</code>，而<code>spring-boot-starter-web</code>这个依赖引入了tomcat依赖，SpringBoot自动装配的方式加载，使其它应用程序能够非常方便的将Tomcat嵌入到自身的应用来。</p>\n<img src="http://img.zouyh.top/article-img/20240917135059324.png" alt="image-20230315143608936" style="zoom:80%;">',readingTime:{minutes:7.88,words:2364},title:"SpringBoot内嵌tomcat原理解析",icon:"file-lines",type:"article"}}],["/blog/SpringBoot/SpringBoot%E5%A4%96%E7%BD%AEtomcat%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html",{loader:()=>a.e(2322).then(a.bind(a,4110)),meta:{author:"Ms.Zyh",date:17238528e5,category:["SpringBoot"],tag:["常用","SpringBoot"],sticky:!1,excerpt:'<h3>一，SpringBoot外置tomcat原理解析</h3>\n<h4>1.1 如何使用外置的tomcat</h4>\n<p>第一步：修改pom文件：</p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">&lt;!--打包方式  默认是jar--&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">packaging</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;war&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">packaging</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">&lt;!--让它不参与打包部署--&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;spring-boot-starter-tomcat&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;provided&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:5.89,words:1766},title:"SpringBoot外置tomcat原理解析",icon:"file-lines",type:"article"}}],["/blog/SpringBoot/SpringBoot%E6%B3%A8%E5%86%8CBean%E7%9A%846%E7%A7%8D%E6%96%B9%E5%BC%8F.html",{loader:()=>a.e(4705).then(a.bind(a,6624)),meta:{author:"Ms.Zyh",date:17273088e5,category:["SpringBoot"],tag:["干货","SpringBoot"],sticky:!1,excerpt:'<h3>一、常用注册Bean的6种方式</h3>\n<h4>1.1 @Component及其派生注解</h4>\n<p>实现方式:在类上添加<code>@Component</code>、<code>@Service</code>、<code>@Controller</code>、<code>@Repository</code>等注解，配合@ComponentScan扫描包路径。</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Service</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 业务逻辑</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.34,words:1001},title:"SpringBoot注册Bean的6种方式",icon:"file-lines",type:"article"}}],["/blog/SpringBoot/SpringBoot%E7%9A%84run%E6%96%B9%E6%B3%95.html",{loader:()=>a.e(3987).then(a.bind(a,6377)),meta:{author:"Ms.Zyh",date:17210016e5,category:["SpringBoot"],tag:["推荐","SpringBoot"],sticky:!1,excerpt:'<h3>一，如何创建IOC容器</h3>\n<h4>1.1 有web.xml如何创建spring上线文的</h4>\n<p>在正常的SSM项目中，我们会在web.xml配置如下内容，通过<code>ContextLoaderListener</code>监听加载启动spring容器的。</p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">&lt;!-- 加载spring容器 --&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">context-param</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">param-name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;contextConfigLocation&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">param-name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">param-value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;classpath:ApplicationContext.xml&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">param-value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">context-param</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">listener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">listener-class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.springframework.web.context.ContextLoaderListener&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">listener-class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">listener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:21.49,words:6448},title:"SpringBoot的run方法",icon:"file-lines",type:"article"}}],["/blog/SpringBoot/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86.html",{loader:()=>a.e(3501).then(a.bind(a,7545)),meta:{author:"Ms.Zyh",date:17270496e5,category:["SpringBoot"],tag:["基础","SpringBoot"],sticky:!1,excerpt:'<h3>一，SpringBoot自动装配原理</h3>\n<img src="http://img.zouyh.top/article-img/20240917135055312.png" alt="image-20230313155332664" style="zoom: 67%;">\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">SpringBootApplication</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Springbootday01Application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Springbootday01Application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, args);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">   }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:12.31,words:3694},title:"SpringBoot自动装配原理",icon:"file-lines",type:"article"}}],["/blog/SpringBoot/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89starter.html",{loader:()=>a.e(1678).then(a.bind(a,5640)),meta:{author:"Ms.Zyh",date:17093376e5,category:["SpringBoot"],tag:["常用","SpringBoot"],sticky:!1,excerpt:"<p>在一个空Maven项目中，新增<code>xxxx-spring-boot-starter</code>和<code>xxxx-spring-boot-autoconfigure</code>两个模块，<code>xxxx</code>是你这个starter是做什么的，模块<code>xxxx-spring-boot-starter</code>主要是作依赖管理，外界使用我们自定义的starter只需要导入我们<code>xxxx-spring-boot-starter</code>模块即可。自定义的<code>xxxx-spring-boot-autoconfigure</code>模块，是我们编写自动注入的地方，需要引入了Spring的<code>spring-boot-starter</code>模块，这个模块在创建SpringBoot项目的时候会自动引入的，也是必须引入的，通过加载META-INF文件夹下的spring.factories文件完成自动配置的功能以及开箱即用的效果。</p>",readingTime:{minutes:2.63,words:789},title:"SpringBoot自定义starter",icon:"file-lines",type:"article"}}],["/blog/SpringCloud/@SentinelResource%E6%B3%A8%E8%A7%A3.html",{loader:()=>a.e(7015).then(a.bind(a,6720)),meta:{author:"Ms.Zyh",date:17364672e5,category:["SpringCloud"],tag:["偏僻","SpringCloud"],sticky:!1,excerpt:"<p>@RequestMapping和@SentinelResource的对比：Sentinel 默认将&nbsp;@RequestMapping&nbsp;的路径作为资源名，@RequestMapping只能做一些简单限流，只能Controller 方法使用；而@SentinelResource的value作为资源名@SentinelResource复杂场景Service 层或任意方法。注意如果两个@RequestMapping的路径和@SentinelResource值同时设置并且一样，在控制台添加的限流或者熔断规则会优先使用@RequestMapping的路径定义的资源，@SentinelResource注解配置会失效，所以建议使用@SentinelResource声明资源的时候尽量保证和@RequestMapping的路径不一样。</p>",readingTime:{minutes:2.27,words:680},title:"@SentinelResource注解",icon:"file-lines",type:"article"}}],["/blog/SpringCloud/OpenFeign.html",{loader:()=>a.e(9075).then(a.bind(a,1973)),meta:{author:"Ms.Zyh",date:17440704e5,category:["SpringCloud"],tag:["常用","SpringCloud"],sticky:!1,excerpt:'<p>Feigen由 Netflix 开发并开源，最初作为 Netflix OSS 的一部分，用于简化 HTTP API 的客户端调用，Netflix Feign 已停止维护，最终版本为&nbsp;9.x。OpenFeigen由Spring Cloud 团队基于 Feign 开发的增强版，整合到 Spring Cloud 生态中。</p>\n<h3>一，Spring Cloud整合openFeign</h3>\n<h4>第一步：添加依赖</h4>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.springframework.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;spring-cloud-starter-openfeign&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;   </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">spring-cloud.version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2021.0.7&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">spring-cloud.version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;  </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependencyManagement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.springframework.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;spring-cloud-dependencies&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;${spring-cloud.version}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;pom&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;import&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependencyManagement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.66,words:1097},title:"OpenFeign",icon:"file-lines",type:"article"}}],["/blog/SpringCloud/Sentinel%E7%86%94%E6%96%AD.html",{loader:()=>a.e(2095).then(a.bind(a,2924)),meta:{author:"Ms.Zyh",date:17534016e5,category:["SpringCloud"],tag:["偏僻","SpringCloud"],sticky:!1,excerpt:'<p>熔断和限流的对比：</p>\n<ul>\n<li>设计目标：熔断的核心是快速失败，防止故障扩散；限流的核心是控制流量速率，防止系统因突发流量过载。</li>\n<li>触发方式：熔断是异常比例，异常数；限流是请求速率，并发量</li>\n<li>恢复方式：熔断是半开状态主动探测；限流是时间窗口重置后自动恢复</li>\n</ul>\n<h3>一，慢调用</h3>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">RestController</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/sentinel"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> SentinelController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> index </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> abnormal </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/slowCount"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> slowCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        index++;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // 访问abnormal次出现1次异常</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(index </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> abnormal </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">600</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "slowCount"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:1.45,words:434},title:"Sentinel熔断",icon:"file-lines",type:"article"}}],["/blog/SpringCloud/Sentinel%E9%99%90%E6%B5%81.html",{loader:()=>a.e(991).then(a.bind(a,7048)),meta:{author:"Ms.Zyh",date:1757808e6,category:["SpringCloud"],tag:["偏僻","SpringCloud"],sticky:!1,excerpt:'<h3>一，流控限流</h3>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">配置项</th>\n<th style="text-align:left">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left">资源名:resource</td>\n<td style="text-align:left">限流规则的作用对象,最常用的资源是我们代码中的 Java 方法,一段代码，或者一个接口</td>\n</tr>\n<tr>\n<td style="text-align:left">针对来源: limitApp</td>\n<td style="text-align:left">流控针对的调用来源，填写微服务名，default代表不区分调用来源</td>\n</tr>\n<tr>\n<td style="text-align:left">阀值类型: grade</td>\n<td style="text-align:left">- QPS:每秒请求数，当前调用该api的QPS到达阈值的时候进行限流 - 线程数: 当调用该api的并发线程数到达阈值的时候，进行限流</td>\n</tr>\n<tr>\n<td style="text-align:left">单机/均摊/总体阀值:count</td>\n<td style="text-align:left">阀值类型是QPS表示每秒的请求数；阀值类型是线程数表示并发线程数</td>\n</tr>\n<tr>\n<td style="text-align:left">流控模式:strategy</td>\n<td style="text-align:left">直接; 关联; 链路</td>\n</tr>\n<tr>\n<td style="text-align:left">流控效果: controlBehavior</td>\n<td style="text-align:left">直接拒绝; 排队等待; 慢启动模式</td>\n</tr>\n<tr>\n<td style="text-align:left">注意：同一个资源可以设置多个流控规则，我们可以通过代码定义流量控制规则也可以通过在sentinel控制台进行配置，一般我们都是使用控制台进行配置，下面是一个代码配置的方式：</td>\n<td style="text-align:left"></td>\n</tr>\n</tbody>\n</table>',readingTime:{minutes:7.88,words:2365},title:"Sentinel限流",icon:"file-lines",type:"article"}}],["/blog/SpringCloud/SpringCloud%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA.html",{loader:()=>a.e(7702).then(a.bind(a,4937)),meta:{author:"Ms.Zyh",date:17559936e5,category:["SpringCloud"],tag:["进阶","SpringCloud"],sticky:!1,excerpt:'<h3>一，版本介绍</h3>\n<p>springboot和springcloud对应版本：<a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener noreferrer">https://spring.io/projects/spring-cloud</a><br>\n<img src="http://img.zouyh.top/article-img/202501261836118.png" alt="image.png" loading="lazy"><br>\nspringcloud和SpringCloudAlibaba对应版本：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明</a><br>\n<img src="http://img.zouyh.top/article-img/202501261843412.png" alt="image.png" loading="lazy"></p>',readingTime:{minutes:2.6,words:780},title:"SpringCloud项目创建",icon:"file-lines",type:"article"}}],["/blog/SpringCloud/nacos%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html",{loader:()=>a.e(765).then(a.bind(a,4397)),meta:{author:"Ms.Zyh",date:17423424e5,category:["SpringCloud"],tag:["推荐","SpringCloud"],sticky:!1,excerpt:'<blockquote>\n<p>前言：nacos的服务端window/linux安装和启动教程请看另一篇文章</p>\n</blockquote>\n<h4>一, nacos服务治理</h4>\n<figure><img src="http://img.zouyh.top/article-img/202501261527005.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>\n<h5>1.1 引入jar</h5>\n<div class="language-pom line-numbers-mode" data-highlighter="shiki" data-ext="pom" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-pom"><span class="line"><span>&lt;dependency&gt;</span></span>\n<span class="line"><span>    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span>\n<span class="line"><span>    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span></span>\n<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.17,words:650},title:"nacos快速开始",icon:"file-lines",type:"article"}}],["/blog/SpringCloud/nacos%E7%9A%84%E5%AE%89%E8%A3%85.html",{loader:()=>a.e(7402).then(a.bind(a,424)),meta:{author:"Ms.Zyh",date:1755935409e3,category:["SpringCloud"],tag:["必看","SpringCloud"],sticky:!1,excerpt:'<h3>一，单机安装</h3>\n<p>1，下载安装包<br>\n安装包下载链接：<a href="https://github.com/alibaba/nacos/releases%EF%BC%8C%E5%A6%82%E6%9E%9C%E8%A7%89%E5%BE%97github%E4%B8%8B%E8%BD%BD%E5%A4%AA%E6%85%A2%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E6%88%91%E4%B8%8B%E8%BD%BD%E5%A5%BD%E7%9A%84%EF%BC%8C%E9%80%9A%E8%BF%87%E5%A4%A9%E7%BF%BC%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%EF%BC%9Ahttps://cloud.189.cn/web/share?code=nQ32uejeIFbm%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9Ad1r7%EF%BC%89%EF%BC%8Clinux%E7%B3%BB%E7%BB%9F%E9%80%89%E6%8B%A9%60.tar.gz%60%EF%BC%8C" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/nacos/releases，如果觉得github下载太慢，也可以使用我下载好的，通过天翼网盘下载链接：https://cloud.189.cn/web/share?code=nQ32uejeIFbm（访问码：d1r7），linux系统选择`.tar.gz`，</a> windows系统选择<code>zip</code><br>\n如果是linux系统可以通过如下命令，解压下载的安装包：</p>',readingTime:{minutes:3.54,words:1061},title:"nacos的安装",icon:"file-lines",type:"article"}}],["/blog/SpringCloud/nacos%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86.html",{loader:()=>a.e(1079).then(a.bind(a,4586)),meta:{author:"Ms.Zyh",date:17502912e5,category:["SpringCloud"],tag:["干货","SpringCloud"],sticky:!1,excerpt:'<h3>一，nacos服务治理</h3>\n<h4>1.1 Nacos Server 的注册表结构</h4>\n<blockquote>\n<p>注册表结构是nacos v1.X版本，是在nacos的源码中，不是在spring-cloud-starter-alibaba-nacos-discovery中，大家不用在问为什么找不到源码了</p>\n</blockquote>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> com.alibaba.nacos.naming.core</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Component</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ServiceManager</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> RecordListener</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Service</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     * Map(namespace, Map(group::serviceName, Service)).</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Service</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> serviceMap </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ConcurrentHashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 省略部分代码………</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:13.76,words:4128},title:"nacos的服务治理",icon:"file-lines",type:"article"}}],["/blog/SpringCloud/sentinel%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html",{loader:()=>a.e(4319).then(a.bind(a,9034)),meta:{author:"Ms.Zyh",date:17420832e5,category:["SpringCloud"],tag:["基础","SpringCloud"],sticky:!1,excerpt:'<h4>一,服务端启动</h4>\n<p>下载sentinel的jar：</p>\n<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> sentinel-dashboard-1.8.8.jar</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',readingTime:{minutes:1.59,words:478},title:"sentinel快速开始",icon:"file-lines",type:"article"}}],["/blog/SpringMvc/SpringMvc%E4%BD%BF%E7%94%A8Validation%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C.html",{loader:()=>a.e(3667).then(a.bind(a,78)),meta:{author:"Ms.Zyh",date:1683072e6,category:["SpringMvc"],tag:["必看","SpringMvc"],sticky:!1,excerpt:'<p>在日常开发中为了防止非法参数对业务造成影响，不止前端会对参数进行校验，我们后端也要形成一个规范，需要对接口的参数进行校验！</p>\n<h3>一、参数校验</h3>\n<p>如果spring boot 版本低于2.3，不需要添加&nbsp;<code>spring-boot-starter-validation&nbsp;</code>依赖，spring-boot-starter-web会自动依赖<code>spring-boot-starter-validation&nbsp;</code>：</p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;spring-boot-starter-validation&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:6.19,words:1856},title:"SpringMvc使用Validation参数校验",icon:"file-lines",type:"article"}}],["/blog/SpringMvc/springMvc%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html",{loader:()=>a.e(5812).then(a.bind(a,3665)),meta:{author:"Ms.Zyh",date:16838496e5,category:["SpringMvc"],tag:["干货","SpringMvc"],sticky:!1,excerpt:'<h3>一，SpringMvc源码解析</h3>\n<h4>1.1核心流程图解</h4>\n<figure><img src="http://img.zouyh.top/article-img/20240917134951135.png" alt="image-20221221160008734" tabindex="0" loading="lazy"><figcaption>image-20221221160008734</figcaption></figure>\n<p>1、用户发送请求至前端控制器DispatcherServlet</p>\n<p>2、DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p>',readingTime:{minutes:15.05,words:4514},title:"springMvc源码解析",icon:"file-lines",type:"article"}}],["/blog/mysql/MySQL%E7%9A%84MVCC.html",{loader:()=>a.e(7587).then(a.bind(a,7779)),meta:{author:"Ms.Zyh",date:17013888e5,category:["mysql"],tag:["偏僻","mysql"],sticky:!1,excerpt:"<h3>一，MySQL的MVCC</h3>\n<h4>1.1介绍</h4>\n<p>在介绍MVCC之前首先了解一下事务并发问题：</p>\n<p>问题产生原因：同时运行多个事务，当这些事务访问<strong>数据库中相同数据</strong>时，会产生各种<strong>并发问题</strong>；</p>\n<ul>\n<li>读-读问题：读读并发不存在问题。</li>\n<li>写-写问题：写写会产生脏写问题，两个事务没提交的状况下，都修改统一条数据，结果一个事务回滚了，把另外一个事务修改的值也撤销了，所谓脏写就是两个事务没提交状态下修改同一个值。</li>\n<li>读-写/写-读：写读或读写会造成脏读、幻读、不可重复读的问题。\n<ul>\n<li>脏读：事务B读到事务A修改后并未提交的数据；</li>\n<li>不可重复读：事务A多次查询得到的结果不一致</li>\n<li>幻读：A读取表，B插入一条数据，A再次读，得到的结果集条数不同</li>\n</ul>\n</li>\n</ul>",readingTime:{minutes:14.24,words:4271},title:"MySQL的MVCC",icon:"file-lines",type:"article"}}],["/blog/mysql/MySQL%E7%9A%84sql%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.html",{loader:()=>a.e(5019).then(a.bind(a,7437)),meta:{author:"Ms.Zyh",date:17019936e5,category:["mysql"],tag:["进阶","mysql"],sticky:!1,excerpt:'<h3>一，MySQL的sql执行流程</h3>\n<p>MySQL 可以分为 Server 层和存储引擎层两部分。</p>\n<img src="http://img.zouyh.top/article-img/20240917135009178.jpg" alt="mysql" style="zoom: 50%;">\n<p>server层的核心组件：</p>\n<ol>\n<li>连接器：负责管理连接和权限校验。</li>\n<li>缓存：每次SQL查询时会先去缓存里面查询，缓存里面key为SQL，value为结果集。</li>\n<li>分析器：对SQL语句进行语法分析和词法分析，方便后续执行。</li>\n<li>优化器：选择最优的索引和语句执行计划生成。</li>\n<li>执行器：使用引擎接口，返回查询对应的结果集。</li>\n</ol>',readingTime:{minutes:10.46,words:3139},title:"MySQL的sql执行流程",icon:"file-lines",type:"article"}}],["/blog/mysql/mysql%E7%9A%84Buffer%20Pool.html",{loader:()=>a.e(3024).then(a.bind(a,9768)),meta:{author:"Ms.Zyh",date:17010432e5,category:["mysql"],tag:["推荐","mysql"],sticky:!1,excerpt:'<h3>一，Buffer Pool</h3>\n<p>​\tBuffer Pool是MYSQL数据库中的一个重要的内存组件，介于外部系统和存储引擎之间的一个缓存区，针数据库的增删改查这些操作都是针对这个内存数据结构中的缓存数据执行的,在操作数据之前，都会将数据从磁盘加载到Buffer Pool中，操作完成之后异步刷盘、写undo log、binlog、redolog等一些列操作，避免每次访问都进行磁盘IO影响性能。<br>\n<img src="http://img.zouyh.top/article-img/202412281615560.png" alt="image.png" loading="lazy"></p>',readingTime:{minutes:8.59,words:2577},title:"mysql的Buffer Pool",icon:"file-lines",type:"article"}}],["/blog/mysql/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1.html",{loader:()=>a.e(8870).then(a.bind(a,247)),meta:{author:"Ms.Zyh",date:16992288e5,category:["mysql"],tag:["干货","mysql"],sticky:!1,excerpt:"<h3>一，事务</h3>\n<h4>1.1事务介绍</h4>\n<p>​\t1，事务就是由单独单元的一个或多个sql语句组成，在这个单元中，每个sql语句都是相互依赖的。而整个单独单元是作为一个不可分割的整体存在，如果单元中某条sql语句一旦执行失败或者产生错误，那么整个单元将会回滚。所有受到影响的数据将返回到事务开始之前的状态，但是如果单元中的所有sql语句都执行成功的话，那么该事务也就被顺利执行。</p>\n<p>​\t2，往通俗的讲就是，事务就是一个不可分割整体，里面的内容要么都执行成功，要么都不成功。不可能存在部分执行成功而部分执行不成功的情况。</p>\n<p>​\t3，的数据都是通过各种不同技术的存储引擎来引导存储的，不同的存储引擎，都有各自的特点。在mysql中，常见的存储引擎有innodb、myisam，memory等。其中innodb支持事务(transaction)，而myisam，memory等不支持事务。</p>",readingTime:{minutes:6.87,words:2061},title:"mysql的事务",icon:"file-lines",type:"article"}}],["/blog/mysql/mysql%E7%9A%84%E7%B4%A2%E5%BC%95.html",{loader:()=>a.e(947).then(a.bind(a,2475)),meta:{author:"Ms.Zyh",date:17000928e5,category:["mysql"],tag:["干货","mysql"],sticky:!1,excerpt:"<h3>一，索引介绍</h3>\n<h4>1.1 什么是索引</h4>\n<p>​\t索引其实是一种<strong>数据结构</strong>，能够帮助我们快速的检索数据库中的数据.</p>\n<h4>1.2 索引类型</h4>\n<h5>1.2.1按数据结构分类</h5>\n<blockquote>\n<p>按数据结构分类：BTree索引，Hash索引，full-index全文索引.</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B+tree索引</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Hash索引</td>\n<td>√</td>\n<td>√</td>\n<td>×</td>\n</tr>\n<tr>\n<td>Full-text索引</td>\n<td>√（MySQL5.6.4）</td>\n<td>√</td>\n<td>×</td>\n</tr>\n</tbody>\n</table>",readingTime:{minutes:15.8,words:4741},title:"mysql的索引",icon:"file-lines",type:"article"}}],["/blog/mysql/mysql%E7%9A%84%E9%94%81.html",{loader:()=>a.e(1847).then(a.bind(a,7129)),meta:{author:"Ms.Zyh",date:17006112e5,category:["mysql"],tag:["偏僻","mysql"],sticky:!1,excerpt:"<h3>一，锁的分类</h3>\n<p>①，以锁粒度的维度划分：</p>\n<ul>\n<li>表锁：\n<ul>\n<li>全局锁：加上全局锁之后，整个数据库只能允许读，不允许做任何写操作。</li>\n<li>元数据锁 / <code>MDL</code>锁：基于表的元数据加锁，加锁后整张表不允许其他事务操作。</li>\n<li>意向锁：这个是<code>InnoDB</code>中为了支持多粒度的锁，为了兼容行锁、表锁而设计的。</li>\n<li>自增锁 / <code>AUTO-INC</code>锁：这个是为了提升自增ID的并发插入性能而设计的。</li>\n</ul>\n</li>\n<li>行锁：\n<ul>\n<li>记录锁 / <code>Record</code>锁：也就是行锁，一条记录和一行数据是同一个意思。</li>\n<li>间隙锁 / <code>Gap</code>锁：<code>InnoDB</code>中解决幻读问题的一种锁机制。</li>\n<li>临键锁 / <code>Next-Key</code>锁：间隙锁的升级版，同时具备记录锁+间隙锁的功能。</li>\n<li>插入意向锁</li>\n</ul>\n</li>\n<li>页面锁</li>\n</ul>",readingTime:{minutes:20.5,words:6149},title:"mysql的锁",icon:"file-lines",type:"article"}}],["/blog/mysql/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8MySQL%E6%95%B0%E6%8D%AE%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E5%88%B0%E4%B8%83%E7%89%9B%E4%BA%91.html",{loader:()=>a.e(1604).then(a.bind(a,1199)),meta:{author:"Ms.Zyh",date:16988832e5,category:["mysql"],tag:["常用","mysql"],sticky:!1,excerpt:'<p>对于我这种小网站，虽然没几个人访问，但是我担心呀！我害怕呀！hhhh，所以为了我这个小破站能够正常的运行下去，我决定备份一下数据。</p>\n<blockquote>\n<p>目标：将mysql数据定时备份到七牛云<br>\n￼</p>\n</blockquote>\n<h3>一，下载安装qshell工具</h3>\n<p>qshell 是基于七牛 API 服务的命令行工具，介绍和下载网址：<a href="https://developer.qiniu.com/kodo/1302/qshell" target="_blank" rel="noopener noreferrer">https://developer.qiniu.com/kodo/1302/qshell</a></p>',readingTime:{minutes:1.27,words:380},title:"云服务器MySQL数据自动备份到七牛云",icon:"file-lines",type:"article"}}],["/blog/zookeeper/zookeeper%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html",{loader:()=>a.e(1421).then(a.bind(a,3621)),meta:{author:"Ms.Zyh",date:16668288e5,category:["zookeeper"],tag:["必看","zookeeper"],sticky:!1,excerpt:'<h3>一，zookeeper实现分布式锁</h3>\n<p>引入jar：</p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.apache.zookeeper&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;zookeeper&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;3.5.7&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:11.71,words:3514},title:"zookeeper实现分布式锁",icon:"file-lines",type:"article"}}],["/blog/zookeeper/zookeeper%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",{loader:()=>a.e(5417).then(a.bind(a,5095)),meta:{author:"Ms.Zyh",date:16663104e5,category:["zookeeper"],tag:["必看","zookeeper"],sticky:!1,excerpt:'<h3>一，常见命令</h3>\n<h4>1.1 ls命令</h4>\n<p>ls命令：查看目录下的节点信息，</p>\n<p>命令格式：</p>\n<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [-s] [-w] [-R] path</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',readingTime:{minutes:9.19,words:2756},title:"zookeeper常用命令",icon:"file-lines",type:"article"}}],["/blog/zookeeper/zookeeper%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html",{loader:()=>a.e(7824).then(a.bind(a,9795)),meta:{author:"Ms.Zyh",date:16669152e5,category:["zookeeper"],tag:["干货","zookeeper"],sticky:!1,excerpt:'<h3>一，zookeeper源码解析</h3>\n<blockquote>\n<p>源码流程图：<a href="https://www.processon.com/embed/640ec2155476aa23907484f0" target="_blank" rel="noopener noreferrer">https://www.processon.com/embed/640ec2155476aa23907484f0</a></p>\n</blockquote>\n<h4>1.1 程序入口</h4>\n<p>Zookeeper 服务的启动命令是 <code>zkServer.sh start</code></p>',readingTime:{minutes:31.41,words:9424},title:"zookeeper源码解析",icon:"file-lines",type:"article"}}],["/blog/zookeeper/%E5%AE%89%E8%A3%85zookeeper.html",{loader:()=>a.e(7318).then(a.bind(a,7687)),meta:{author:"Ms.Zyh",date:16647552e5,category:["zookeeper"],tag:["进阶","zookeeper"],sticky:!1,excerpt:'<h3>一，单机安装</h3>\n<p>①，查看本地镜像和检索拉取Zookeeper 镜像</p>\n<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看本地镜像</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> images</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 检索ZooKeeper 镜像</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> search</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> zookeeper</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 拉取ZooKeeper镜像最新版本</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> zookeeper:latest</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 我使用的版本</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> zookeeper:3.5.7</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.23,words:670},title:"安装zookeeper",icon:"file-lines",type:"article"}}],["/blog/zookeeper/%E6%89%8B%E5%86%99zookeeper%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.html",{loader:()=>a.e(2760).then(a.bind(a,741)),meta:{author:"Ms.Zyh",date:16658784e5,category:["zookeeper"],tag:["偏僻","zookeeper"],sticky:!1,excerpt:'<h3>一，手写zookeeper注册中心</h3>\n<h4>1.1 服务注册</h4>\n<p>​\tspringboot项目启动时，自定义监听器ApplicationListener去监听web服务启动事件，触发事件回调方法，在回调方法中，在zookeeper指定节点下创建临时节点，临时节点的值保存当前项目启动的 ip + port。</p>\n<h5>1.1.1 pom.xml</h5>\n<p>引入zookeeper操作jar：</p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.apache.zookeeper&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;zookeeper&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;3.5.7&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.apache.curator&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;curator-recipes&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;4.3.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">exclusions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">exclusion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.apache.zookeeper&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;zookeeper&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">exclusion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">exclusions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:5.25,words:1576},title:"手写zookeeper注册中心",icon:"file-lines",type:"article"}}],["/blog/zookeeper/%E6%89%8B%E5%86%99zookeeper%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83.html",{loader:()=>a.e(1935).then(a.bind(a,9994)),meta:{author:"Ms.Zyh",date:16650144e5,category:["zookeeper"],tag:["基础","zookeeper"],sticky:!1,excerpt:'<h3>一，手写zookeeper配置中心</h3>\n<h4>1.1 实现</h4>\n<p>pom.xml引入curator去操作zookeeper：</p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.apache.zookeeper&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;zookeeper&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;3.5.7&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.apache.curator&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;curator-recipes&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;4.3.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">exclusions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">exclusion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.apache.zookeeper&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;zookeeper&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">exclusion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">exclusions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:13.78,words:4134},title:"手写zookeeper配置中心",icon:"file-lines",type:"article"}}],["/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/CAS%E5%92%8CAtomic.html",{loader:()=>a.e(944).then(a.bind(a,7701)),meta:{author:"Ms.Zyh",date:16534368e5,category:["多线程"],tag:["干货","多线程"],sticky:!1,excerpt:'<h3>一，CAS</h3>\n<h4>1.1 介绍</h4>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">){</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 1，预期值X</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 2，要修改的新值Y</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">CompareAndSet</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Y)){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:10.89,words:3268},title:"CAS和Atomic",icon:"file-lines",type:"article"}}],["/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/ConcurrentHashMap%E5%88%86%E6%AE%B5%E9%94%81.html",{loader:()=>a.e(5193).then(a.bind(a,273)),meta:{author:"Ms.Zyh",date:16537824e5,category:["多线程"],tag:["推荐","多线程"],sticky:!1,excerpt:"<h3>一，ConcurrentHashMap分段锁</h3>\n<p>​\tHashTable容器在竞争激烈的并发环境下表现出效率低下的原因，是因为所有访问HashTable的线程都必须竞争同一把锁，那假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。有些方法需要跨段，比如size()和containsValue()，它们可能需要锁定整个表而而不仅仅是某个段，这需要按顺序锁定所有段，操作完毕后，又按顺序释放所有段的锁。这里“按顺序”是很重要的，否则极有可能出现死锁，在ConcurrentHashMap内部，段数组是final的，并且其成员变量实际上也是final的，但是，仅仅是将数组声明为final的并不保证数组成员也是final的，这需要实现上的保证。这可以确保不会出现死锁，因为获得锁的顺序是固定的。JDK1.8的实现已经抛弃了Segment分段锁机制，利用CAS+Synchronized来保证并发更新的安全。</p>",readingTime:{minutes:4.49,words:1346},title:"ConcurrentHashMap分段锁",icon:"file-lines",type:"article"}}],["/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/CountDownLatch%E5%92%8CCyclicBarrier.html",{loader:()=>a.e(8223).then(a.bind(a,2979)),meta:{author:"Ms.Zyh",date:165456e7,category:["多线程"],tag:["干货","多线程"],sticky:!1,excerpt:'<h3>一，CountDownLatch</h3>\n<p>​\t作用：CountDownLatch类能够使一个线程等待其他线程完成各自的工作后再执行。</p>\n<p>​\t使用场景：Zookeeper分布式锁，Jmeter模拟高并发等。</p>\n<p>​\t工作原理：CountDownLatch是通过一个计数器来实现的，计数器的初始值为线程的数量。每当一个线程完成了自己的任务后，通过调用``countDown();`方法使计数器的值就会减1，当计数器值到达0时，它表示所有的线程已经完成了任务，然后在闭锁上等待的线程就可以恢复执行任务。</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> CountDownLatchTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\tprivate</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> CountDownLatch</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> countDownLatsh </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> CountDownLatch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Player</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Player</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Integer</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">index</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> index;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"玩家"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">index</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"准备完成"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            countDownLatsh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">countDown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; i++){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Player</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(i)).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        countDownLatsh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"玩家准备完毕，开始游戏"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.16,words:948},title:"CountDownLatch和CyclicBarrier",icon:"file-lines",type:"article"}}],["/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/JMM%E6%A8%A1%E5%9E%8B.html",{loader:()=>a.e(8576).then(a.bind(a,5608)),meta:{author:"Ms.Zyh",date:16550784e5,category:["多线程"],tag:["常用","多线程"],sticky:!1,excerpt:"<h3>一，JMM模型</h3>\n<h4>1.1 介绍</h4>\n<p>​\tJava内存模型(Java Memory Model简称JMM)是一种抽象的概念，并不真实存在，它描述的是一组规则或规范，通过这组规范定义了程序中各个变量（包括实例字段，静态字段和构成数组对象的元素）的访问方式。每个JVM 的实现都要遵守JMM规范，JMM规范的保障了并发程序运行在不同的虚拟机上时，得到的程序结果是安全可靠的。如果没有JMM内存模型来规范，就可能会出现，经过不同 JVM 翻译之后，运行的结果不相同也不正确的情况。</p>\n<h4>1.2 主内存和工作内存</h4>\n<p>​\tjava运行时内存模型JVM运行程序的实体是线程，在每个线程创建时，JVM都会为其创建一个工作内存(有些地方称为栈空间)，用于存储线程私有的数据。Java 内存模型JMM规定所有变量都存储在主内存，主内存是共享内存区域，所有线程都可以访问，但线程对变量的操作(读取赋值等)必须在工作内存中进行。工作内存是线程私有，所以不同的线程间无法访问对方的工作内存，线程间的通信(传值)必须通过主内存来完成。</p>",readingTime:{minutes:15.91,words:4772},title:"JMM模型",icon:"file-lines",type:"article"}}],["/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/ReentrantLock%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html",{loader:()=>a.e(9988).then(a.bind(a,6213)),meta:{author:"Ms.Zyh",date:16555104e5,category:["多线程"],tag:["常用","多线程"],sticky:!1,excerpt:"<h3>一，ReentrantLock原理解析</h3>\n<p>​\tReentrantLock的基本实现可以概括为：先通过CAS尝试获取锁。如果此时已经有线程占据了锁，那就加入AQS队列并且被挂起。当锁被释放之后，排在CLH队列队首的线程会被唤醒，然后CAS再次尝试获取锁。在这个时候，如果：</p>\n<ul>\n<li>非公平锁：如果同时还有另一个线程进来尝试获取，那么有可能会让这个线程抢先获取；</li>\n<li>公平锁：如果同时还有另一个线程进来尝试获取，当它发现自己不是在队首的话，就会排到队尾，由队首的线程获取到锁；</li>\n</ul>\n<h4>1.1 AQS介绍</h4>\n<p>​\tAbstractQueuedSynchronizer简称AQS，是一个用于构建锁和同步容器的框架。事实上于<code>java.concurrent.util</code>包内许多类都是基于AQS构建，例如ReentrantLock，Semaphore，CountDownLatch，ReentrantReadWriteLock，FutureTask等。AQS解决了在实现同步容器时设计的大量细节问题。</p>",readingTime:{minutes:26.1,words:7829},title:"ReentrantLock原理解析",icon:"file-lines",type:"article"}}],["/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/ReentrantReadWriteLock%E5%8E%9F%E7%90%86.html",{loader:()=>a.e(5760).then(a.bind(a,5192)),meta:{author:"Ms.Zyh",date:16559424e5,category:["多线程"],tag:["偏僻","多线程"],sticky:!1,excerpt:'<h3>一，ReentrantReadWriteLock原理</h3>\n<p>​\t读写锁用的是同一个 Sycn 同步器，因此等待队列、state 等也是同一个，写锁状态占了 state 的低 16 位，而读锁使用的是 state 的高 16 位；（state是int类型，占4个字节，4*8 = 32位）。</p>\n<h4>1.1 WriteLock的lock()</h4>\n<p><code>WriteLock</code>的<code>lock()</code>方法：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> lock</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">() {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">acquire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:15.7,words:4710},title:"ReentrantReadWriteLock原理",icon:"file-lines",type:"article"}}],["/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Semaphore%E5%8E%9F%E7%90%86.html",{loader:()=>a.e(3587).then(a.bind(a,1428)),meta:{author:"Ms.Zyh",date:16560288e5,category:["多线程"],tag:["推荐","多线程"],sticky:!1,excerpt:'<h3>一，Semaphore原理</h3>\n<p>​\t信号量，用来限制能同时访问共享资源的线程上限，就好像ReentrantLock只允许一个线程进去，而Semaphore最多只允许n个线程进去，常用于资源访问，服务限流(Hystrix里限流就有基于信号量方式)</p>\n<h4>1.1 简单使用</h4>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> SemaphoreRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Semaphore</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> semaphore</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Semaphore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;i++){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(semaphore,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"zyh"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">i).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Task</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Semaphore</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> semaphore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Semaphore</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> semaphore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> tname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">semaphore</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> semaphore;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(tname);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                semaphore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">acquire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">currentThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">":aquire():"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">currentTimeMillis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                semaphore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">release</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">currentThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">":release():"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">currentTimeMillis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.45,words:1334},title:"Semaphore原理",icon:"file-lines",type:"article"}}],["/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%20.html",{loader:()=>a.e(168).then(a.bind(a,258)),meta:{author:"Ms.Zyh",date:1656288e6,category:["多线程"],tag:["偏僻","多线程"],sticky:!1,excerpt:"<h3>一，synchronized底层原理</h3>\n<h4>1.1 应用方式</h4>\n<p>Java中每一个对象都可以作为锁，这是synchronized实现同步的基础：</p>\n<ul>\n<li>当synchronized作用在实例方法时，监视器锁（monitor）便是对象实例（this）；</li>\n<li>当synchronized作用在静态方法时，监视器锁（monitor）便是对象的Class实例，因为Class数据存在于永久代，因此静态方法锁相当于该类的一个全局锁；</li>\n<li>当synchronized作用在某一个对象实例时，监视器锁（monitor）便是括号括起来的对象实例；</li>\n</ul>",readingTime:{minutes:10.45,words:3135},title:"synchronized底层原理 ",icon:"file-lines",type:"article"}}],["/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/volatile%E7%9A%84%E5%8E%9F%E7%90%86.html",{loader:()=>a.e(5641).then(a.bind(a,4369)),meta:{author:"Ms.Zyh",date:16566336e5,category:["多线程"],tag:["偏僻","多线程"],sticky:!1,excerpt:"<h3>一，volatile的原理</h3>\n<p>volatile是Java虚拟机提供的轻量级的同步机制。volatile关键字有如下两个作用</p>\n<ul>\n<li>保证被volatile修饰的共享变量对所有线程总数可见的，也就是当一个线程修改 了一个被volatile修饰共享变量的值，新值总是可以被其他线程立即得知。</li>\n<li>禁止指令重排序优化</li>\n</ul>\n<h4>1.1 可见性</h4>\n<p>​\t关于volatile的可见性作用，我们必须意识到被volatile修饰的变量对所有线程总数立即 可见的，对volatile变量的所有写操作总是能立刻反应到其他线程中。</p>",readingTime:{minutes:11.04,words:3312},title:"volatile的原理",icon:"file-lines",type:"article"}}],["/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80.html",{loader:()=>a.e(2390).then(a.bind(a,9021)),meta:{author:"Ms.Zyh",date:16530048e5,category:["多线程"],tag:["干货","多线程"],sticky:!1,excerpt:'<h3>一，线程的创建</h3>\n<h4>1.1 继承Thread类</h4>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ThreadCreateTest</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // 逻辑</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">   </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:8.76,words:2628},title:"线程基础",icon:"file-lines",type:"article"}}],["/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0ThreadPoolExecutor.html",{loader:()=>a.e(3413).then(a.bind(a,4050)),meta:{author:"Ms.Zyh",date:16524e8,category:["多线程"],tag:["干货","多线程"],sticky:!1,excerpt:'<h3>一，ThreadPoolExecutor</h3>\n<p>全参构造函数参数介绍，在Java中创建线程池常用的类是<code>ThreadPoolExecutor</code>，该类的全参构造函数如下：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> corePoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                          int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> maximumPoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                          long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> keepAliveTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">                          TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> unit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">                          BlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> workQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">                          ThreadFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> threadFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">                          RejectedExecutionHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> handler) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:19.88,words:5964},title:"线程池ThreadPoolExecutor",icon:"file-lines",type:"article"}}],["/blog/%E5%B7%A5%E4%BD%9C%E6%B5%81/Flowable%E6%B5%81%E7%A8%8B%E5%9B%BE.html",{loader:()=>a.e(9398).then(a.bind(a,1641)),meta:{author:"Ms.Zyh",date:16625088e5,category:["工作流"],tag:["常用","工作流"],sticky:!1,excerpt:"<h3>一，认识工作流</h3>\n<h4>1.1 认识BPM与BPMN</h4>\n<ul>\n<li>BPM：BPM是Business Process Management的缩写，中文含义业务流程管理，旨在通过分析、设计、执行、监控和优化业务流程，这一流程也被称之为Business Process Modeling业务流程建模。说白了BPM就是一种管理方法，或者说是一种思想，主要是用来管理业务流程。</li>\n<li>BPMN：BPM下就有很多种建模语言，BPMN（Business Process Modeling Notation）就是其中的一种建模语言。在2004年5月由BPMI Notation Working Group对外发布，这就是BPMN 1.0 规范。后来BPMI并入到OMG组织，并在2011年推出BPMN2.0标准，对BPMN进行了重新定义 (Business Process Model and Notation)，这就是我们常说的BPMN2.0。<br>\n总的来说，BPM是一种思想，而BPMN是实现这种思想的行业规范。</li>\n</ul>",readingTime:{minutes:2.77,words:830},title:"Flowable流程图",icon:"file-lines",type:"article"}}],["/blog/%E5%B7%A5%E4%BD%9C%E6%B5%81/SpringBoot%E6%95%B4%E5%90%88flowable.html",{loader:()=>a.e(6107).then(a.bind(a,4108)),meta:{author:"Ms.Zyh",date:1664496e6,category:["工作流"],tag:["必看","工作流"],sticky:!1,excerpt:'<h3>一，flowable相关配置</h3>\n<p>第一步：导入对应的jar：</p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.flowable&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;flowable-spring-boot-starter&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;6.7.2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.22,words:1267},title:"SpringBoot整合flowable",icon:"file-lines",type:"article"}}],["/blog/%E5%B7%A5%E4%BD%9C%E6%B5%81/flowable%20%E4%BC%9A%E7%AD%BE%E3%80%81%E8%BD%AC%E6%B4%BE%E3%80%81%E5%A7%94%E6%B4%BE%E3%80%81%E5%8A%A0%E7%AD%BE.html",{loader:()=>a.e(6409).then(a.bind(a,3071)),meta:{author:"Ms.Zyh",date:16620768e5,category:["工作流"],tag:["推荐","工作流"],sticky:!1,excerpt:"<h3>一、 会签</h3>\n<blockquote>\n<p>会签的意思是，在流程任务管理中，任务通常是由一个人或者多个人同时去处理的，这种任务叫做会签任务</p>\n</blockquote>\n<h4>1.1 会签类型</h4>\n<ul>\n<li>按数量通过：达到一定数量的处理后，会签通过</li>\n<li>按比例通过：达到一定比例的处理后，会签通过</li>\n<li>一票否决：只有一个人不同意时，会签通过</li>\n<li>一票通过：只有一个同意时，会签通过<br>\nFlowable实现会签是基于多实例任务的，将任务节点设置成多实例，流程执行到该任务节点会为会签人员的集合都生成一条代办任务。</li>\n</ul>",readingTime:{minutes:6.09,words:1828},title:"flowable 会签、转派、委派、加签",icon:"file-lines",type:"article"}}],["/blog/%E5%B7%A5%E4%BD%9C%E6%B5%81/flowable%E8%AF%B7%E5%81%87%E6%B5%81%E7%A8%8B%E6%A1%88%E4%BE%8B.html",{loader:()=>a.e(821).then(a.bind(a,8426)),meta:{author:"Ms.Zyh",date:16631136e5,category:["工作流"],tag:["进阶","工作流"],sticky:!1,excerpt:'<p>我们在上一章节springboot整合flowable的时候，通过springboot的自动装配ProcessEngineAutoConfiguration类，会自动装配SpringProcessEngineConfiguration，所以我们可以直接注入erProcessEngine，ProcessEngine负责与各个服务进行交互和管理流程的整个生期：</p>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">方法</th>\n<th style="text-align:left">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left">startExecutors()</td>\n<td style="text-align:left">启动所有流程引擎中的执行器。执行器用于处理流程实例的执行，在引擎启动时，执行器会自动运行并处理待办任务和定时任务</td>\n</tr>\n<tr>\n<td style="text-align:left">getRepositoryService()</td>\n<td style="text-align:left">获取流程仓库服务对象。用于管理流程定义的部署和查询</td>\n</tr>\n<tr>\n<td style="text-align:left">getRuntimeService()</td>\n<td style="text-align:left">获取运行时服务对象。用于操作流程的运行时数据，如启动流程实例、执行流程任务、查询流程实例状态等</td>\n</tr>\n<tr>\n<td style="text-align:left">getFormService()</td>\n<td style="text-align:left">获取表单服务对象。用于管理表单数据和处理与表单相关的操作，如获取表单内容、保存表单数据等</td>\n</tr>\n<tr>\n<td style="text-align:left">getTaskService()</td>\n<td style="text-align:left">获取任务服务对象。用于管理任务数据和处理与任务相关的操作，如创建任务、完成任务、查询任务列表等</td>\n</tr>\n<tr>\n<td style="text-align:left">getHistoryService()</td>\n<td style="text-align:left">获取历史数据服务对象。用于访问和查询流程的历史数据，如查询已完成的流程实例、查询历史任务等</td>\n</tr>\n<tr>\n<td style="text-align:left">getIdentityService()</td>\n<td style="text-align:left">获取身份验证和授权服务对象。用于管理用户、组、角色等身份信息，以及进行权限和身份验证的操作</td>\n</tr>\n<tr>\n<td style="text-align:left">getManagementService()</td>\n<td style="text-align:left">获取管理服务对象。用于进行底层的引擎管理和操作，如数据库管理、作业管理、引擎配置等</td>\n</tr>\n<tr>\n<td style="text-align:left">getDynamicBpmnService()</td>\n<td style="text-align:left">获取动态 BPMN 服务对象。用于动态修改流程定义的流程元素，如添加活动、删除活动、修改连线等</td>\n</tr>\n<tr>\n<td style="text-align:left">getProcessMigrationService()</td>\n<td style="text-align:left">获取流程迁移服务对象。用于支持流程定义的迁移操作，如迁移流程实例、修改流程定义版本等</td>\n</tr>\n<tr>\n<td style="text-align:left">getProcessEngineConfiguration()</td>\n<td style="text-align:left">获取流程引擎的配置对象。可以通过配置对象进行流程引擎的详细配置和定制，如数据库配置、作业调度配置、缓存配置等</td>\n</tr>\n</tbody>\n</table>',readingTime:{minutes:13.99,words:4197},title:"flowable请假流程案例",icon:"file-lines",type:"article"}}],["/blog/%E5%B7%A5%E5%85%B7/Jmeter%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8.html",{loader:()=>a.e(968).then(a.bind(a,7359)),meta:{author:"Ms.Zyh",date:16569792e5,category:["工具"],tag:["基础","工具"],sticky:!1,excerpt:'<h3>一，安装</h3>\n<p>方式一：官网下载，官网地址：<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener noreferrer">http://jmeter.apache.org/download_jmeter.cgi</a><br>\n方式二：天翼网盘下载，下载链接：<a href="https://cloud.189.cn/web/share?code=Vj63em2aIruu%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9A6vdi%EF%BC%89" target="_blank" rel="noopener noreferrer">https://cloud.189.cn/web/share?code=Vj63em2aIruu（访问码：6vdi）</a><br>\n我在官网下载的是JMeter 5.6.3版本的zip文件，下载完成后直接解压，然后进入到<code>apache-jmeter-5.6.3\\bin</code>文件夹内，双击<code>jmeter.bat</code>文件启动jmeter：<br>\n<img src="http://img.zouyh.top/article-img/202501261614708.png" alt="image.png" loading="lazy"><br>\n启动之后会有两个窗口，一个cmd窗口，一个JMeter的 GUI窗口，cmd窗口的主要是提示我们，不要使用GUI窗口运行压力测试，GUI仅用于压力测试的创建和调试；执行压力测试请不要使用GUI窗口。使用下面的命令来执行测试：</p>',readingTime:{minutes:2.11,words:634},title:"Jmeter的安装使用",icon:"file-lines",type:"article"}}],["/blog/%E5%B7%A5%E5%85%B7/NavicatPremium16%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E6%BF%80%E6%B4%BB.html",{loader:()=>a.e(9873).then(a.bind(a,7088)),meta:{author:"Ms.Zyh",date:16576704e5,category:["工具"],tag:["推荐","工具"],sticky:!1,excerpt:'<h3>一，安装</h3>\n<ul>\n<li>获取方式一：官方简体中文下载网址：<a href="https://www.navicat.com.cn/download/navicat-premium" target="_blank" rel="noopener noreferrer">https://www.navicat.com.cn/download/navicat-premium</a></li>\n<li>获取方式二：通过天翼云盘下载使用：<a href="https://cloud.189.cn/web/share?code=QFnMZbqyyMRb%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9A5yu8%EF%BC%89" target="_blank" rel="noopener noreferrer">https://cloud.189.cn/web/share?code=QFnMZbqyyMRb（访问码：5yu8）</a><br>\n1，双击运行安装，然后点击下一步<br>\n<img src="http://img.zouyh.top/article-img/20240917135156419.png" alt="image.png" loading="lazy"><br>\n2，选择“我同意”，点击下一步：<br>\n<img src="http://img.zouyh.top/article-img/20240917135156420.png" alt="image.png" loading="lazy"><br>\n3，自定义安装目录，选择下一步：<br>\n<img src="http://img.zouyh.top/article-img/20240917135159431.png" alt="image.png" loading="lazy"><br>\n4，是否选择执行额外任务，这个额外任务就是创建桌面图标，直接点击下一步就可以<br>\n<img src="http://img.zouyh.top/article-img/20240917135158428.png" alt="image.png" loading="lazy"><br>\n5，这里展示了前面几步的配置，直接点击安装<br>\n<img src="http://img.zouyh.top/article-img/20240917135157425.png" alt="image.png" loading="lazy"><br>\n6，等待一会会出现如下界面，点击完成即可，到此就完成对navicat的安装。<br>\n<img src="http://img.zouyh.top/article-img/20240917135157423.png" alt="image.png" loading="lazy"></li>\n</ul>',readingTime:{minutes:3.01,words:902},title:"NavicatPremium16的安装与激活",icon:"file-lines",type:"article"}}],["/blog/%E5%B7%A5%E5%85%B7/Odsidian%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8.html",{loader:()=>a.e(4715).then(a.bind(a,2237)),meta:{author:"Ms.Zyh",date:16582752e5,category:["工具"],tag:["偏僻","工具"],sticky:!1,excerpt:'<p>说一下为什么选择Obsidian作为我的markdown文本编辑，原来我是使用的typora的，这个typora使用起来是非常舒服的，但是它有一个很大的缺点就是多端同步，没有办法将文件保存在远程，所以我就百度了一下，发现了Odsidian这编辑器。</p>\n<h3>一，Obsidian</h3>\n<h4>1，下载安装</h4>\n<p>下载：前往Obsidia<code>https://obsidian.md</code>官网，点击"Get Obsidian for Windows"按钮或则点击Download都可以进入下载页面，然后点击Download for Windows下载安装包。<br>\n<img src="http://img.zouyh.top/article-img/20240917135149407.png" alt="image.png" loading="lazy"></p>',readingTime:{minutes:2.82,words:847},title:"Odsidian文本编辑器",icon:"file-lines",type:"article"}}],["/blog/%E5%B7%A5%E5%85%B7/idea2024.1.7%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%92%8C%E6%BF%80%E6%B4%BB.html",{loader:()=>a.e(4394).then(a.bind(a,5531)),meta:{author:"Ms.Zyh",date:16573248e5,category:["工具"],tag:["进阶","工具"],sticky:!1,excerpt:'<h3>一，下载</h3>\n<p>下载网址：<a href="https://www.jetbrains.com/idea/download/other.html" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com/idea/download/other.html</a><br>\n天翼网盘：<a href="https://cloud.189.cn/t/uuEfInF73uY3%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9Azn6s%EF%BC%89" target="_blank" rel="noopener noreferrer">https://cloud.189.cn/t/uuEfInF73uY3（访问码：zn6s）</a><br>\n双击运行安装包，第二步选择一下安装位置，然后一直下一步就好了。</p>',readingTime:{minutes:.61,words:182},title:"idea2024.1.7的下载和激活",icon:"file-lines",type:"article"}}],["/blog/%E5%B7%A5%E5%85%B7/ssh%E6%9C%8D%E5%8A%A1%E7%99%BB%E5%BD%95linux.html",{loader:()=>a.e(3648).then(a.bind(a,1141)),meta:{author:"Ms.Zyh",date:16589664e5,category:["工具"],tag:["常用","工具"],sticky:!1,excerpt:'<h3>一、创建密钥</h3>\n<p>我的电脑是windows，可以查看<code>\\Users\\用户名\\.ssh</code>文件是否有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，分别为私钥和公钥，如果没有可以通过git的命令创建：</p>\n<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ssh-keygen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rsa</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "youmail@gmail.com"</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',readingTime:{minutes:1.09,words:328},title:"ssh服务登录linux",icon:"file-lines",type:"article"}}],["/blog/%E5%B7%A5%E5%85%B7/xshell8%E5%AE%89%E8%A3%85.html",{loader:()=>a.e(4364).then(a.bind(a,1801)),meta:{author:"Ms.Zyh",date:16593984e5,category:["工具"],tag:["偏僻","工具"],sticky:!1,excerpt:'<h3>一、下载安装</h3>\n<ul>\n<li>下载：\n<ul>\n<li>官方下载地址：<a href="https://www.xshell.com/zh/free-for-home-school/" target="_blank" rel="noopener noreferrer">https://www.xshell.com/zh/free-for-home-school/</a></li>\n<li>天翼云盘：<a href="https://cloud.189.cn/t/3yMvUnbAjyUf%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9Agv75%EF%BC%89" target="_blank" rel="noopener noreferrer">https://cloud.189.cn/t/3yMvUnbAjyUf（访问码：gv75）</a></li>\n</ul>\n</li>\n<li>安装：比较简单，一直下一步，中间也就修改一下安装位置，这里就不放截图了。</li>\n<li>注册：注册也比较简单填一下用户名和邮箱就好了。</li>\n</ul>',readingTime:{minutes:1.11,words:332},title:"xshell8安装",icon:"file-lines",type:"article"}}],["/blog/%E5%B7%A5%E5%85%B7/%E5%9B%BE%E5%BA%8A%E7%A5%9E%E5%99%A8PicGo_%E4%B8%83%E7%89%9B%E4%BA%91.html",{loader:()=>a.e(4266).then(a.bind(a,7941)),meta:{author:"Ms.Zyh",date:16568928e5,category:["工具"],tag:["推荐","工具"],sticky:!1,excerpt:'<h3>一，PicGo安装</h3>\n<p>github下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener noreferrer">https://github.com/Molunerfinn/PicGo/releases</a><br>\n天翼网盘安装地址：<a href="https://cloud.189.cn/web/share?code=QjeQnqymQVra%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9Ag3ze%EF%BC%89" target="_blank" rel="noopener noreferrer">https://cloud.189.cn/web/share?code=QjeQnqymQVra（访问码：g3ze）</a><br>\ngit的下载方式：<br>\n<img src="http://img.zouyh.top/article-img/20240917135204444.png" alt="0.png" loading="lazy"><br>\n双击运行安装包：<br>\n<img src="http://img.zouyh.top/article-img/20240917135201436.png" alt="1.png" loading="lazy"><br>\n自定义安装的目录，直接下一步：<br>\n<img src="http://img.zouyh.top/article-img/20240917135203443.png" alt="2.png" loading="lazy"><br>\n点击安装即可完成安装PicGo：<br>\n<img src="http://img.zouyh.top/article-img/20240917135203441.png" alt="3.png" loading="lazy"></p>',readingTime:{minutes:1.49,words:447},title:"图床神器PicGo+七牛云",icon:"file-lines",type:"article"}}],["/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(6009).then(a.bind(a,8513)),meta:{author:"Ms.Zyh",date:16689888e5,category:["设计模式"],tag:["基础","设计模式"],sticky:!1,excerpt:"<h3>一，策略模式</h3>\n<blockquote>\n<p>策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。主要解决：在有多种算法相似的情况下，使用 if...else 所带来的复杂和难以维护。</p>\n</blockquote>\n<p>模式结构成员构成：</p>\n<ul>\n<li>环境角色(Context)：持有一个策略类的引用，提供给客户端使用。</li>\n<li>抽象策略角色(Strategy)：这是一个抽象角色，通常由一个接口或抽象类实现。</li>\n<li>具体策略角色(ConcreteStrategy)：包装了相关的算法或行为</li>\n</ul>",readingTime:{minutes:2.04,words:612},title:"关系模式-策略模式",icon:"file-lines",type:"article"}}],["/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(6238).then(a.bind(a,7310)),meta:{author:"Ms.Zyh",date:16694208e5,category:["设计模式"],tag:["必看","设计模式"],sticky:!1,excerpt:"<blockquote>\n<p>如果有多个对象有机会处理请求，责任链可使请求的发送者和接受者解耦，请求沿着责任链传递，直到有一个对象处理了它为止.</p>\n</blockquote>\n<p>模式结构成员构成：</p>\n<ul>\n<li>抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。</li>\n<li>具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者。</li>\n<li>客户类（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。</li>\n</ul>",readingTime:{minutes:2.33,words:698},title:"关系模式-责任链模式",icon:"file-lines",type:"article"}}],["/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(1349).then(a.bind(a,2315)),meta:{author:"Ms.Zyh",date:16673472e5,category:["设计模式"],tag:["常用","设计模式"],sticky:!1,excerpt:'<h3>一，单例模式</h3>\n<blockquote>\n<p>单例模式是创建型设计模式，它保证一个类只有一个实例，并提供一个全局访问点以供外部代码使用.</p>\n</blockquote>\n<h4>1.1 饿汉式</h4>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HungrySingleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 1,私有化构造方法，避免通过new创建</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HungrySingleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(){</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 2,私有静态属性</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HungrySingleton</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> hungrySingleton </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HungrySingleton</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 3,向外暴露访问静态属性</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HungrySingleton</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> hungrySingleton;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.28,words:985},title:"创建模式-单例模式",icon:"file-lines",type:"article"}}],["/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(2090).then(a.bind(a,1872)),meta:{author:"Ms.Zyh",date:1667952e6,category:["设计模式"],tag:["常用","设计模式"],sticky:!1,excerpt:'<h3>一，工厂模式</h3>\n<h4>1.1 简单工厂模式</h4>\n<p>举例：小明初到华强北，小明的手机厂可以生产oppo手机，小米手机，苹果手机，通过工厂创建或者说生产手机。<br>\n模式结构成员构成：</p>\n<ul>\n<li>Factory：工厂角色</li>\n<li>AbstractProduct：抽象产品</li>\n<li>Product：具体产品</li>\n</ul>\n<p>Uml图：<br>\n<img src="http://img.zouyh.top/article-img/20240917135125391.png" alt="image.png" loading="lazy"></p>',readingTime:{minutes:3.92,words:1175},title:"创建模式-工厂模式",icon:"file-lines",type:"article"}}],["/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F-%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(3072).then(a.bind(a,585)),meta:{author:"Ms.Zyh",date:16686432e5,category:["设计模式"],tag:["常用","设计模式"],sticky:!1,excerpt:"<h3>一，生成器模式</h3>\n<blockquote>\n<p>生成器模式（Builder）是一种创建型设计模式，这种模式的核心思想是将对象的构建过程拆分成多个步骤，每个步骤由一个独立的构建器对象负责，最终组合成一个完整的对象。</p>\n</blockquote>\n<p>模式结构成员构成：</p>\n<ul>\n<li>Product：产品，想要生产的对象。</li>\n<li>Builder：生成器，抽象的生成，主要包含构建步骤。</li>\n<li>ConcreteBuilder：具体生成器，具体的构建步骤的实现</li>\n<li>Director：导演，指挥构建过程的顺序。</li>\n</ul>",readingTime:{minutes:3.59,words:1078},title:"创建模式-生成器模式",icon:"file-lines",type:"article"}}],["/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(7822).then(a.bind(a,3116)),meta:{author:"Ms.Zyh",date:16698528e5,category:["设计模式"],tag:["必看","设计模式"],sticky:!1,excerpt:'<h4>一，静态代理</h4>\n<p>在开发中，通常需要为方法添加日志打印，能够记录程序的执行过程，以便后续出现异常问题的时候，能更好的排查定位。假设我们现在已经完成了系统用户的增加、删除、修改等功能，这些功能在类UserServiceImpl中已经实现。</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> delete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserServiceImpl</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"添加用户"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"修改用户"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> delete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"删除用户"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:16.11,words:4832},title:"结构模式-代理模式",icon:"file-lines",type:"article"}}],["/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(6827).then(a.bind(a,4200)),meta:{author:"Ms.Zyh",date:16703712e5,category:["设计模式"],tag:["偏僻","设计模式"],sticky:!1,excerpt:"<blockquote>\n<p>装饰者模式上指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式</p>\n</blockquote>\n<p>模式结构成员构成：</p>\n<ul>\n<li>抽象组件（Component）：定义一个对象的接口，可以给这些对象动态地添加职责。</li>\n<li>具体组件（ConcreteComponent）：实现或继承抽象组件，并添加基础的行为或属性。</li>\n<li>装饰者（Decorator）：持有一个抽象组件的引用，并定义一个与抽象组件一致的接口。</li>\n<li>具体装饰者（ConcreteDecorator）：实现装饰者接口，并给具体组件对象添加额外的职责。</li>\n</ul>",readingTime:{minutes:2,words:600},title:"结构模式-装饰者模式",icon:"file-lines",type:"article"}}],["/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(9268).then(a.bind(a,1681)),meta:{author:"Ms.Zyh",date:16700256e5,category:["设计模式"],tag:["偏僻","设计模式"],sticky:!1,excerpt:'<h3>一，适配器模式</h3>\n<blockquote>\n<p>适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造成的类的兼容性问题</p>\n</blockquote>\n<p>模式结构成员构成：</p>\n<ul>\n<li>目标角色：期望实现的目标，一般是接口。</li>\n<li>源角色：存在于系统中，是指内容满足客户需求，但是接口不匹配，需要转换</li>\n<li>适配器：将源角色转换为目标角色</li>\n</ul>\n<h4>1，类的适配器模式</h4>\n<p>案例：小明以前买了一个小米手机，送了一个小米充电器，现在只是找到了小米手机，小米充电器丢了，但是找了一个苹果充电器，小明为了充电，买了一个适配器。<br>\nUML图：<br>\n<img src="http://img.zouyh.top/article-img/20240917135141398.png" alt="image.png" loading="lazy"><br>\n源角色：</p>',readingTime:{minutes:4.09,words:1226},title:"结构模式-适配器模式",icon:"file-lines",type:"article"}}],["/404.html",{loader:()=>a.e(7490).then(a.bind(a,1489)),meta:{title:""}}],["/blog/Dubbo/",{loader:()=>a.e(3592).then(a.bind(a,5970)),meta:{title:"Dubbo"}}],["/blog/Java/",{loader:()=>a.e(8348).then(a.bind(a,9002)),meta:{title:"Java"}}],["/blog/Docker/",{loader:()=>a.e(5568).then(a.bind(a,4445)),meta:{title:"Docker"}}],["/blog/Jvm/",{loader:()=>a.e(7611).then(a.bind(a,4384)),meta:{title:"Jvm"}}],["/blog/MQ/",{loader:()=>a.e(2298).then(a.bind(a,3701)),meta:{title:"MQ"}}],["/blog/Mybatis/",{loader:()=>a.e(4061).then(a.bind(a,266)),meta:{title:"Mybatis"}}],["/blog/Netty/",{loader:()=>a.e(3224).then(a.bind(a,7914)),meta:{title:"Netty"}}],["/blog/Nginx/",{loader:()=>a.e(9136).then(a.bind(a,7112)),meta:{title:"Nginx"}}],["/blog/Redis/",{loader:()=>a.e(4199).then(a.bind(a,2701)),meta:{title:"Redis"}}],["/blog/Spring/",{loader:()=>a.e(1241).then(a.bind(a,4500)),meta:{title:"Spring"}}],["/blog/SpringBoot/",{loader:()=>a.e(4221).then(a.bind(a,6352)),meta:{title:"Spring Boot"}}],["/blog/SpringCloud/",{loader:()=>a.e(4770).then(a.bind(a,6545)),meta:{title:"Spring Cloud"}}],["/blog/SpringMvc/",{loader:()=>a.e(9871).then(a.bind(a,6344)),meta:{title:"Spring Mvc"}}],["/blog/mysql/",{loader:()=>a.e(9998).then(a.bind(a,1217)),meta:{title:"Mysql"}}],["/blog/zookeeper/",{loader:()=>a.e(1350).then(a.bind(a,1830)),meta:{title:"Zookeeper"}}],["/blog/%E5%A4%9A%E7%BA%BF%E7%A8%8B/",{loader:()=>a.e(6468).then(a.bind(a,3179)),meta:{title:"多线程"}}],["/blog/%E5%B7%A5%E4%BD%9C%E6%B5%81/",{loader:()=>a.e(9624).then(a.bind(a,8199)),meta:{title:"工作流"}}],["/blog/%E5%B7%A5%E5%85%B7/",{loader:()=>a.e(6160).then(a.bind(a,3327)),meta:{title:"工具"}}],["/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{loader:()=>a.e(9273).then(a.bind(a,3339)),meta:{title:"设计模式"}}],["/category/",{loader:()=>a.e(3583).then(a.bind(a,3233)),meta:{title:"分类",index:!1}}],["/category/dubbo/",{loader:()=>a.e(1208).then(a.bind(a,3923)),meta:{title:"Dubbo 分类",index:!1}}],["/category/java/",{loader:()=>a.e(8236).then(a.bind(a,1730)),meta:{title:"Java 分类",index:!1}}],["/category/docker/",{loader:()=>a.e(1360).then(a.bind(a,2570)),meta:{title:"Docker 分类",index:!1}}],["/category/jvm/",{loader:()=>a.e(3035).then(a.bind(a,7969)),meta:{title:"Jvm 分类",index:!1}}],["/category/mq/",{loader:()=>a.e(7802).then(a.bind(a,5629)),meta:{title:"MQ 分类",index:!1}}],["/category/mybatis/",{loader:()=>a.e(2285).then(a.bind(a,9951)),meta:{title:"Mybatis 分类",index:!1}}],["/category/netty/",{loader:()=>a.e(2776).then(a.bind(a,7690)),meta:{title:"Netty 分类",index:!1}}],["/category/nginx/",{loader:()=>a.e(5552).then(a.bind(a,1320)),meta:{title:"Nginx 分类",index:!1}}],["/category/redis/",{loader:()=>a.e(7).then(a.bind(a,1902)),meta:{title:"Redis 分类",index:!1}}],["/category/spring/",{loader:()=>a.e(9097).then(a.bind(a,7494)),meta:{title:"Spring 分类",index:!1}}],["/category/springboot/",{loader:()=>a.e(4829).then(a.bind(a,8074)),meta:{title:"SpringBoot 分类",index:!1}}],["/category/springcloud/",{loader:()=>a.e(1762).then(a.bind(a,1499)),meta:{title:"SpringCloud 分类",index:!1}}],["/category/springmvc/",{loader:()=>a.e(6479).then(a.bind(a,1133)),meta:{title:"SpringMvc 分类",index:!1}}],["/category/mysql/",{loader:()=>a.e(1006).then(a.bind(a,7667)),meta:{title:"mysql 分类",index:!1}}],["/category/zookeeper/",{loader:()=>a.e(4742).then(a.bind(a,9442)),meta:{title:"zookeeper 分类",index:!1}}],["/category/%E5%A4%9A%E7%BA%BF%E7%A8%8B/",{loader:()=>a.e(9572).then(a.bind(a,4678)),meta:{title:"多线程 分类",index:!1}}],["/category/%E5%B7%A5%E4%BD%9C%E6%B5%81/",{loader:()=>a.e(5144).then(a.bind(a,6971)),meta:{title:"工作流 分类",index:!1}}],["/category/%E5%B7%A5%E5%85%B7/",{loader:()=>a.e(7968).then(a.bind(a,4595)),meta:{title:"工具 分类",index:!1}}],["/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{loader:()=>a.e(1385).then(a.bind(a,2684)),meta:{title:"设计模式 分类",index:!1}}],["/tag/",{loader:()=>a.e(1797).then(a.bind(a,951)),meta:{title:"标签",index:!1}}],["/tag/%E5%BF%85%E7%9C%8B/",{loader:()=>a.e(1686).then(a.bind(a,2518)),meta:{title:"标签: 必看",index:!1}}],["/tag/dubbo/",{loader:()=>a.e(4894).then(a.bind(a,5853)),meta:{title:"标签: Dubbo",index:!1}}],["/tag/%E5%9F%BA%E7%A1%80/",{loader:()=>a.e(6080).then(a.bind(a,3306)),meta:{title:"标签: 基础",index:!1}}],["/tag/%E6%8E%A8%E8%8D%90/",{loader:()=>a.e(922).then(a.bind(a,8918)),meta:{title:"标签: 推荐",index:!1}}],["/tag/java/",{loader:()=>a.e(250).then(a.bind(a,3691)),meta:{title:"标签: Java",index:!1}}],["/tag/%E5%B8%B8%E7%94%A8/",{loader:()=>a.e(3698).then(a.bind(a,803)),meta:{title:"标签: 常用",index:!1}}],["/tag/%E5%B9%B2%E8%B4%A7/",{loader:()=>a.e(465).then(a.bind(a,4999)),meta:{title:"标签: 干货",index:!1}}],["/tag/%E5%81%8F%E5%83%BB/",{loader:()=>a.e(6128).then(a.bind(a,7252)),meta:{title:"标签: 偏僻",index:!1}}],["/tag/%E8%BF%9B%E9%98%B6/",{loader:()=>a.e(799).then(a.bind(a,8679)),meta:{title:"标签: 进阶",index:!1}}],["/tag/docker/",{loader:()=>a.e(4446).then(a.bind(a,5384)),meta:{title:"标签: Docker",index:!1}}],["/tag/jvm/",{loader:()=>a.e(5837).then(a.bind(a,8364)),meta:{title:"标签: Jvm",index:!1}}],["/tag/mq/",{loader:()=>a.e(3120).then(a.bind(a,9696)),meta:{title:"标签: MQ",index:!1}}],["/tag/mybatis/",{loader:()=>a.e(3223).then(a.bind(a,5115)),meta:{title:"标签: Mybatis",index:!1}}],["/tag/netty/",{loader:()=>a.e(70).then(a.bind(a,1707)),meta:{title:"标签: Netty",index:!1}}],["/tag/nginx/",{loader:()=>a.e(14).then(a.bind(a,2912)),meta:{title:"标签: Nginx",index:!1}}],["/tag/redis/",{loader:()=>a.e(8857).then(a.bind(a,1774)),meta:{title:"标签: Redis",index:!1}}],["/tag/spring/",{loader:()=>a.e(6847).then(a.bind(a,551)),meta:{title:"标签: Spring",index:!1}}],["/tag/springboot/",{loader:()=>a.e(1159).then(a.bind(a,3821)),meta:{title:"标签: SpringBoot",index:!1}}],["/tag/springcloud/",{loader:()=>a.e(6308).then(a.bind(a,4154)),meta:{title:"标签: SpringCloud",index:!1}}],["/tag/springmvc/",{loader:()=>a.e(3665).then(a.bind(a,4124)),meta:{title:"标签: SpringMvc",index:!1}}],["/tag/mysql/",{loader:()=>a.e(2996).then(a.bind(a,7802)),meta:{title:"标签: mysql",index:!1}}],["/tag/zookeeper/",{loader:()=>a.e(2188).then(a.bind(a,3111)),meta:{title:"标签: zookeeper",index:!1}}],["/tag/%E5%A4%9A%E7%BA%BF%E7%A8%8B/",{loader:()=>a.e(8042).then(a.bind(a,38)),meta:{title:"标签: 多线程",index:!1}}],["/tag/%E5%B7%A5%E4%BD%9C%E6%B5%81/",{loader:()=>a.e(642).then(a.bind(a,2264)),meta:{title:"标签: 工作流",index:!1}}],["/tag/%E5%B7%A5%E5%85%B7/",{loader:()=>a.e(4522).then(a.bind(a,4182)),meta:{title:"标签: 工具",index:!1}}],["/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{loader:()=>a.e(7055).then(a.bind(a,1178)),meta:{title:"标签: 设计模式",index:!1}}],["/article/",{loader:()=>a.e(7511).then(a.bind(a,2772)),meta:{title:"文章",index:!1}}],["/star/",{loader:()=>a.e(7199).then(a.bind(a,353)),meta:{title:"星标",index:!1}}],["/timeline/",{loader:()=>a.e(5464).then(a.bind(a,4695)),meta:{title:"时间轴",index:!1}}]])},8761:(i,s,a)=>{a.d(s,{U:()=>n});const n=JSON.parse('{"base":"/","lang":"zh-CN","title":"Mr.Zyh","description":"Zyh的博客","head":[["link",{"rel":"icon","href":"http://zouyh.top/favicon.png"}]],"locales":{}}')}},i=>{i.O(0,[4283,3836],()=>i(i.s=8731)),i.O()}]);