"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[8870],{247:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>t});var e=a(641);const n={},l=(0,a(6262).A)(n,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h3 id="一-事务" tabindex="-1"><a class="header-anchor" href="#一-事务"><span>一，事务</span></a></h3><h4 id="_1-1事务介绍" tabindex="-1"><a class="header-anchor" href="#_1-1事务介绍"><span>1.1事务介绍</span></a></h4><p>​ 1，事务就是由单独单元的一个或多个sql语句组成，在这个单元中，每个sql语句都是相互依赖的。而整个单独单元是作为一个不可分割的整体存在，如果单元中某条sql语句一旦执行失败或者产生错误，那么整个单元将会回滚。所有受到影响的数据将返回到事务开始之前的状态，但是如果单元中的所有sql语句都执行成功的话，那么该事务也就被顺利执行。</p><p>​ 2，往通俗的讲就是，事务就是一个不可分割整体，里面的内容要么都执行成功，要么都不成功。不可能存在部分执行成功而部分执行不成功的情况。</p><p>​ 3，的数据都是通过各种不同技术的存储引擎来引导存储的，不同的存储引擎，都有各自的特点。在mysql中，常见的存储引擎有innodb、myisam，memory等。其中innodb支持事务(transaction)，而myisam，memory等不支持事务。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 查看mysql支持的存储引擎</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">show engines;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2事务的acid" tabindex="-1"><a class="header-anchor" href="#_1-2事务的acid"><span>1.2事务的ACID</span></a></h4><ul><li>原子性（Atomicity）：指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</li><li>一致性（Consistency）：事务必须使数据库从一个一致状态变换到另外一个一致状态。</li><li>隔离性（Isolation）：一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</li><li>持久性（Durability）：一个事务一旦提交成功，它对数据库中数据的改变将是永久性的，接下来的其他操作或故障不应对其有任何影响。</li></ul><h4 id="_1-3事务的分类" tabindex="-1"><a class="header-anchor" href="#_1-3事务的分类"><span>1.3事务的分类</span></a></h4><p>事务分为隐式事务和显式事务两种：</p><ul><li>隐式事务：执行的DML语句（insert、update、delete）就是隐式事务，隐式事务不需要我们手动开启事务和结束事务。</li><li>显示事务：显示事务事务需要我们手动开启事务和结束事务；</li></ul><p>显示事务的语法格式：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 开启事务 </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 第一种</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> autocommit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 第二种</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">start TRANSACTION</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 结束事务</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 第一种：提交</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 第二种：回滚</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">rollback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4事务并发问题" tabindex="-1"><a class="header-anchor" href="#_1-4事务并发问题"><span>1.4事务并发问题</span></a></h4><p>原因：同时运行多个事务，当这些事务访问<strong>数据库中相同数据</strong>时，如果没有采取必要的隔离机制，会产生各种<strong>并发问题</strong>；</p><ul><li>读-读问题：读读并发不存在问题。</li><li>写-写问题：写写会产生脏写问题，两个事务没提交的状况下，都修改统一条数据，结果一个事务回滚了，把另外一个事务修改的值也撤销了，所谓脏写就是两个事务没提交状态下修改同一个值。</li><li>读-写/写-读：写读或读写会造成脏读、幻读、不可重复读的问题。 <ul><li>脏读：事务B读到事务A修改后并未提交的数据；</li><li>不可重复读：事务A多次查询得到的结果不一致</li><li>幻读：B插入一条数据，A在插入主键相同数据数据，会报主键重复的错误。</li></ul></li></ul><blockquote><p>注意区分：脏读针对更新数据，幻读针对插入数据。</p></blockquote><h4 id="_1-5事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#_1-5事务的隔离级别"><span>1.5事务的隔离级别</span></a></h4><p>​ 为了避免出现事务的各种并发问题，我们就必然要采取一些手段，对于写读或读写会造成脏读、幻读、不可重复读的问题，可以通过设置数据库隔离级别方式解决，mysql数据库系统提供了四种事务的隔离级别：</p><table><thead><tr><th>事务隔离级别</th><th>是否可以解决脏读</th><th>是否可以解决不可重复读</th><th>是否可以解决幻读</th></tr></thead><tbody><tr><td>读未提交（read uncommitted）</td><td>否</td><td>否</td><td>否</td></tr><tr><td>读已提交（read committed）</td><td>是</td><td>否</td><td>否</td></tr><tr><td>可重复读（repeatable read）</td><td>是</td><td>是</td><td>否</td></tr><tr><td>串行化（serializable）</td><td>是</td><td>是</td><td>是</td></tr></tbody></table><blockquote><p>MySQL事务隔离级别默认是可重复读</p></blockquote><p>设置事务隔离级别：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 查看当前的事务隔离级别通过 tx_isolation变量;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @@tx_isolation;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">在mysql8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0之后</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">，用 transaction_isolation变量代替;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @@transaction_isolation;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#设置当前mysql连接的隔离级别:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> session</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> transaction</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> isolation</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> level</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> read</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uncommitted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> session</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> transaction</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> isolation</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> level</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> read</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> committed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> session</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> transaction</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> isolation</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> level</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> repeatable</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> session</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> transaction</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> isolation</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> level</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> serializable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#设置数据库系统的全局的隔离级别:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> global</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> transaction</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> isolation</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> level</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> read</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uncommitted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-5-1读未提交" tabindex="-1"><a class="header-anchor" href="#_1-5-1读未提交"><span>1.5.1读未提交</span></a></h5><figure><img src="http://img.zouyh.top/article-img/20240917135006171.png" alt="image-20230112172444522" tabindex="0" loading="lazy"><figcaption>image-20230112172444522</figcaption></figure><p>存在脏读：事务B在第⑤步读到事务A在第④步修改后并未提交的数据产生了脏读。</p><blockquote><p>InnoDB对于写操作操作而言，会添加写锁的，而读操作，不加会添加任何锁，就会造成上面的脏读。</p></blockquote><h5 id="_1-5-2读已提交" tabindex="-1"><a class="header-anchor" href="#_1-5-2读已提交"><span>1.5.2读已提交</span></a></h5><figure><img src="http://img.zouyh.top/article-img/20240917135007172.png" alt="image-20230112172825892" tabindex="0" loading="lazy"><figcaption>image-20230112172825892</figcaption></figure><p>解决脏读：事务B在第⑤步没有读到事务A在第④步修改后并未提交的数据，解决脏读。</p><p>存在不可重复读：在事务B还未结束事务的时候，在执行第⑤步和第⑦步中执行同一条查询sql，得到的结果不一致。</p><blockquote><p>①，InnoDB通过MVCC做到读写不阻塞，不仅解决了读写性能问题，而且避免了类似脏读这样的问题。</p><p>②，在读已提交的隔离级别下，MVCC生成的readview每次执行都会更新，所以会产生不可重复读问题。</p></blockquote><h5 id="_1-5-3可重复读" tabindex="-1"><a class="header-anchor" href="#_1-5-3可重复读"><span>1.5.3可重复读</span></a></h5><figure><img src="http://img.zouyh.top/article-img/20240917135008174.png" alt="image-20230112173055860" tabindex="0" loading="lazy"><figcaption>image-20230112173055860</figcaption></figure><p>解决脏读：事务B在第⑤步没有读到事务A在第④步修改后并未提交的数据，解决脏读。</p><p>解决不可重复读：在事务B还未结束事务的时候，在执行第⑤步和第⑦步中执行同一条查询sql，得到的结果一致。</p><p>存在幻读：在事务B还未结束事务的时候，在执行⑦步没有查到id为2的数据，可以插入，但是执行第⑧步的时候报错主键重复，明明没有确报主键重复就像产生幻觉一样。</p><blockquote><p>①，InnoDB通过MVCC做到读写不阻塞，不仅解决了读写性能问题，而且避免了类似脏读这样的问题。</p><p>②，在可重复读的隔离级别下，MVCC生成的readview每次不会更新，所以不会产生不可重复读问题。</p></blockquote><blockquote><p>可重复读可以防止部分幻读，为什么是部分防止幻读，而不是完全防止？如果事务A和事务B都未提交事务，事务A insert(第④步)了一条数据并提交，事务B（第⑤和第⑦）再次查询，虽然读取的还是undo中的旧版本数据(防止了部分幻读)，但是事务B中执行insert(第⑧步)还是会报错存在幻读的。</p></blockquote><h5 id="_1-5-4-串行化" tabindex="-1"><a class="header-anchor" href="#_1-5-4-串行化"><span>1.5.4 串行化</span></a></h5><figure><img src="http://img.zouyh.top/article-img/20240917135006169.png" alt="image-20230111171232972" tabindex="0" loading="lazy"><figcaption>image-20230111171232972</figcaption></figure><p>​ 解决脏读，不可重复读和幻读：事务B未结束事务时，事务A进行写操作时，会进入阻塞状态，不可以修改数据，即存在未结束的事务就能进行写操作，只能进行读操作，读读并发不存在问题。</p><blockquote><p>串行化的实现是通过间隙锁的方式。</p></blockquote><h4 id="_1-6事务补充" tabindex="-1"><a class="header-anchor" href="#_1-6事务补充"><span>1.6事务补充</span></a></h4><h5 id="_1-6-1事务的隔离级别能解决写写问题吗" tabindex="-1"><a class="header-anchor" href="#_1-6-1事务的隔离级别能解决写写问题吗"><span>1.6.1事务的隔离级别能解决写写问题吗？</span></a></h5><figure><img src="http://img.zouyh.top/article-img/20240917135006170.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>​ mysql事务隔离级别不管是什么都能解决脏写问题，因为在两个事务没提交的状况下，只有一个事务能修改的值，另一个事务如果修改同一个值会进入阻塞状态，所以不会存在两个事务没提交状态下修改同一个值的情况。</p><h5 id="_1-6-2事务的保存点" tabindex="-1"><a class="header-anchor" href="#_1-6-2事务的保存点"><span>1.6.2事务的保存点</span></a></h5><p>事务保存点的使用格式：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 开启事务</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> autocommit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 第一次写操作</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 设置保存点,xxx为保存点的名字,名字随便起</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">savepoint xxx;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 第二次写操作</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 回滚到xxx保存点处，产生的效果第二次操作会回滚。</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">rollback</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> xxx;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果演示：</p><img src="http://img.zouyh.top/article-img/20240917135007173.png" alt="image-20230112104356216" style="zoom:50%;">',54)]))}]]),t=JSON.parse('{"path":"/blog/mysql/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1.html","title":"mysql的事务","lang":"zh-CN","frontmatter":{"icon":"document","title":"mysql的事务","author":"Ms.Zyh","date":"2022-05-24T00:00:00.000Z","category":["mysql"],"tag":["偏僻","mysql"],"sticky":false,"star":false,"description":"一，事务 1.1事务介绍 ​ 1，事务就是由单独单元的一个或多个sql语句组成，在这个单元中，每个sql语句都是相互依赖的。而整个单独单元是作为一个不可分割的整体存在，如果单元中某条sql语句一旦执行失败或者产生错误，那么整个单元将会回滚。所有受到影响的数据将返回到事务开始之前的状态，但是如果单元中的所有sql语句都执行成功的话，那么该事务也就被顺利执...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql的事务\\",\\"image\\":[\\"http://img.zouyh.top/article-img/20240917135006171.png\\",\\"http://img.zouyh.top/article-img/20240917135007172.png\\",\\"http://img.zouyh.top/article-img/20240917135008174.png\\",\\"http://img.zouyh.top/article-img/20240917135006169.png\\",\\"http://img.zouyh.top/article-img/20240917135006170.png\\"],\\"datePublished\\":\\"2022-05-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-23T07:50:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ms.Zyh\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/mysql/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"Mr.Zyh"}],["meta",{"property":"og:title","content":"mysql的事务"}],["meta",{"property":"og:description","content":"一，事务 1.1事务介绍 ​ 1，事务就是由单独单元的一个或多个sql语句组成，在这个单元中，每个sql语句都是相互依赖的。而整个单独单元是作为一个不可分割的整体存在，如果单元中某条sql语句一旦执行失败或者产生错误，那么整个单元将会回滚。所有受到影响的数据将返回到事务开始之前的状态，但是如果单元中的所有sql语句都执行成功的话，那么该事务也就被顺利执..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://img.zouyh.top/article-img/20240917135006171.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-23T07:50:09.000Z"}],["meta",{"property":"article:author","content":"Ms.Zyh"}],["meta",{"property":"article:tag","content":"mysql"}],["meta",{"property":"article:tag","content":"偏僻"}],["meta",{"property":"article:published_time","content":"2022-05-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-23T07:50:09.000Z"}]]},"git":{"createdTime":1755935409000,"updatedTime":1755935409000,"contributors":[{"name":"zyh1020","username":"zyh1020","email":"898362059@qq.pcom","commits":1,"url":"https://github.com/zyh1020"}]},"readingTime":{"minutes":7.06,"words":2117},"filePathRelative":"blog/mysql/mysql的事务.md","excerpt":"<h3>一，事务</h3>\\n<h4>1.1事务介绍</h4>\\n<p>​\\t1，事务就是由单独单元的一个或多个sql语句组成，在这个单元中，每个sql语句都是相互依赖的。而整个单独单元是作为一个不可分割的整体存在，如果单元中某条sql语句一旦执行失败或者产生错误，那么整个单元将会回滚。所有受到影响的数据将返回到事务开始之前的状态，但是如果单元中的所有sql语句都执行成功的话，那么该事务也就被顺利执行。</p>\\n<p>​\\t2，往通俗的讲就是，事务就是一个不可分割整体，里面的内容要么都执行成功，要么都不成功。不可能存在部分执行成功而部分执行不成功的情况。</p>\\n<p>​\\t3，的数据都是通过各种不同技术的存储引擎来引导存储的，不同的存储引擎，都有各自的特点。在mysql中，常见的存储引擎有innodb、myisam，memory等。其中innodb支持事务(transaction)，而myisam，memory等不支持事务。</p>","autoDesc":true}')}}]);