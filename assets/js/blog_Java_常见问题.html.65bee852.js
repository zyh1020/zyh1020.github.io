"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[8363],{8140:(e,a,t)=>{t.r(a),t.d(a,{comp:()=>i,data:()=>o});var s=t(641);const n={},i=(0,t(6262).A)(n,[["render",function(e,a){return(0,s.uX)(),(0,s.CE)("div",null,a[0]||(a[0]=[(0,s.Fv)('<h3 id="一-fastjson反序列化和lombock注解" tabindex="-1"><a class="header-anchor" href="#一-fastjson反序列化和lombock注解"><span>一，FastJson反序列化和lombock注解</span></a></h3><h4 id="_1-报错信息" tabindex="-1"><a class="header-anchor" href="#_1-报错信息"><span>1，报错信息：</span></a></h4><p><code>com.alibaba.fastjson.JSONException: default constructor not found</code></p><h4 id="_2-问题描述" tabindex="-1"><a class="header-anchor" href="#_2-问题描述"><span>2，问题描述：</span></a></h4><p>lombock的@Builder注解会自动生成全参构造，从而导致默认的无参数构造丢失，如果此时结合JSON的反序列化<code>JSON.parseObject(jsonString,calss);</code>方法就会报错。</p><h4 id="_3-解决方式" tabindex="-1"><a class="header-anchor" href="#_3-解决方式"><span>3，解决方式：</span></a></h4><p>使用@Builder注解时，同时添加无参和有参构造</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Builder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">NoArgsConstructor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                                                  </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">AllArgsConstructor</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-ngxin上传文件报错413-request-entity-too-large" tabindex="-1"><a class="header-anchor" href="#二-ngxin上传文件报错413-request-entity-too-large"><span>二，ngxin上传文件报错413 Request Entity Too Large</span></a></h3><h4 id="_1-报错信息-1" tabindex="-1"><a class="header-anchor" href="#_1-报错信息-1"><span>1，报错信息：</span></a></h4><p><code>413 Request Entity Too Large</code></p><h4 id="_2-问题描述-1" tabindex="-1"><a class="header-anchor" href="#_2-问题描述-1"><span>2，问题描述：</span></a></h4><p>上传小文件没得问题，上传大文件就会报错。</p><h4 id="_3-解决方式-1" tabindex="-1"><a class="header-anchor" href="#_3-解决方式-1"><span>3，解决方式：</span></a></h4><p>nginx主配置文件nginx.conf，一般在<code>/usr/local/nginx/conf/nginx.conf</code>这个位置,找到http{}段，修改或者添加：<code>client_max_body_size 2m;</code></p>',15)]))}]]),o=JSON.parse('{"path":"/blog/Java/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html","title":"常见问题","lang":"zh-CN","frontmatter":{"icon":"file-lines","title":"常见问题","author":"Ms.Zyh","date":"2023-03-22T00:00:00.000Z","category":["Java"],"tag":["必看","Java"],"sticky":false,"star":false,"description":"一，FastJson反序列化和lombock注解 1，报错信息： com.alibaba.fastjson.JSONException: default constructor not found 2，问题描述： lombock的@Builder注解会自动生成全参构造，从而导致默认的无参数构造丢失，如果此时结合JSON的反序列化JSON.parseOb...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-20T07:21:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ms.Zyh\\"}]}"],["meta",{"property":"og:url","content":"http://img.zouyh.top/blog/Java/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"Mr.Zyh"}],["meta",{"property":"og:title","content":"常见问题"}],["meta",{"property":"og:description","content":"一，FastJson反序列化和lombock注解 1，报错信息： com.alibaba.fastjson.JSONException: default constructor not found 2，问题描述： lombock的@Builder注解会自动生成全参构造，从而导致默认的无参数构造丢失，如果此时结合JSON的反序列化JSON.parseOb..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-20T07:21:23.000Z"}],["meta",{"property":"article:author","content":"Ms.Zyh"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"必看"}],["meta",{"property":"article:published_time","content":"2023-03-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-20T07:21:23.000Z"}]]},"git":{"createdTime":1755935409000,"updatedTime":1758352883000,"contributors":[{"name":"zyh1020","username":"zyh1020","email":"898362059@qq.pcom","commits":3,"url":"https://github.com/zyh1020"}]},"readingTime":{"minutes":0.67,"words":202},"filePathRelative":"blog/Java/常见问题.md","excerpt":"<h3>一，FastJson反序列化和lombock注解</h3>\\n<h4>1，报错信息：</h4>\\n<p><code>com.alibaba.fastjson.JSONException: default constructor not found</code></p>\\n<h4>2，问题描述：</h4>\\n<p>lombock的@Builder注解会自动生成全参构造，从而导致默认的无参数构造丢失，如果此时结合JSON的反序列化<code>JSON.parseObject(jsonString,calss);</code>方法就会报错。</p>\\n<h4>3，解决方式：</h4>\\n<p>使用@Builder注解时，同时添加无参和有参构造</p>","autoDesc":true}')}}]);