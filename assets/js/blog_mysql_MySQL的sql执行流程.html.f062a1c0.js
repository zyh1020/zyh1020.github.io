"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[5019],{7437:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>n,data:()=>t});var l=a(641);const e={},n=(0,a(6262).A)(e,[["render",function(s,i){return(0,l.uX)(),(0,l.CE)("div",null,i[0]||(i[0]=[(0,l.Fv)('<h3 id="一-mysql的sql执行流程" tabindex="-1"><a class="header-anchor" href="#一-mysql的sql执行流程"><span>一，MySQL的sql执行流程</span></a></h3><p>MySQL 可以分为 Server 层和存储引擎层两部分。</p><img src="http://img.zouyh.top/article-img/20240917135009178.jpg" alt="mysql" style="zoom:50%;"><p>server层的核心组件：</p><ol><li>连接器：负责管理连接和权限校验。</li><li>缓存：每次SQL查询时会先去缓存里面查询，缓存里面key为SQL，value为结果集。</li><li>分析器：对SQL语句进行语法分析和词法分析，方便后续执行。</li><li>优化器：选择最优的索引和语句执行计划生成。</li><li>执行器：使用引擎接口，返回查询对应的结果集。</li></ol><p>存储引擎层：</p><p>​ 存储引擎负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB它从 MySQL 5.5.5 版本开始成为了默认存储引擎。也就是说如果我们在create table时不指定表的存储引擎类型,默认会给你设置存储引擎为InnoDB</p><h4 id="_1-1-连接器" tabindex="-1"><a class="header-anchor" href="#_1-1-连接器"><span>1.1 连接器</span></a></h4><p>客户端要向mysql发起通信都必须先跟Server端建立通信连接，而建立连接的工作就是有连接器完成的。</p><p>连接命令：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mysql ‐h host</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[数据库地址]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ‐u </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[用户]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ‐p</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[密码]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ‐P</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[端口默认3306]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在完成经典的 TCP 握手后，连接器就要开始认证你的身份，通过判断你输入的用户名和密码：</p><ol><li><p>用户名或密码不对，你就会收到一个&quot;Access denied for user&quot;的错误，然后客户端程序结束执行。</p></li><li><p>用户名密码认证通过，连接器会为本次连接开辟一个会话空间，查询权限表当前用户拥有的权限保存在会话空间中，之后这个连接里面的权限判断逻辑，都将依赖于此时读到的权限，这就意味着，一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有重新建立的连接才会使用新的权限设置。</p></li></ol><p>用户的权限表在系统表空间的mysql的user表中：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 使用默认数据库</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mysql</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 查询user表</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 创建新用户 host：%表示所有 或者 localhost表示本地</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> USER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &#39;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">用户名</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&#39;@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;host&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> IDENTIFIED </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">BY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;密码&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 赋权限,%表示所有(host)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">grant</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> all privileges </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *.* </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;username&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;host&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 刷新数据库</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">flush privileges;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 5.7版本已经不再使用password来作为密码的字段了而改成了authentication_string,所以5.7版本先改列名，再设置用户名密码</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">alert </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">table</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user change authentication_string </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">password</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> varchar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 设置用户名密码</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> password</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">password</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;123456&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;root&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 查看当前用户的权限</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">show grants </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;host&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在 <code>show processlist</code>命令查看所有连接情况:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> show processlist;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">----+------+----------------+-------+---------+------+----------+------------------+</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| Id | User | Host           | db    | Command | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">State</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    | Info             |</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">----+------+----------------+-------+---------+------+----------+------------------+</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|  </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | localhost:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4943</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | mysql | Query   |    </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | starting | show processlist |</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">----+------+----------------+-------+---------+------+----------+------------------+</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> row</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sec)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>show processlist 的结果中的 Command 列显示为“Sleep”的就表示现在系统里面有一个空闲连接，客户端如果长时间不发送command到Server端，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。</p><p>查看wait_time通过<code>show global variables like &quot;wait_timeout&quot;;</code>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> show </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">global</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> variables </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;wait_timeout&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">---------------+-------+</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| Variable_name | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">---------------+-------+</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| wait_timeout  | </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">28800</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">---------------+-------+</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> row</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> warning (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sec)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改全局服务器关闭非交互连接之前等待活动的秒数通过<code>set global wait_timeout=28800; </code>:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> global</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> wait_timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">28800</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Query OK, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> rows</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> affected (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sec)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>开发当中我们大多数时候用的都是长连接,把连接放在连接池内进行管理，但是长连接有些时候会导致 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如 果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。 怎么解决这类问题呢？</p><p>1、定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重新建立连接。</p><p>2、如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 <code>mysql_reset_connection</code> 来重新初始化连接资源。这个过程不需要再重新建立连接和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</p><h4 id="_1-2-缓存" tabindex="-1"><a class="header-anchor" href="#_1-2-缓存"><span>1.2 缓存</span></a></h4><p>大多数情况查询缓存就是个鸡肋,所以在mysql8.0已经移除了查询缓存功能，mysql8.0以前通过设置my.cnf文件中query_cache_type 参数的值控制缓存：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-mysql"><span class="line"><span># query_cache_type有3个值 0（OFF）代表关闭查询缓存，1（ON）代表开启，2（DEMAND）代表当sql语句中有SQL_CACHE关键词时才使用缓存</span></span>\n<span class="line"><span>query_cache_type=2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用 SQL_CACHE 显式指定，像下 面这个语句一样：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SQL_CACHE * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ID </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看当前mysql实例是否开启缓存机制<code>show global variables like &quot;%query_cache_type%&quot;;</code> ：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-mysql"><span class="line"><span>mysql&gt; show global variables like &quot;%query_cache_type%&quot;;</span></span>\n<span class="line"><span>+------------------+-------+</span></span>\n<span class="line"><span>| Variable_name    | Value |</span></span>\n<span class="line"><span>+------------------+-------+</span></span>\n<span class="line"><span>| query_cache_type | DEMAND|</span></span>\n<span class="line"><span>+------------------+-------+</span></span>\n<span class="line"><span>1 row in set, 1 warning (0.00 sec)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>监控查询缓存的命中率<code> show status like&#39;%Qcache%&#39;;</code>:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> show </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">status</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;%Qcache%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-------------------------+---------+</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| Variable_name           | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   |</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-------------------------+---------+</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| Qcache_free_blocks      | </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       |</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| Qcache_free_memory      | </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1031872</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| Qcache_hits             | </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       |</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| Qcache_inserts          | </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       |</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| Qcache_lowmem_prunes    | </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       |</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| Qcache_not_cached       | </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       |</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| Qcache_queries_in_cache | </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       |</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| Qcache_total_blocks     | </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       |</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-------------------------+---------+</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> rows</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sec)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Qcache_free_blocks:表示查询缓存中目前还有多少剩余的blocks，如果该值显示较大，则说明查询缓存中的内存碎片 过多了，可能在一定的时间进行整理。</li><li>Qcache_free_memory:查询缓存的内存大小，通过这个参数可以很清晰的知道当前系统的查询内存是否够用，是多 了，还是不够用，DBA可以根据实际情况做出调整。</li><li>Qcache_hits:表示有多少次命中缓存。我们主要可以通过该值来验证我们的查询缓存的效果。数字越大，缓存效果越 理想。</li><li>Qcache_inserts: 表示多少次未命中然后插入，意思是新来的SQL请求在缓存中未找到，不得不执行查询处理，执行 查询处理后把结果insert到查询缓存中。这样的情况的次数，次数越多，表示查询缓存应用到的比较少，效果也就不理 想。当然系统刚启动后，查询缓存是空的，这很正常。</li><li>Qcache_lowmem_prunes:该参数记录有多少条查询因为内存不足而被移除出查询缓存。通过这个值，用户可以适当的 调整缓存大小。</li><li>Qcache_not_cached: 表示因为query_cache_type的设置而没有被缓存的查询数量。</li><li>Qcache_queries_in_cache:当前缓存中缓存的查询数量。</li><li>Qcache_total_blocks:当前缓存的block数量。</li></ul><h4 id="_1-3-分析器" tabindex="-1"><a class="header-anchor" href="#_1-3-分析器"><span>1.3 分析器</span></a></h4><p>语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法，如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒，比如下面这个语句 from 写成了 &quot;rom&quot;。</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-mysql"><span class="line"><span>mysql&gt; select * fro user where user=1;</span></span>\n<span class="line"><span>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;fro user where user=1&#39; at line 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>词法分析器分成6个主要步骤完成对sql语句的分析:</p><p>1、词法分析</p><p>2、语法分析</p><p>3、语义分析</p><p>4、构造执行树</p><p>5、生成执行计划</p><p>6、计划的执行</p><p>SQL语句的分析分为词法分析与语法分析，mysql的词法分析由MySQLLex[MySQL自己实现的]完成，语法分析由Bison生成，经过bison语法分析之后，会生成一个这样的语法树：（绿色代表关键字、灰色则代表需进一步拆分）</p><figure><img src="http://img.zouyh.top/article-img/20240917135008176.png" alt="image-20230129170116321" tabindex="0" loading="lazy"><figcaption>image-20230129170116321</figcaption></figure><p>至此我们分析器的工作任务也基本圆满了，关于语法树大家如果想要深入研究可以百度查询这里不过多赘述。</p><h4 id="_1-4-优化器" tabindex="-1"><a class="header-anchor" href="#_1-4-优化器"><span>1.4 优化器</span></a></h4><p>​ 其实优化器就是提高我们的执行效率，优化器会根据分析器的树状结构生成多种Sql排列组合，然后结合Mysql的查询算法选择查询效率最快的，比如是否有索引，多个索引如何搭配，多表关联的关联顺序以及那个表为主表等，在挑选出执行效率最佳的之后，会生成一份执行计划，然后由我们的执行器执行。</p><p>比如你执行下面这样的语句，这个语句是执行两个表的 join：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-mysql"><span class="line"><span>select * from test1 </span></span>\n<span class="line"><span>inner join test2 on test1.id = test2.id </span></span>\n<span class="line"><span>where test1.name=&#39;z&#39; and test2.name=&#39;s&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以先从表 test1 里面取出 name=z的记录的 ID 值，再根据 ID 值关联到表 test2，再判断 test2 里面 name的 值是否等于 s。</li><li>也可以先从表 test2 里面取出 name=s的记录的 ID 值，再根据 ID 值关联到 test1，再判断 test1 里面 name 的值是否等于 z。</li></ul><p>这两种执行方法的结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案，可以通过explain 进行索引分析。</p><h4 id="_1-5-执行器" tabindex="-1"><a class="header-anchor" href="#_1-5-执行器"><span>1.5 执行器</span></a></h4><blockquote><p>在看执行器之前如果不了解buffer pool，可以先看1.6buffer pool之后再执行器</p></blockquote><h5 id="_1-5-1-select语句执行流程" tabindex="-1"><a class="header-anchor" href="#_1-5-1-select语句执行流程"><span>1.5.1 select语句执行流程</span></a></h5><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>select * from user where id = 1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>假设用到主键索引，操作步骤如下：</p><ol><li>判断LRU列表存不存在对应的数据先看描述信息，描述信息上面有页的信息。如果存在，根据冷热LRU链表规则调整链表</li><li>如果不存在，准备从索引段中找到聚簇索引树的头节点，加载到buffer pool 中</li><li>查看Free链表是否存在空闲的页空间可以加载。如果存在，将页写入这个描述数据块对应的空闲缓存页中。把缓存页对应的描述数据块从 Free链表 中移除，表示该缓存页已被使用了。并加入到LRU链表中。</li><li>如果不存在，从LRU链表最后一个进行页面置换，先判断最后一个是不是在FLUS链表，需要先进行刷盘操作。然后进行页面置换。</li><li>最后根据页目录进行快速定位，对应的数据在哪一个页中，重复获取页到buffer pool 操作（Lru Free,Flush)，直到找到对应的数据页位置，然后加载到buffer pool 里面返回数据。<br><img src="http://img.zouyh.top/article-img/20240917135008175.png" alt="34354e260c65449eaf93487016ce6913" style="zoom:45%;"></li></ol><p>核心流程图如下：</p><img src="http://img.zouyh.top/article-img/20240917135010179.png" alt="1" style="zoom:45%;"><h5 id="_1-5-2insert-update-delete语句执行流程" tabindex="-1"><a class="header-anchor" href="#_1-5-2insert-update-delete语句执行流程"><span>1.5.2insert update delete语句执行流程</span></a></h5><figure><img src="http://img.zouyh.top/article-img/20240917135009177.png" alt="8" tabindex="0" loading="lazy"><figcaption>8</figcaption></figure><ol><li>判断LRU列表存不存在对应的数据先看描述信息，描述信息上面有页的信息。如果存在，将页进行修改，变成脏页根据冷热LRU链表规则调整链表</li><li>如果不存在，则判断这个insert 语句是否涉及到唯一性限制。如果存在，将索引页的数据加载到缓存中，判断是否有重复值，没有重复数据就插入数据，使得其变成脏页。</li><li>如果不存在，则将Insert插入步骤加入到change buffer。（change buffer存储的是SQL语句）</li><li>生成脏页的时候会产生三种日志 （bin log，redo log和undo log），其中修改缓存页的物理地址改变产生的redo log 和 undo log ，产生的redo log 都会写入到log buffer 里面，最后持久化到磁盘的redo log 表空间的log file，而undo log 则是持久化到undo log 表空间或者磁盘系统表空间的undo log 里面</li><li>脏页double write 机制</li></ol><img src="http://img.zouyh.top/article-img/20240917135010180.png" alt="b" style="zoom:50%;"><p>6.change buffer的修改也会产生对应的redo log，然后也会持久化到系统表空间的Chang buffer里面。</p><p>核心流程图如下：</p><figure><img src="http://img.zouyh.top/article-img/20240917135011181.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>参考链接：<a href="https://blog.csdn.net/Prior_SX/article/details/124482524" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/Prior_SX/article/details/124482524</a></p>',70)]))}]]),t=JSON.parse('{"path":"/blog/mysql/MySQL%E7%9A%84sql%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.html","title":"MySQL的sql执行流程","lang":"zh-CN","frontmatter":{"icon":"file-lines","title":"MySQL的sql执行流程","author":"Ms.Zyh","date":"2022-05-21T00:00:00.000Z","category":["mysql"],"tag":["进阶","mysql"],"sticky":false,"star":false,"description":"一，MySQL的sql执行流程 MySQL 可以分为 Server 层和存储引擎层两部分。 mysql server层的核心组件： 连接器：负责管理连接和权限校验。 缓存：每次SQL查询时会先去缓存里面查询，缓存里面key为SQL，value为结果集。 分析器：对SQL语句进行语法分析和词法分析，方便后续执行。 优化器：选择最优的索引和语句执行计划生成...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL的sql执行流程\\",\\"image\\":[\\"http://img.zouyh.top/article-img/20240917135008176.png\\",\\"http://img.zouyh.top/article-img/20240917135009177.png\\",\\"http://img.zouyh.top/article-img/20240917135011181.png\\"],\\"datePublished\\":\\"2022-05-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-06T08:18:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ms.Zyh\\"}]}"],["meta",{"property":"og:url","content":"http://img.zouyh.top/vuepress/blog/mysql/MySQL%E7%9A%84sql%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Mr.Zyh"}],["meta",{"property":"og:title","content":"MySQL的sql执行流程"}],["meta",{"property":"og:description","content":"一，MySQL的sql执行流程 MySQL 可以分为 Server 层和存储引擎层两部分。 mysql server层的核心组件： 连接器：负责管理连接和权限校验。 缓存：每次SQL查询时会先去缓存里面查询，缓存里面key为SQL，value为结果集。 分析器：对SQL语句进行语法分析和词法分析，方便后续执行。 优化器：选择最优的索引和语句执行计划生成..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://img.zouyh.top/article-img/20240917135008176.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-06T08:18:22.000Z"}],["meta",{"property":"article:author","content":"Ms.Zyh"}],["meta",{"property":"article:tag","content":"mysql"}],["meta",{"property":"article:tag","content":"进阶"}],["meta",{"property":"article:published_time","content":"2022-05-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-06T08:18:22.000Z"}]]},"git":{"createdTime":1755935409000,"updatedTime":1757146702000,"contributors":[{"name":"zyh1020","username":"zyh1020","email":"898362059@qq.pcom","commits":2,"url":"https://github.com/zyh1020"}]},"readingTime":{"minutes":10.65,"words":3196},"filePathRelative":"blog/mysql/MySQL的sql执行流程.md","excerpt":"<h3>一，MySQL的sql执行流程</h3>\\n<p>MySQL 可以分为 Server 层和存储引擎层两部分。</p>\\n<img src=\\"http://img.zouyh.top/article-img/20240917135009178.jpg\\" alt=\\"mysql\\" style=\\"zoom: 50%;\\">\\n<p>server层的核心组件：</p>\\n<ol>\\n<li>连接器：负责管理连接和权限校验。</li>\\n<li>缓存：每次SQL查询时会先去缓存里面查询，缓存里面key为SQL，value为结果集。</li>\\n<li>分析器：对SQL语句进行语法分析和词法分析，方便后续执行。</li>\\n<li>优化器：选择最优的索引和语句执行计划生成。</li>\\n<li>执行器：使用引擎接口，返回查询对应的结果集。</li>\\n</ol>","autoDesc":true}')}}]);