"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[2703],{2730:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>n});var t=a(641);const l={},e=(0,a(6262).A)(l,[["render",function(i,s){return(0,t.uX)(),(0,t.CE)("div",null,s[0]||(s[0]=[(0,t.Fv)('<h3 id="一-jvm基础调优工具" tabindex="-1"><a class="header-anchor" href="#一-jvm基础调优工具"><span>一，jvm基础调优工具</span></a></h3><h4 id="_1-1-jps" tabindex="-1"><a class="header-anchor" href="#_1-1-jps"><span>1.1 jps</span></a></h4><p>作用：</p><p>​ JVM Process Status Tool，显示虚拟机进程。</p><p>用法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>jps [-qmlvV]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>参数说明：</p><ul><li>-q：打印进程号</li><li>-l：打印进程号+启动类的全限定名</li><li>-m：打印进程号+启动类的 main 方法入参</li><li>-v：打印进程号+指定的虚拟机参数</li><li>-V：打印类名</li></ul><p>例子：<code>jps</code></p><figure><img src="http://img.zouyh.top/article-img/20240917135038256.png" alt="image-20230210114625646" tabindex="0" loading="lazy"><figcaption>image-20230210114625646</figcaption></figure><h4 id="_1-2-jstat" tabindex="-1"><a class="header-anchor" href="#_1-2-jstat"><span>1.2 jstat</span></a></h4><p>作用：</p><p>​ JVM statistics Monitoring，对Java虚拟机内存进行监控统计。</p><p>用法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>参数说明</p><ul><li>option：统计垃圾回收情况。</li><li>-t：显示时间戳列</li><li>-h：指定每隔多少行显示标题</li><li>-vmid：进程ID通过jps查看</li><li>-interval：每行检测结果输出的时间间隔</li><li>-count：检测的次数</li></ul><h5 id="_1-2-1-堆内存" tabindex="-1"><a class="header-anchor" href="#_1-2-1-堆内存"><span>1.2.1 堆内存</span></a></h5><p>案例1： <code>jstat -gccapacity 8384</code>，监控通过jps获取的进程号8384的堆内存统计值</p><figure><img src="http://img.zouyh.top/article-img/20240917135042270.png" alt="image-20230210113233529" tabindex="0" loading="lazy"><figcaption>image-20230210113233529</figcaption></figure><p>输出的指标说明：</p><ul><li>NGCMN：新生代最小容量</li><li>NGCMX：新生代最大容量</li><li>NGC：当前新生代容量</li><li>S0C：第一个Survivor区大小</li><li>S1C：第二个Survivor区大小</li><li>EC：Eden区的大小</li><li>OGCMN：老年代最小容量</li><li>OGCMX：老年代最大容量</li><li>OGC：当前老年代大小</li><li>OC: 当前老年代大小</li><li>MCMN: 最小元数据容量</li><li>MCMX：最大元数据容量</li><li>MC：当前元数据空间大小</li><li>CCSMN：最小压缩类空间大小</li><li>CCSMX：最大压缩类空间大小</li><li>CCSC：当前压缩类空间大小</li><li>YGC：年轻代gc次数</li><li>FGC：老年代GC次数</li></ul><p>案例2：堆内存统计<code>jstat -gc -h2 -t 8384 100 5</code>，监控通过jps获取的进程号8384的垃圾收集统计值，每隔100ms输出一行，总共输出5次，每输出2次需要重新输出标题:</p><figure><img src="http://img.zouyh.top/article-img/20240917135042267.png" alt="image-20230210114553113" tabindex="0" loading="lazy"><figcaption>image-20230210114553113</figcaption></figure><p>输出的指标说明：</p><ul><li>S0C: 第一个Survivor区的容量</li><li>S1C: 第二个Survivor区的容量</li><li>S0U: 第一个Survivor区已经使用的容量</li><li>S1U:第二个Survivor区已经使用的容量</li><li>EC: 新生代Eden区的容量</li><li>EU: 新生代Eden区已经使用的容量</li><li>OC: 老年代容量</li><li>OU:老年代已经使用的容量</li><li>MC: 方法区大小（元空间）</li><li>MU: 方法区已经使用的大小</li><li>CCSC:压缩指针占用空间</li><li>CCSU:压缩指针已经使用的空间</li><li>YGC: YoungGC已经发生的次数</li><li>YGCT: 这一次YoungGC耗时</li><li>FGC: Full GC发生的次数</li><li>FGCT: Full GC耗时</li><li>GCT: 总的GC耗时，等于YGCT+FGCT</li></ul><h5 id="_1-2-2-新生代内存" tabindex="-1"><a class="header-anchor" href="#_1-2-2-新生代内存"><span>1.2.2 新生代内存</span></a></h5><p>案例3：<code>jstat -gcnewcapacity 8384</code>，监控通过jps获取的进程号8384的新生代统计值</p><figure><img src="http://img.zouyh.top/article-img/20240917135036247.png" alt="image-20230210114236497" tabindex="0" loading="lazy"><figcaption>image-20230210114236497</figcaption></figure><p>输出的指标说明:</p><ul><li>NGCMN：新生代最小容量</li><li>NGCMX：新生代最大容量</li><li>NGC：当前新生代容量</li><li>S0CMX：Survivor 1区最大大小</li><li>S0C：当前Survivor 1区大小</li><li>S1CMX：Survivor 2区最大大小</li><li>S1C：当前Survivor 2区大小</li><li>ECMX：最大Eden区大小</li><li>EC：当前Eden区大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代回收次数</li></ul><p>案例4： <code>jstat -gcnew -h2 -t 8384 100 5</code>，监控通过jps获取的进程号8384的垃圾收集统计值，每隔100ms输出一行，总共输出5次，每输出2次需要重新输出标题:</p><figure><img src="http://img.zouyh.top/article-img/20240917135042269.png" alt="image-20230210114140059" tabindex="0" loading="lazy"><figcaption>image-20230210114140059</figcaption></figure><p>输出的指标说明</p><ul><li>S0C：第一个Survivor的大小</li><li>S1C：第二个Survivor的大小</li><li>S0U：第一个Survivor已使用大小</li><li>S1U：第二个Survivor已使用大小</li><li>TT: 对象在新生代存活的次数</li><li>MTT: 对象在新生代存活的最大次数</li><li>DSS: 期望的Survivor大小</li><li>EC：Eden区的大小</li><li>EU：Eden区的使用大小</li><li>YGC：年轻代垃圾回收次数</li><li>YGCT：年轻代垃圾回收消耗时间</li></ul><h5 id="_1-2-3-老年代内存" tabindex="-1"><a class="header-anchor" href="#_1-2-3-老年代内存"><span>1.2.3 老年代内存</span></a></h5><p>案例5：<code>jstat -gcoldcapacity</code>，监控通过jps获取的进程号8384的老年代统计值.</p><figure><img src="http://img.zouyh.top/article-img/20240917135038258.png" alt="image-20230210115214318" tabindex="0" loading="lazy"><figcaption>image-20230210115214318</figcaption></figure><p>输出的指标说明:</p><ul><li>OGCMN：老年代最小容量</li><li>OGCMX：老年代最大容量</li><li>OGC：当前老年代大小</li><li>OC：老年代大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul><p>案例6：<code>jstat -gcold -h2 -t 8384 100 5</code>，监控通过jps获取的进程号8384的垃圾收集统计值，每隔100ms输出一行，总共输出5次，每输出2次需要重新输出标题:</p><figure><img src="http://img.zouyh.top/article-img/20240917135035245.png" alt="image-20230210115333047" tabindex="0" loading="lazy"><figcaption>image-20230210115333047</figcaption></figure><p>输出的指标说明:</p><ul><li>MC：方法区大小</li><li>MU：方法区已使用大小</li><li>CCSC:压缩指针类空间大小</li><li>CCSU:压缩类空间已使用大小</li><li>OC：老年代大小</li><li>OU：老年代已使用大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间，新生代+老年代</li></ul><h5 id="_1-2-4-元空间" tabindex="-1"><a class="header-anchor" href="#_1-2-4-元空间"><span>1.2.4 元空间</span></a></h5><p>案例7：<code>jstat -gcmetacapacity 8384</code>，监控通过jps获取的进程号8384的老年代统计值.</p><figure><img src="http://img.zouyh.top/article-img/20240917135037251.png" alt="image-20230210115753776" tabindex="0" loading="lazy"><figcaption>image-20230210115753776</figcaption></figure><p>输出的指标说明:</p><ul><li>MCMN:最小元数据容量</li><li>MCMX：最大元数据容量</li><li>MC：当前元数据空间大小</li><li>CCSMN：最小指针压缩类空间大小</li><li>CCSMX：最大指针压缩类空间大小</li><li>CCSC：当前指针压缩类空间大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul><h5 id="_1-2-5-整体运行情况" tabindex="-1"><a class="header-anchor" href="#_1-2-5-整体运行情况"><span>1.2.5 整体运行情况</span></a></h5><p>案例7：<code>jstat -gcutil -h2 -t 8384 100 5</code>监控通过jps获取的进程号8384的垃圾收集统计值，每隔100ms输出一行，总共输出5次，每输出2次需要重新输出标题:</p><figure><img src="http://img.zouyh.top/article-img/20240917135044277.png" alt="image-20230210141413448" tabindex="0" loading="lazy"><figcaption>image-20230210141413448</figcaption></figure><p>输出的指标说明:</p><ul><li>S0：Survivor 1区当前使用比例</li><li>S1：Survivor 2区当前使用比例</li><li>E：Eden区使用比例</li><li>O：老年代使用比例</li><li>M：元数据区使用比例</li><li>CCS：指针压缩使用比例</li><li>YGC：年轻代垃圾回收次数</li><li>YGCT：年轻代垃圾回收消耗时间</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul><h4 id="_1-3-jinfo" tabindex="-1"><a class="header-anchor" href="#_1-3-jinfo"><span>1.3 jinfo</span></a></h4><p>作用：</p><p>​ JVM Configuration info，可以实时查看和实时修改虚拟机参数。</p><p>用法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>jinfo [option] &lt;pid&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>参数说明</p><ul><li><p>option：操作</p><ul><li>-flag 打印指定的VM参数的值</li><li>-flag [+|-] 启用或禁用指定的VM参数</li><li>-flag = 修改VM参数</li><li>-flags 打印VM参数（windos不支持）</li><li>-sysprops 打印Java系统配置 （windos不支持）</li></ul></li><li><p>pid：进程ID</p></li></ul><p>例子：</p><p>通过<code>jsp -v</code>获取进程id：</p><figure><img src="http://img.zouyh.top/article-img/20240917135042268.png" alt="image-20230210095257572" tabindex="0" loading="lazy"><figcaption>image-20230210095257572</figcaption></figure><p>然后打印获取到的进程id，是否使用G1垃圾收集器<code>jinfo -flag UseG1GC 15754</code>：</p><img src="http://img.zouyh.top/article-img/20240917135039259.png" alt="image-20230210095458158" style="zoom:67%;"><img src="http://img.zouyh.top/article-img/20240917135045279.png" alt="image-20230210095428854" style="zoom:67%;"><h4 id="_1-4-jstack" tabindex="-1"><a class="header-anchor" href="#_1-4-jstack"><span>1.4 jstack</span></a></h4><p>作用：</p><p>​ 生成Java虚拟机当前时刻的线程快照，方便定位线程长时间停顿的问题，比如死锁、死循环、长时间等待等。</p><p>用法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>jstack [-F] [-m] [-l] &lt;pid&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>参数说明</p><ul><li>-F：强制打印堆栈</li><li>-m：同时打印Java和本地方法的堆栈</li><li>-l：打印关于锁的附件信息</li><li>pid：进程ID</li></ul><p>案例检测死锁：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Test01</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tprivate</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lock1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tprivate</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lock2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tpublic</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t\tnew</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t\t\tsynchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lock1) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t\t\t\ttry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">\t\t\t\t\tSystem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;thread1 begin&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">\t\t\t\t\tThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t\t\t} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t\t\t}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lock2) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;thread1 end&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);\t</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">           }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t}).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t\tsynchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lock2) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t\t\ttry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">\t\t\t\tSystem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;thread2 begin&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);\t</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t\t} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t\t}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lock1) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;thread2 end&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t}).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">\t\tSystem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;main thread end&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后上方代码后，执行<code>jps</code>命令获取pId</p><figure><img src="http://img.zouyh.top/article-img/20240917135044275.png" alt="image-20230210110923610" tabindex="0" loading="lazy"><figcaption>image-20230210110923610</figcaption></figure><p>继续执行<code>jstack 18580</code>:</p><figure><img src="http://img.zouyh.top/article-img/20240917135043273.png" alt="image-20230210111114812" tabindex="0" loading="lazy"><figcaption>image-20230210111114812</figcaption></figure><p>上图解释</p><ul><li>线程名 ： &quot;Thread-1&quot;</li><li>优先级：prio=5</li><li>线程id：tid=0x000000001ad1b000</li><li>线程对应的本地线程标识nid：nid=0x4cb0：</li><li>线程状态： java.lang.Thread.State: BLOCKED</li></ul><p>继续看<code>jstack 18580</code>命令最后的输出：</p><figure><img src="http://img.zouyh.top/article-img/20240917135036248.png" alt="image-20230210111915504" tabindex="0" loading="lazy"><figcaption>image-20230210111915504</figcaption></figure><h4 id="_1-6-jmap" tabindex="-1"><a class="header-anchor" href="#_1-6-jmap"><span>1.6 jmap</span></a></h4><p>JVM Memory Map，用来查看实例个数以及占用内存大小；堆内存信息；生成堆栈dump文件。</p><p>用法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>jmap [option] &lt;pid&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>参数说明</p><ul><li><p>option：操作</p><ul><li>heap：打印Java堆摘要 (window不支持）</li><li>histo[:live]：打印java对象堆的直方图; 如果指定了“live”选项，则仅计算实时对象</li><li>dump：[live/format,file]生成dump快照</li></ul></li><li><p>pid：进程ID</p></li></ul><p>案例1：来查看内存信息，实例个数以及占用内存大小，<code>jmap -histo 8384</code>:</p><figure><img src="http://img.zouyh.top/article-img/20240917135040262.png" alt="image-20230210142642092" tabindex="0" loading="lazy"><figcaption>image-20230210142642092</figcaption></figure><p>输出的指标说明:</p><ul><li>num：序号</li><li>instances：实例数量</li><li>bytes：占用空间大小</li><li>class name：类名称</li></ul><p>案例2：查看堆内存信息<code>jmap -heap 14660</code>:</p><img src="http://img.zouyh.top/article-img/20240917135040263.png" alt="QQ截图20230210142947" style="zoom:67%;"><p>案例3：生成堆内存dump文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>jmap -dump:live,file=.\\heap_dump.hprof 8384</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="http://img.zouyh.top/article-img/20240917135037253.png" alt="image-20230210143635355" tabindex="0" loading="lazy"><figcaption>image-20230210143635355</figcaption></figure><p>也可以设置内存溢出自动导出dump文件，内存很大的时候，可能会导不出来，vm参数如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>‐XX:+HeapDumpOnOutOfMemoryError ‐XX:HeapDumpPath=F:\\heap_dump.hprof</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以用jvisualvm命令工具导入该dump文件分析.</p><h3 id="二-jvm可视化调优工具" tabindex="-1"><a class="header-anchor" href="#二-jvm可视化调优工具"><span>二，jvm可视化调优工具</span></a></h3><h4 id="_2-1-jconsole" tabindex="-1"><a class="header-anchor" href="#_2-1-jconsole"><span>2.1 jconsole</span></a></h4><p>​ JConsole是一个基于JMX的GUI工具，用于连接正在运行的JVM，它是Java自带的简单性能监控工具。下面以对tomcat的监控为例，带领大家熟悉JConsole这个工具。</p><p>在cmd窗口中输入<code>jconsole</code>:</p><img src="http://img.zouyh.top/article-img/20240917135037250.png" alt="image-20230210152811681" style="zoom:67%;"><p><strong>①，概览</strong></p><figure><img src="http://img.zouyh.top/article-img/20240917135036246.png" alt="image-20230210153040420" tabindex="0" loading="lazy"><figcaption>image-20230210153040420</figcaption></figure><ul><li>概要界面，主要显示堆内存使用情况、活动线程数、加载类数、CPU使用率四个参数的概要，可以通过下拉框来定制显示的时间范围</li><li>假如堆内存的图像一直在上升而没有下降的动作发生，则要怀疑是否内存泄露。健壮的项目由于GC的存在，所以它的上升和下降的幅度应该大抵相同</li><li>CPU的图像规律跟堆内存的大致相同</li></ul><p><strong>②，内存</strong></p><figure><img src="http://img.zouyh.top/article-img/20240917135038254.png" alt="image-20230210154131745" tabindex="0" loading="lazy"><figcaption>image-20230210154131745</figcaption></figure><ul><li>点击右上的执行GC按钮可以通知JVM进行垃圾回收。</li><li>GC 时间显示了垃圾回收的时间以及回收数，上面的是Young GC执行的时间和次数，下面的是Full GC执行的时间和次数</li><li>右下角的图案，Heap内存区包括：年轻代Eden Space、存活代Survivor Space和老年代Tenured Gen。Non-Heap内存区包括：代码缓存区Code Cache和持久代Perm Gen；可通过改变①中下拉框的值实现切换图形。</li></ul><p><strong>③，线程</strong></p><figure><img src="http://img.zouyh.top/article-img/20240917135044278.png" alt="image-20230210154420489" tabindex="0" loading="lazy"><figcaption>image-20230210154420489</figcaption></figure><ul><li>“峰值”表示最大的线程数</li><li>点击具体的线程之后，我们可以看到它的状态以及方法栈的详细调用情况</li><li>点击“检查死锁”可以检测是否有死锁</li></ul><p><strong>④，类</strong></p><figure><img src="http://img.zouyh.top/article-img/20240917135043271.png" alt="image-20230210154656875" tabindex="0" loading="lazy"><figcaption>image-20230210154656875</figcaption></figure><p><strong>⑤，VM概要</strong></p><figure><img src="http://img.zouyh.top/article-img/20240917135044276.png" alt="image-20230210154805864" tabindex="0" loading="lazy"><figcaption>image-20230210154805864</figcaption></figure><p><strong>⑥，MBean概要</strong></p><figure><img src="http://img.zouyh.top/article-img/20240917135043274.png" alt="image-20230210155037685" tabindex="0" loading="lazy"><figcaption>image-20230210155037685</figcaption></figure><p>操作显示该bean的所有方法，可以点击该按钮触发方法，但个人不推荐这么做，应该通过程序的统一入口来触发</p><h4 id="_2-2-jvisualvm" tabindex="-1"><a class="header-anchor" href="#_2-2-jvisualvm"><span>2.2 jvisualvm</span></a></h4><p>使用：在cmd窗口中输入<code>jvisualvm</code>:</p><p><strong>①，起始页</strong></p><figure><img src="http://img.zouyh.top/article-img/20240917135037252.png" alt="image-20230210155516735" tabindex="0" loading="lazy"><figcaption>image-20230210155516735</figcaption></figure><p>右侧可以看到本地线程列表，选择那个可以监测那个。</p><p><strong>②，概述</strong></p><figure><img src="http://img.zouyh.top/article-img/20240917135039260.png" alt="image-20230210155833201" tabindex="0" loading="lazy"><figcaption>image-20230210155833201</figcaption></figure><p>显示的是该服务器的启动和系统参数，可以通过与服务器的实际参数进行对比查看是否有内存溢出</p><p><strong>③，监控</strong></p><figure><img src="http://img.zouyh.top/article-img/20240917135045280.png" alt="image-20230210160001480" tabindex="0" loading="lazy"><figcaption>image-20230210160001480</figcaption></figure><p>显示的是当前系统的CPU、内存、类和线程的相关资源的使用情况。其中&quot;堆dump&quot;可以查看堆的详细状态，包括堆的概况，里面所有的类，还能点进具体的一个类查看这个类的状态。</p><p><strong>④，线程</strong></p><figure><img src="http://img.zouyh.top/article-img/20240917135035244.png" alt="image-20230210160114448" tabindex="0" loading="lazy"><figcaption>image-20230210160114448</figcaption></figure><p>能够显示线程的名称和运行的状态，在调试多线程时必不可少，而且可以点进一个线程查看这个线程的详细运行情况，也可以检测死锁。</p><p><strong>⑤，抽样器</strong></p><figure><img src="http://img.zouyh.top/article-img/20240917135038257.png" alt="image-20230210160256856" tabindex="0" loading="lazy"><figcaption>image-20230210160256856</figcaption></figure><figure><img src="http://img.zouyh.top/article-img/20240917135036249.png" alt="image-20230210160415960" tabindex="0" loading="lazy"><figcaption>image-20230210160415960</figcaption></figure><p>抽样器，可针对cpu和内存进行抽样监控，判断那个线程cup使用率高，那些类占用内存多。</p><p>补充：分析jmap生成的dump文件方式：选择文件 -&gt; 选择装入 -&gt; 选中文件确定即可。</p><figure><img src="http://img.zouyh.top/article-img/20240917135043272.png" alt="image-20230210160830148" tabindex="0" loading="lazy"><figcaption>image-20230210160830148</figcaption></figure><h3 id="三-第三方工具arthas" tabindex="-1"><a class="header-anchor" href="#三-第三方工具arthas"><span>三，第三方工具Arthas</span></a></h3><p>​ Arthas 是 Alibaba 在 2018 年 9 月开源的 Java 诊断工具。支持 JDK6+， 采用命令行交互模式，可以方便的定位和诊断线上程序运行问题。Arthas 官方文档十分详细，详见：<a href="https://arthas.gitee.io/" target="_blank" rel="noopener noreferrer">https://arthas.gitee.io/</a></p><p>Arthas使用</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 方式1：github下载arthas</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://alibaba.github.io/arthas/arthas‐boot.jar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 方式2：Gitee下载arthas</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://arthas.gitee.io/arthas‐boot.jar</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 方3：手动下载jar后，上传服务器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用java -jar运行即可，可以识别机器上所有Java进程：<img src="http://img.zouyh.top/article-img/20240917135039261.png" alt="image-20230210161945929" loading="lazy"></p><p>输入2，回车，进入进程信息操作：<img src="http://img.zouyh.top/article-img/20240917135041264.png" alt="image-20230210162103675" style="zoom:80%;"></p><p>输入<code>dashboard</code>可以查看整个进程的运行情况，线程、内存、GC、运行环境信息<img src="http://img.zouyh.top/article-img/20240917135038255.png" alt="image-20230210162210301" loading="lazy"></p><p>输入<code>thread</code>可以查看线程详细情况:<img src="http://img.zouyh.top/article-img/20240917135041265.png" alt="image-20230210162406096" loading="lazy"></p><p>输入 <code>jad</code>加类的全名可以反编译，这样可以方便我们查看线上代码是否是正确的版本<img src="http://img.zouyh.top/article-img/20240917135041266.png" alt="image-20230210162525401" loading="lazy"></p><p>更多命令使用可以用help命令查看，或查看文档：<a href="https://arthas.gitee.io/doc/" target="_blank" rel="noopener noreferrer">https://arthas.gitee.io/doc/</a></p>',153)]))}]]),n=JSON.parse('{"path":"/blog/Jvm/jvm%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7.html","title":"jvm调优工具","lang":"zh-CN","frontmatter":{"icon":"file-lines","title":"jvm调优工具","author":"Ms.Zyh","date":"2022-05-09T00:00:00.000Z","category":["Jvm"],"tag":["必看","Jvm"],"sticky":false,"star":false,"description":"一，jvm基础调优工具 1.1 jps 作用： ​ JVM Process Status Tool，显示虚拟机进程。 用法： 参数说明： -q：打印进程号 -l：打印进程号+启动类的全限定名 -m：打印进程号+启动类的 main 方法入参 -v：打印进程号+指定的虚拟机参数 -V：打印类名 例子：jps image-20230210114625646i...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"jvm调优工具\\",\\"image\\":[\\"http://img.zouyh.top/article-img/20240917135038256.png\\",\\"http://img.zouyh.top/article-img/20240917135042270.png\\",\\"http://img.zouyh.top/article-img/20240917135042267.png\\",\\"http://img.zouyh.top/article-img/20240917135036247.png\\",\\"http://img.zouyh.top/article-img/20240917135042269.png\\",\\"http://img.zouyh.top/article-img/20240917135038258.png\\",\\"http://img.zouyh.top/article-img/20240917135035245.png\\",\\"http://img.zouyh.top/article-img/20240917135037251.png\\",\\"http://img.zouyh.top/article-img/20240917135044277.png\\",\\"http://img.zouyh.top/article-img/20240917135042268.png\\",\\"http://img.zouyh.top/article-img/20240917135044275.png\\",\\"http://img.zouyh.top/article-img/20240917135043273.png\\",\\"http://img.zouyh.top/article-img/20240917135036248.png\\",\\"http://img.zouyh.top/article-img/20240917135040262.png\\",\\"http://img.zouyh.top/article-img/20240917135037253.png\\",\\"http://img.zouyh.top/article-img/20240917135036246.png\\",\\"http://img.zouyh.top/article-img/20240917135038254.png\\",\\"http://img.zouyh.top/article-img/20240917135044278.png\\",\\"http://img.zouyh.top/article-img/20240917135043271.png\\",\\"http://img.zouyh.top/article-img/20240917135044276.png\\",\\"http://img.zouyh.top/article-img/20240917135043274.png\\",\\"http://img.zouyh.top/article-img/20240917135037252.png\\",\\"http://img.zouyh.top/article-img/20240917135039260.png\\",\\"http://img.zouyh.top/article-img/20240917135045280.png\\",\\"http://img.zouyh.top/article-img/20240917135035244.png\\",\\"http://img.zouyh.top/article-img/20240917135038257.png\\",\\"http://img.zouyh.top/article-img/20240917135036249.png\\",\\"http://img.zouyh.top/article-img/20240917135043272.png\\",\\"http://img.zouyh.top/article-img/20240917135039261.png\\",\\"http://img.zouyh.top/article-img/20240917135038255.png\\",\\"http://img.zouyh.top/article-img/20240917135041265.png\\",\\"http://img.zouyh.top/article-img/20240917135041266.png\\"],\\"datePublished\\":\\"2022-05-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-06T08:18:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ms.Zyh\\"}]}"],["meta",{"property":"og:url","content":"http://img.zouyh.top/blog/Jvm/jvm%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7.html"}],["meta",{"property":"og:site_name","content":"Mr.Zyh"}],["meta",{"property":"og:title","content":"jvm调优工具"}],["meta",{"property":"og:description","content":"一，jvm基础调优工具 1.1 jps 作用： ​ JVM Process Status Tool，显示虚拟机进程。 用法： 参数说明： -q：打印进程号 -l：打印进程号+启动类的全限定名 -m：打印进程号+启动类的 main 方法入参 -v：打印进程号+指定的虚拟机参数 -V：打印类名 例子：jps image-20230210114625646i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://img.zouyh.top/article-img/20240917135038256.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-06T08:18:22.000Z"}],["meta",{"property":"article:author","content":"Ms.Zyh"}],["meta",{"property":"article:tag","content":"Jvm"}],["meta",{"property":"article:tag","content":"必看"}],["meta",{"property":"article:published_time","content":"2022-05-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-06T08:18:22.000Z"}]]},"git":{"createdTime":1755935409000,"updatedTime":1757146702000,"contributors":[{"name":"zyh1020","username":"zyh1020","email":"898362059@qq.pcom","commits":2,"url":"https://github.com/zyh1020"}]},"readingTime":{"minutes":11.14,"words":3342},"filePathRelative":"blog/Jvm/jvm调优工具.md","excerpt":"<h3>一，jvm基础调优工具</h3>\\n<h4>1.1 jps</h4>\\n<p>作用：</p>\\n<p>​\\tJVM Process Status Tool，显示虚拟机进程。</p>\\n<p>用法：</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-\\"><span class=\\"line\\"><span>jps [-qmlvV]</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);