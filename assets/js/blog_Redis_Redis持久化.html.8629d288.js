"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[6470],{3036:(i,e,s)=>{s.r(e),s.d(e,{comp:()=>n,data:()=>d});var t=s(641);const a={},n=(0,s(6262).A)(a,[["render",function(i,e){return(0,t.uX)(),(0,t.CE)("div",null,e[0]||(e[0]=[(0,t.Fv)('<p>Redis 提供了2个不同形式的持久化方式，RDB和AOF。</p><h3 id="一-rdb" tabindex="-1"><a class="header-anchor" href="#一-rdb"><span>一，RDB</span></a></h3><blockquote><p>RDB是指在指定的时间间隔内将内存中的数据集快照写入磁盘， 也就是快照的方式，它恢复时是将快照文件直接读到内存里。</p></blockquote><h4 id="_1-1-配置" tabindex="-1"><a class="header-anchor" href="#_1-1-配置"><span>1.1 配置</span></a></h4><p>RDB持久化方式默认是开启的，下面介绍的是RDB持久化方式的其它配置，需要编辑<code>redis.conf</code>文件：</p><p>①，配置时间间隔：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 含义：在900秒内如果有1个key发生了改变就保存数据</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">save 900 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>②，配置快照文件存储目录，查找dir</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 默认是redis.conf的所在目录</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">dir ./</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>③，配置快照文件存储名称，查找dump.rdb文件</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 默认名称是dump.rdb</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">dbfilename dump.rdb</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行<code>flushall</code>命令，也会产生<code>dump.rdb</code>文件，但里面是空的，无意义.</p><p>④,其它默认配置：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 当Redis无法写入磁盘的话，直接关掉Redis的写操，推荐yes</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">stop-writes-on-bgsave-erro yes</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 压缩文件，redis会采用LZF算法进行压缩</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">rdbcompression yes</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 检查完整性，可以让redis使用CRC64算法来进行数据校验</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">rdbchecksum yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-命令-save-和-bgsave" tabindex="-1"><a class="header-anchor" href="#_1-2-命令-save-和-bgsave"><span>1.2 命令 save 和 bgsave</span></a></h4><p>手动执行<code>save</code>和<code>bgsave</code>命令可以直接生成RDB快照文件，不需要满足redis.conf文件中配置的时间间隔。</p><p><code>save</code>与<code>bgsave</code>对比：</p><table><thead><tr><th><strong>命令</strong></th><th><strong>save</strong></th><th><strong>bgsave</strong></th></tr></thead><tbody><tr><td>IO类型</td><td>同步</td><td>异步</td></tr><tr><td>是否阻塞redis其它命令</td><td>是</td><td>否</td></tr><tr><td>复杂度</td><td>O(n)</td><td>O(n)</td></tr><tr><td>优点</td><td>不会消耗额外内存</td><td>不阻塞客户端命令</td></tr><tr><td>缺点</td><td>阻塞客户端命令</td><td>需要fork子进程，消耗内存</td></tr></tbody></table><h4 id="_1-3-原理" tabindex="-1"><a class="header-anchor" href="#_1-3-原理"><span>1.3 原理</span></a></h4><p>​ Redis会根据主线程Fork一个子进程来进行持久化。在子进程持久化过程中，子进程会读取主线程的内存数据，并把它们写入 RDB 文件。此时，如果主线程对这些数据也都是读操作，那么，主线程和 <code>bgsave</code> 子进程相互不影响。但是，如果主线程要修改一块数据，那么，这块数据就会被复制一份，生成该数据的副本，然后<code>bgsave</code>子进程会把这个副本数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据。</p><ul><li>Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</li><li>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了写时复制技术</li><li>一般情况父进程和子进程会共用同一段物理内存，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</li></ul><h3 id="二-aof" tabindex="-1"><a class="header-anchor" href="#二-aof"><span>二，AOF</span></a></h3><p>​ 以日志的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来(读操作不记录)， 只许追加文件但不可以改写文件，它恢复时是日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><h4 id="_2-1-配置" tabindex="-1"><a class="header-anchor" href="#_2-1-配置"><span>2.1 配置</span></a></h4><p>①，AOF默认是不开启的，需要修改<code>redis.conf</code>文件:</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># appendonly yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>②，配置同步频率：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">appendfsync everysec</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>appendfsync</code>有三个选项：</p><ul><li><code>appendfsync always</code>：每次有新命令追加到 AOF 文件时就执行一次 fsync ，非常慢，但是非常安全。</li><li><code>appendfsync everysec</code>：每秒 fsync 一次，足够快，并且在故障时只会丢失1 秒钟的数据。</li><li><code>appendfsync no</code>：从不主动 fsync ，将数据交给操作系统来处理。更快，也更不安全的选择。</li></ul><p>③，配置文件名称，默认为<code> appendonly.aof</code></p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">appendfilename appendonly.aof</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>④，配置文件路径，AOF文件的保存路径和RDB的路径使用的是同样的配置：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 默认是redis.conf的所在目录</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">dir ./</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-重写机制" tabindex="-1"><a class="header-anchor" href="#_2-2-重写机制"><span>2.2 重写机制</span></a></h4><p>​ Redis 在长期运行的过程中，aof 文件会越变越长。如果机器宕机重启，“重演”整个 aof 文件会非常耗时，导致长时间 Redis 无法对外提供服务。因此就需要对 aof 文件做一下“瘦身”运动。</p><p>方式一：手动触发重写机制</p><p>手动执行<code>bgrewriteaof</code>命令，如下所示：</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cmd"><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">127.0.0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6379</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> BGREWRITEAOF</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Background append only file rewriting started</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：自动触发重写机制</p><p>在<code>redis-config</code>文件中，提供如下两个配置可以控制AOF自动重写频率：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># aof文件至少要达到64M才会自动重写，文件太小恢复速度本来就很快，重写的意义不大</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">auto-aof-rewrite-min-size 64mb  </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># aof文件自上一次重写后文件大小增长了100%则再次触发重写</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">auto-aof-rewrite-percentage 100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>手动触发或自动触发的方式，服务器会生成一个新的 aof 文件，该文件具有以下特点：</p><ul><li>新的 aof 文件记录的数据库数据和原 aof 文件记录的数据库数据完全一致；</li><li>新的 aof 文件会使用尽可能少的命令来记录数据库数据，因此新的 aof 文件的体积会小很多；</li><li>AOF 重写期间，服务器不会被阻塞，它可以正常处理客户端发送的命令。</li></ul><p>重写机制AOF文件对比：</p><table><thead><tr><th>原有aof文件逻辑</th><th>重写后aof文件逻辑</th></tr></thead><tbody><tr><td>incr readcount</td><td>incrby readcount 5</td></tr><tr><td>incr readcount</td><td></td></tr><tr><td>incr readcount</td><td></td></tr><tr><td>incr readcount</td><td></td></tr><tr><td>incr readcount</td><td></td></tr></tbody></table><h3 id="三-rdb和aof" tabindex="-1"><a class="header-anchor" href="#三-rdb和aof"><span>三 ，RDB和AOF</span></a></h3><p><strong>①，AOF和RDB同时开启，redis听谁的？</strong></p><p>​ AOF和RDB同时开启，系统默认取AOF的数据（数据不会存在丢失）</p><p>②，<strong>RDB 和 AOF ，我应该用哪一个？</strong></p><table><thead><tr><th><strong>命令</strong></th><th><strong>RDB</strong></th><th><strong>AOF</strong></th></tr></thead><tbody><tr><td>启动优先级</td><td>低</td><td>高</td></tr><tr><td>体积</td><td>小</td><td>大</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>容易丢数据</td><td>根据策略决定</td></tr></tbody></table><p>​ 官方推荐两个都启用，如果对数据不敏感，可以选单独用RDB，不建议单独用 AOF，因为可能会出现Bug。如果只是做纯内存缓存，可以都不用。</p><p><strong>③，Redis 4.0 混合持久化</strong></p><p>重启 Redis 时，我们很少使用 RDB来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 RDB来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。 Redis 4.0 为了解决这个问题，带来了一个新的持久化选项——混合持久化。</p><p>通过如下配置可以开启混合持久化(必须先开启aof)：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># aof-use-rdb-preamble yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果开启了混合持久化，AOF在重写时，不再是单纯将内存数据转换为RESP命令写入AOF文件，而是将重写这一刻之前的内存做RDB快照处理，并且将RDB快照内容和增量的,AOF修改内存数据的命令存在一起，都写入新的AOF文件，新的文件一开始不叫appendonly.aof，等到重写完新的AOF文件才会进行改名，覆盖原有的AOF文件，完成新旧两个AOF文件的替换,</p><p>于是在 Redis 重启的时候，可以先加载 RDB 的内容，然后再重放增量 AOF 日志就可以完全替代之前的 AOF 全量文件重放，因此重启效率大幅得到提升。混合持久化AOF文件结构如下:</p><img src="http://img.zouyh.top/article-img/20240917135017203.png" alt="image-20230302182343662" style="zoom:80%;"><p><strong>④，Redis数据备份策略：</strong></p><ol><li>写crontab定时调度脚本，每小时都copy一份rdb或aof的备份到一个目录中去，仅仅保留最近48小时的备份</li><li>每天都保留一份当日的数据备份到一个目录中去，可以保留最近1个月的备份</li><li>每次copy备份的时候，都把太旧的备份给删了</li><li>每天晚上将当前机器上的备份复制一份到其他机器上，以防机器损坏</li></ol>',61)]))}]]),d=JSON.parse('{"path":"/blog/Redis/Redis%E6%8C%81%E4%B9%85%E5%8C%96.html","title":"Redis持久化","lang":"zh-CN","frontmatter":{"icon":"file-lines","title":"Redis持久化","author":"Ms.Zyh","date":"2024-05-21T00:00:00.000Z","category":["Redis"],"tag":["进阶","Redis"],"sticky":false,"star":false,"description":"Redis 提供了2个不同形式的持久化方式，RDB和AOF。 一，RDB RDB是指在指定的时间间隔内将内存中的数据集快照写入磁盘， 也就是快照的方式，它恢复时是将快照文件直接读到内存里。 1.1 配置 RDB持久化方式默认是开启的，下面介绍的是RDB持久化方式的其它配置，需要编辑redis.conf文件： ①，配置时间间隔： ②，配置快照文件存储目录...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis持久化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-20T07:21:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ms.Zyh\\"}]}"],["meta",{"property":"og:url","content":"http://img.zouyh.top/blog/Redis/Redis%E6%8C%81%E4%B9%85%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"Mr.Zyh"}],["meta",{"property":"og:title","content":"Redis持久化"}],["meta",{"property":"og:description","content":"Redis 提供了2个不同形式的持久化方式，RDB和AOF。 一，RDB RDB是指在指定的时间间隔内将内存中的数据集快照写入磁盘， 也就是快照的方式，它恢复时是将快照文件直接读到内存里。 1.1 配置 RDB持久化方式默认是开启的，下面介绍的是RDB持久化方式的其它配置，需要编辑redis.conf文件： ①，配置时间间隔： ②，配置快照文件存储目录..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-20T07:21:23.000Z"}],["meta",{"property":"article:author","content":"Ms.Zyh"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"进阶"}],["meta",{"property":"article:published_time","content":"2024-05-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-20T07:21:23.000Z"}]]},"git":{"createdTime":1755935409000,"updatedTime":1758352883000,"contributors":[{"name":"zyh1020","username":"zyh1020","email":"898362059@qq.pcom","commits":3,"url":"https://github.com/zyh1020"}]},"readingTime":{"minutes":6.79,"words":2037},"filePathRelative":"blog/Redis/Redis持久化.md","excerpt":"<p>Redis 提供了2个不同形式的持久化方式，RDB和AOF。</p>\\n<h3>一，RDB</h3>\\n<blockquote>\\n<p>RDB是指在指定的时间间隔内将内存中的数据集快照写入磁盘， 也就是快照的方式，它恢复时是将快照文件直接读到内存里。</p>\\n</blockquote>\\n<h4>1.1 配置</h4>\\n<p>RDB持久化方式默认是开启的，下面介绍的是RDB持久化方式的其它配置，需要编辑<code>redis.conf</code>文件：</p>\\n<p>①，配置时间间隔：</p>\\n<div class=\\"language-properties line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"properties\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-properties\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># 含义：在900秒内如果有1个key发生了改变就保存数据</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#98C379\\">save 900 1</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);