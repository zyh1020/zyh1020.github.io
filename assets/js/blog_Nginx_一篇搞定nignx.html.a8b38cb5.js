"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[7175],{5152:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>l,data:()=>h});var n=a(641);const e={},l=(0,a(6262).A)(e,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h3 id="一-nginx的配置文件" tabindex="-1"><a class="header-anchor" href="#一-nginx的配置文件"><span>一，nginx的配置文件</span></a></h3><img src="http://img.zouyh.top/article-img/20240917135104336.png" alt="image-20230328151550458" style="zoom:80%;"><ul><li>work_processes：是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是 会受到硬件、软件等设备的制约。</li><li>events：主要影响Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。</li><li>http ：是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</li><li>server ： 每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。 最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或IP配置</li><li>location 块： 一个 server 块可以配置多个 location 块， 这块的主要作用是基于 Nginx 服务器接收到的请求字符串。</li></ul><h3 id="二-反向代理" tabindex="-1"><a class="header-anchor" href="#二-反向代理"><span>二，反向代理</span></a></h3><h4 id="_2-1-概念" tabindex="-1"><a class="header-anchor" href="#_2-1-概念"><span>2.1 概念</span></a></h4><p>正向代理: Nginx 不仅可以做反向代理，实现负载均衡，还能用作正向代理来进行上网等功能。 如果你想直接访问Google服务器，是不可能的，我们通常是通过代理服务器实现的，如下图：</p><img src="http://img.zouyh.top/article-img/20240917135105339.png" alt="image-20230327180502490" style="zoom:80%;"><p>反向代理：其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器 地址，隐藏了真实服务器 IP 地址。</p><img src="http://img.zouyh.top/article-img/20240917135104338.png" alt="image-20230327181052945" style="zoom:80%;"><p>正向代理和反向代理对比：</p><ul><li>正向代理，是访问目标服务器ip，需要在客服端上配置代理服务器；</li><li>反向代理，访问的是代理服务器ip，客户端对代理是无感知的，因为客户端不需要任何配置</li></ul><h4 id="_2-2-实现配置" tabindex="-1"><a class="header-anchor" href="#_2-2-实现配置"><span>2.2 实现配置</span></a></h4><p><strong>实验效果</strong>：使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中</p><p>访问 <code>http://127.0.0.1:80/edu/</code> 直接跳转到 <code>127.0.0.1:8081 </code></p><p>访问 <code>http://127.0.0.1:80/vod/ </code>直接跳转到 <code>127.0.0.1:8082 </code></p><p><strong>实验步骤</strong></p><p>第一步，准备两个 tomcat，一个 8081 端口，一个 8082端口，并准备好测试的页面 .</p><p>第二步，修改 nginx 的配置文件 在 http 块中添加 server{}</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-nginx"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    listen\t</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server_name </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127.0.0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ~ </span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/edu/ </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    \tproxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> http://127.0.0.1:8081</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    location ~ /vod/ {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   \t \tproxy_pass  http://127.0.0.1:8082 </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>listen 80</code>：监听端口80 即当访问服务器的端口是80时，进入这个server块处理</li><li><code>server_name</code>：当配置了listen时不起作用</li><li><code>location</code>：后面是访问路径当是/ 请求代理到tomcat的地址</li><li><code>proxy_pass</code>：使用代理的固定写法，后面跟要代理服务器地址</li></ul><p>第三步，刷新配置并启动。</p><p><strong>补充</strong>：location 指令用于匹配 URL， 语法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>location [ = | ~ | ~* | ^~] uri {</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>= </code>：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求</li><li><code>~</code>：用于表示 uri 包含正则表达式，并且区分大小写</li><li><code>~*</code>：用于表示 uri 包含正则表达式，并且不区分大小写</li><li><code>^~</code>：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求。字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location块中的正则 uri 和请求字符串做匹配</li></ul><h3 id="三-负载均衡" tabindex="-1"><a class="header-anchor" href="#三-负载均衡"><span>三，负载均衡</span></a></h3><h4 id="_3-1-概念" tabindex="-1"><a class="header-anchor" href="#_3-1-概念"><span>3.1 概念</span></a></h4><p>​ 访问量和并发量特别大的时候，单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡。</p><img src="http://img.zouyh.top/article-img/20240917135105340.png" alt="image-20230328104403279" style="zoom:80%;"><h4 id="_3-2-实现配置" tabindex="-1"><a class="header-anchor" href="#_3-2-实现配置"><span>3.2 实现配置</span></a></h4><p><strong>实验效果</strong>：使用 nginx 负载均衡，根据相同路径轮询跳转到不同端口的同一个服务中</p><p>访问 <code>http://127.0.0.1:80/ </code>直接跳转到 <code>127.0.0.1:8081</code>或<code>127.0.0.1:8082</code></p><p><strong>实验步骤：</strong></p><p>第一步，准备两个 tomcat服务，一个 8081 端口，一个 8082端口，并准备好测试的页面 .</p><p>第二步，修改 nginx 的配置文件 在 http 块中添加 server{}</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-nginx"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">upstream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tomcats {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 127.0.0.1:8081;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 127.0.0.1:8082;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        listen\t</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        server_name\t</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">127.0.0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    \t\tproxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http://tomcats;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三步，刷新配置并启动。</p><p>**补充：**和反向代理的配置相比，代理的地址改变了，变成了upstream对应的值。</p><h4 id="_3-3-负载策略" tabindex="-1"><a class="header-anchor" href="#_3-3-负载策略"><span>3.3 负载策略</span></a></h4><h5 id="_3-3-1-轮询" tabindex="-1"><a class="header-anchor" href="#_3-3-1-轮询"><span>3.3.1 轮询</span></a></h5><pre><code>\t轮询：默认使用的是轮询策略，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down掉，能自动剔，轮询策略其实是一个特殊的加权策略，不同的是，服务器组中的各个服务器的权重都是1。\n</code></pre><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-nginx"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">upstream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> server的名字{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-2-加权" tabindex="-1"><a class="header-anchor" href="#_3-3-2-加权"><span>3.3.2 加权</span></a></h5><p>weight代表权重默认为 1,权重越高被分配的客户端请求越多。</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-nginx"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">upstream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> server的名字{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号 weight = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号 weight = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号 weight = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-3-least-conn" tabindex="-1"><a class="header-anchor" href="#_3-3-3-least-conn"><span>3.3.3 least_conn</span></a></h5><p>最少连接，把请求转发给连接数最少的服务器。</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-nginx"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">upstream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> server的名字{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    least_conn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-4-ip-hash" tabindex="-1"><a class="header-anchor" href="#_3-3-4-ip-hash"><span>3.3.4 ip_hash</span></a></h5><p>ip_hash :每个请求按访问 ip 的 hash 结果分配，这样每个访客会固定访问一个后端服务器，这个可以解决session共享问题。</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-nginx"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">upstream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> server的名字{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    ip_hash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-5-url-hash" tabindex="-1"><a class="header-anchor" href="#_3-3-5-url-hash"><span>3.3.5 url_hash</span></a></h5><p>url_hash 和 ip_hash 类似，不同的是，客户端ip可能变，但客户端发送的请求URL不同功能模块虽说不同，但同一个功能点的URL是固定不变的</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-nginx"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">upstream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> server的名字{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    hash </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">request_uri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">hash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">request_uri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-6-fair" tabindex="-1"><a class="header-anchor" href="#_3-3-6-fair"><span>3.3.6 fair</span></a></h5><p>fair（第三方）：按后端服务器的响应时间来分配请求，响应时间短的优先分配</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-nginx"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">upstream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> server的名字{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 真实项目的ip+端口号;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    fair;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注： 该策略，在nginx的默认模块中是不支持的，需要下载 nginx-upstream-fair 模块</p><h3 id="四-动静分离" tabindex="-1"><a class="header-anchor" href="#四-动静分离"><span>四 ，动静分离</span></a></h3><h4 id="_4-1-概念" tabindex="-1"><a class="header-anchor" href="#_4-1-概念"><span>4.1 概念</span></a></h4><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速 度。降低原来单个服务器的压力。</p><img src="http://img.zouyh.top/article-img/20240917135104337.png" alt="image-20230328112408571" style="zoom:80%;"><p>Nginx 动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用 Nginx 处理静态页面，Tomcat 处理动态页面。动静分离从目标实现角度来讲大致分为两种，</p><ul><li>一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案。</li><li>另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。</li></ul><h4 id="_4-2-实现配置" tabindex="-1"><a class="header-anchor" href="#_4-2-实现配置"><span>4.2 实现配置</span></a></h4><p>第一步：在nginx根目录“/”下创建一个data文件夹，在data文件夹下创建两个文件夹，一个名为request，另一个名为static；在request文件夹中放置一个静态的html，在static文件夹中放置一个图片。</p><p>第二步，修改 nginx 的配置文件，在http的server的块中添加location块</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-nginx"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /request {    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  root </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/data/;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  index </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">index.html index.htm;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /static {    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  root </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/data/;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  autoindex </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>index</code> 访问<code>http://ip:port/</code>地址后面如果不添加任何内容，则默认依次访问index.html或index.htm。</p><p><code> autoindex on</code> 作用是访问问价夹时可以以列表的方式展示文件</p>',69)]))}]]),h=JSON.parse('{"path":"/blog/Nginx/%E4%B8%80%E7%AF%87%E6%90%9E%E5%AE%9Anignx.html","title":"一篇搞定nignx","lang":"zh-CN","frontmatter":{"icon":"file-lines","title":"一篇搞定nignx","author":"Ms.Zyh","date":"2022-04-14T00:00:00.000Z","category":["Nginx"],"tag":["进阶","Nginx"],"sticky":false,"star":false,"description":"一，nginx的配置文件 image-20230328151550458 work_processes：是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是 会受到硬件、软件等设备的制约。 events：主要影响Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一篇搞定nignx\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-06T08:18:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ms.Zyh\\"}]}"],["meta",{"property":"og:url","content":"http://img.zouyh.top/vuepress/blog/Nginx/%E4%B8%80%E7%AF%87%E6%90%9E%E5%AE%9Anignx.html"}],["meta",{"property":"og:site_name","content":"Mr.Zyh"}],["meta",{"property":"og:title","content":"一篇搞定nignx"}],["meta",{"property":"og:description","content":"一，nginx的配置文件 image-20230328151550458 work_processes：是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是 会受到硬件、软件等设备的制约。 events：主要影响Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-06T08:18:22.000Z"}],["meta",{"property":"article:author","content":"Ms.Zyh"}],["meta",{"property":"article:tag","content":"Nginx"}],["meta",{"property":"article:tag","content":"进阶"}],["meta",{"property":"article:published_time","content":"2022-04-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-06T08:18:22.000Z"}]]},"git":{"createdTime":1755935409000,"updatedTime":1757146702000,"contributors":[{"name":"zyh1020","username":"zyh1020","email":"898362059@qq.pcom","commits":2,"url":"https://github.com/zyh1020"}]},"readingTime":{"minutes":7.61,"words":2284},"filePathRelative":"blog/Nginx/一篇搞定nignx.md","excerpt":"<h3>一，nginx的配置文件</h3>\\n<img src=\\"http://img.zouyh.top/article-img/20240917135104336.png\\" alt=\\"image-20230328151550458\\" style=\\"zoom:80%;\\">\\n<ul>\\n<li>work_processes：是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是 会受到硬件、软件等设备的制约。</li>\\n<li>events：主要影响Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。</li>\\n<li>http ：是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</li>\\n<li>server ： 每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。 最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或IP配置</li>\\n<li>location 块：  一个 server 块可以配置多个 location 块， 这块的主要作用是基于 Nginx  服务器接收到的请求字符串。</li>\\n</ul>","autoDesc":true}')}}]);