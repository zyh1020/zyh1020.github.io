"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[947],{2475:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>t});var e=a(641);const n={},l=(0,a(6262).A)(n,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h3 id="一-索引介绍" tabindex="-1"><a class="header-anchor" href="#一-索引介绍"><span>一，索引介绍</span></a></h3><h4 id="_1-1-什么是索引" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是索引"><span>1.1 什么是索引</span></a></h4><p>​ 索引其实是一种<strong>数据结构</strong>，能够帮助我们快速的检索数据库中的数据.</p><h4 id="_1-2-索引类型" tabindex="-1"><a class="header-anchor" href="#_1-2-索引类型"><span>1.2 索引类型</span></a></h4><h5 id="_1-2-1按数据结构分类" tabindex="-1"><a class="header-anchor" href="#_1-2-1按数据结构分类"><span>1.2.1按数据结构分类</span></a></h5><blockquote><p>按数据结构分类：BTree索引，Hash索引，full-index全文索引.</p></blockquote><table><thead><tr><th></th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+tree索引</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Hash索引</td><td>√</td><td>√</td><td>×</td></tr><tr><td>Full-text索引</td><td>√（MySQL5.6.4）</td><td>√</td><td>×</td></tr></tbody></table><h6 id="_1-2-1-1-b-tree索引" tabindex="-1"><a class="header-anchor" href="#_1-2-1-1-b-tree索引"><span>1.2.1.1 B+tree索引</span></a></h6><p>​ B+Tree是在B-Tree基础上的一种优化，使其更适合实现外存储索引结构，InnoDB存储引擎默认就是用B+Tree实现其索引结构。</p><img src="http://img.zouyh.top/article-img/20240917135012184.png" alt="image-20230131163137383" style="zoom:67%;"><p>常见面试题：为什么B+树比B树更适合实现数据库索引？</p><ul><li>B+ 树叶子结点之间用链表有序连接，所以扫描全部数据只需扫描一遍叶子结点，利于扫库和范围查询；B 树由于非叶子结点也存数据，所以只能通过中序遍历按序来扫。也就是说，对于范围查询和有序遍历而言，B+ 树的效率更高。</li><li>B+ 树更相比 B 树减少了 I/O 读写的次数。由于索引文件很大因此索引文件存储在磁盘上，B+ 树的非叶子结点只存关键字不存数据，因而单个页可以存储更多的关键字，即一次性读入内存的需要查找的关键字也就越多，磁盘的随机 I/O 读取次数相对就减少了。</li><li>B+树的查询效率更加稳定，任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</li></ul><h6 id="_1-2-1-2-hash索引" tabindex="-1"><a class="header-anchor" href="#_1-2-1-2-hash索引"><span>1.2.1.2 hash索引</span></a></h6><p>​ Memory引擎默认支持哈希索引，如果多个Hash值相同，出现哈希碰撞，那么索引就以链表方式存储，这有点类似于Java中的HashMap。InnoDB和MyISAM虽然也支持Hash索引，但是InnoDB中Hash索引属于是自适应Hash索引，它的创建过程由存储引擎引擎自动优化创建，不能人为干预是否为表创建Hash索引。</p><p>hash索引的缺点：</p><ul><li>Hash索引仅仅能满足&quot;=&quot;,&quot;IN&quot;和&quot;&lt;=&gt;&quot;查询，不能使用范围查询。</li><li>Hash 索引无法被用来避免数据的排序操作。</li><li>Hash索引不能利用部分索引键查询，即模糊查询不适合。</li><li>Hash索引在任何时候都不能避免表扫描。</li><li>Hash索引遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高。</li></ul><h6 id="_1-2-1-3-full-index全文索引" tabindex="-1"><a class="header-anchor" href="#_1-2-1-3-full-index全文索引"><span>1.2.1.3 full-index全文索引</span></a></h6><p>​ Full-text索引一般使用倒排索引实现。倒排索引同B+tree索引一样，也是一种索引结构。MySQL中InnoDB存储引擎在之前版本中是不支持全文检索的，要使用全文检索的话只能使用MySIAM存储引擎。在 MySQL 5.6.4 版本中InnoDB存储引擎才开始支持Full-text索引。</p><p>​ 对于文本类型的大对象，或者较大的CHAR类型的数据，如果使用普通索引，那么匹配文本前几个字符还是可行的，但是想要匹配文本中间的几个单词，那么就要使用LIKE %word%来匹配，这样需要很长的时间来处理，响应时间会大大增加，这种情况，就可使用时全文索引了，在生成全文索引时，会为文本生成一份单词的清单，在索引时及根据这个单词的清单来索引。</p><p>Full-text索引的查询有自己特殊的语法，而不能使用 LIKE 模糊查询的语法，语法如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">MATCH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ft_index) AGAINST(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;查询字符串&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="_1-2-2-按物理存储分类" tabindex="-1"><a class="header-anchor" href="#_1-2-2-按物理存储分类"><span>1.2.2 按物理存储分类</span></a></h5><blockquote><p>MySQL索引按叶子节点存储的是否为完整表数据分为：聚集索引、非聚集索引（也叫二级索引、辅助索引）</p></blockquote><h6 id="_1-2-2-1-聚簇索引" tabindex="-1"><a class="header-anchor" href="#_1-2-2-1-聚簇索引"><span>1.2.2.1 聚簇索引</span></a></h6><p>​ 聚簇索引就是按照每张表的主键构造一颗 B+tree，同时叶子节点中存放的就是整张表的行记录数据，聚集索引的叶子节点被称为数据页。</p><figure><img src="http://img.zouyh.top/article-img/20240917135012183.png" alt="image-20230131165449727" tabindex="0" loading="lazy"><figcaption>image-20230131165449727</figcaption></figure><p>​ InnoDB表要求必须有聚簇索引，默认在主键字段上建立聚簇索引，在没有主键字段的情况下，表的第一个非空的唯一索引将被建立为聚簇索引，在前两者都没有的情况下，InnoDB将自动生成一个隐式的自增id列，并在此列上建立聚簇索引。</p><h6 id="_1-2-2-2-非聚集索引-也叫二级索引、辅助索引" tabindex="-1"><a class="header-anchor" href="#_1-2-2-2-非聚集索引-也叫二级索引、辅助索引"><span>1.2.2.2 非聚集索引（也叫二级索引、辅助索引）</span></a></h6><p>​ 非聚集索引的结构和聚集索引基本相同（非叶子结点存储的都是索引指针），区别在于非聚集索引的叶子节点存放的是数据主键不是行数据。因此在使用非聚集索引进行查找时，需要先查找到主键值，然后再到聚集索引中进行查找。</p><img src="http://img.zouyh.top/article-img/20240917135012182.png" alt="image-20230131165921279" style="zoom:80%;"><p>​ 两种索引的区别：每个索引上包含的字段内容不同，聚集索引包含所有真实的物理数据，非聚集索引只包含索引字段和主键字段。此外，聚集索引一个表只能有一个，而非聚集索引一个表可以存在多个。</p><p>常见面试题：</p><p>1，什么是回表查询？</p><p>​ 回表查询简单来说就是通过非聚集索引查询数据时，得不到完整的数据内容，需要通过非聚集索引得到的主键，再次查询主键索引来获得数据内容。</p><p>2，什么是索引覆盖？</p><p>​ 索引覆盖就是指索引的叶子节点已经包含了查询的数据，满足查询要求，没必要再查询主键索引来获得数据内容。</p><p>​ 对于回表查询问题，通常使用索引覆盖的方式解决，常见的方式就是通过建立联合索引（组合索引），实现索引覆盖，从而避免回表查询。</p><p>例如：假设我们给user表建立了一个主键ID，同时建立了为age字段一个索引。</p><p>查询sql如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id,age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ 这个sql我们是不是就不用回表查询了，因为在非聚簇索引的叶子节点上已经有id和age的值，所以根本不需要拿着id的值再去聚簇索引定位行记录数据了，也就是在这一颗索引树上就可以完成对数据的检索，这样就实现了覆盖索引。</p><p>如果查询sql如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id,age,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ 那就不能实现索引覆盖了，因为name的值在age索引树上是没有的，还是需要拿着id的值再去聚簇索引定位行记录数据。如果我们对age和name字段新增一个组合索引，那就又可以实现索引覆盖了。</p><h5 id="_1-2-3-按照索引字段分类" tabindex="-1"><a class="header-anchor" href="#_1-2-3-按照索引字段分类"><span>1.2.3 按照索引字段分类</span></a></h5><ul><li>普通索引（单值索引）：普通索引是最基本的索引，它没有任何限制，值可以为空；仅加速查询。</li><li>唯一索引：唯一索引与普通索引类似，不同的是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</li><li>主键索引：主键索引是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值。</li><li>组合索引：组合索引指在多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用组合索引时遵循最左前缀集合。</li><li>全文索引：MyISAM 存储引擎支持Full-text索引，用于查找文本中的关键词，而不是直接比较是否相等。Full-text索引一般使用倒排索引实现，它记录着关键词到其所在文档的映射，InnoDB 存储引擎在 MySQL 5.6.4 版本中也开始支持Full-text索引</li></ul><p>索引创建方式：</p><p>方式一使用CREATE INDEX创建：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 是否添加UNIQUE关键字 创建单值索或者唯一索引 </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [UNIQUE]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 索引名 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 表名(列名(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)); </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 是否添加UNIQUE关键字 创建普通复合索引或唯一复合索引</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [UNIQUE]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 索引名 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 表名(列名1(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),列名2(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二修改表结构时添加索引：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 是否添加UNIQUE关键字</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">alter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 表名 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ADD</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [UNIQUE]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 索引名(columnName)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>方式三创建表的时候直接指定：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- index普通索引或者唯一索引选择index或UNIQUE关键字之一</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mytable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(  </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ID </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,   </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    username </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    [index]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">或</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[UNIQUE]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 索引名(列名(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))  </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>索引的其它操作：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 删除索引的语法</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">drop</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[索引名]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 表名; </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 查看表的索引</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">show </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">index</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 表名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>面试题：主键索引和唯一索引的区别？</p><p>​ 主键必唯一，但是唯一索引不一定是主键，一张表上只能有一个主键，但是可以有一个或多个唯一索引。</p><h3 id="二-explain" tabindex="-1"><a class="header-anchor" href="#二-explain"><span>二，explain</span></a></h3><p>使用格式：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 得出一个表的字段结构</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">EXPLAIN tbl_name</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 索引信息</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">EXPLAIN </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[EXTENDED]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> select_options</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过explain模拟Mysql优化器是如何执行SQL查询语句的，从而分析你的查询语句或是表结构的性能瓶颈：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> explain </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tb_user;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">----+-------------+---------+------+---------------+------+---------+------+------+-------+</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| id | select_type | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">table</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | possible_keys | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | key_len | ref  | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">rows</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | Extra |</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">----+-------------+---------+------+---------------+------+---------+------+------+-------+</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|  </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SIMPLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      | tb_user | ALL  | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |    </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  |</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">----+-------------+---------+------+---------------+------+---------+------+------+-------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面解释explain得数据中各个字段的含义</p><h4 id="_2-1-id列" tabindex="-1"><a class="header-anchor" href="#_2-1-id列"><span>2.1 id列</span></a></h4><p>id表示执行顺序，有二种情况：</p><ul><li>id 相同，执行顺序由上到下，开始执行。</li><li>id 不同，id值越大优先级就越高，越先被执行。</li></ul><h4 id="_2-2-select-type列" tabindex="-1"><a class="header-anchor" href="#_2-2-select-type列"><span>2.2 select_type列</span></a></h4><p>数据读取操作的操作类型：</p><ul><li>SIMPLE:简单的select 查询，SQL中不包含子查询或者UNION。</li><li>PRIMARY:查询中包含复杂的子查询部分，最外层查询被标记为PRIMARY。</li><li>SUBQUERY:在select 或者WHERE 列表中包含了子查询</li><li>DERIVED:在FROM列表中包含的子查询会被标记为DERIVED(衍生表)，MYSQL会递归执行这些子查询，把结果集放到零时表中。</li><li>UNION:如果第二个SELECT 出现在UNION之后，则被标记位UNION；如果UNION包含在FROM子句的子查询中，则外层SELECT 将被标记为DERIVED</li><li>UNION RESULT:从UNION表获取结果的select</li></ul><h4 id="_2-3-table列" tabindex="-1"><a class="header-anchor" href="#_2-3-table列"><span>2.3 table列</span></a></h4><p>​ 数据是关于哪张表</p><h4 id="_2-4-type列" tabindex="-1"><a class="header-anchor" href="#_2-4-type列"><span>2.4 type列</span></a></h4><p>访问类型由好到差system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</p><p>1、system:表只有一条记录(等于系统表),这是const类型的特例，平时业务中不会出现。</p><p>2、const:通过索引一次查到数据，该类型主要用于比较primary key 或者unique 索引，因为只匹配一行数据，所以很快;如果将主键置于WHERE语句后面，Mysql就能将该查询转换为一个常量。</p><p>3、eq_ref:唯一索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或者唯一索引扫描。</p><p>4、ref:非唯一索引扫描，返回匹配某个单独值得所有行，本质上是一种索引访问，它返回所有匹配某个单独值的行，就是说它可能会找到多条符合条件的数据，所以他是查找与扫描的混合体。</p><p>详解：这种类型表示mysql会根据特定的算法快速查找到某个符合条件的索引，而不是会对索引中每一个数据都进行一 一的扫描判断，也就是所谓你平常理解的使用索引查询会更快的取出数据。而要想实现这种查找，索引却是有要求的，要实现这种能快速查找的算法，索引就要满足特定的数据结构。简单说，也就是索引字段的数据必须是有序的，才能实现这种类型的查找，才能利用到索引。</p><p>5、range：只检索给定范围的行，使用一个索引来选着行。key列显示使用了哪个索引。一般在你的WHERE 语句中出现between 、&lt; 、&gt; 、in 等查询，这种给定范围扫描比全表扫描要好。因为他只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。</p><p>6、index：FUll Index Scan 扫描遍历索引树(index：这种类型表示是mysql会对整个该索引进行扫描。要想用到这种类型的索引，对这个索引并无特别要求，只要是索引，或者某个复合索引的一部分，mysql都可能会采用index类型的方式扫描。但是呢，缺点是效率不高，mysql会从索引中的第一个数据一个个的查找到最后一个数据，直到找到符合判断条件的某个索引）。</p><p>7、ALL 全表扫描 从磁盘中获取数据 百万级别的数据ALL类型的数据尽量优化</p><h4 id="_2-5-possible-keys列" tabindex="-1"><a class="header-anchor" href="#_2-5-possible-keys列"><span>2.5 possible_keys列</span></a></h4><p>​ 显示可能应用在这张表的索引，一个或者多个。查询涉及到的字段若存在索引，则该索引将被列出，但不一定被查询实际使用。</p><h4 id="_2-6-keys列" tabindex="-1"><a class="header-anchor" href="#_2-6-keys列"><span>2.6 keys列</span></a></h4><p>​ 实际使用到的索引。如果为NULL，则没有使用索引。查询中如果使用了覆盖索引，则该索引仅出现在key列表中。覆盖索引：select 后的 字段与我们建立索引的字段个数一致。</p><h4 id="_2-7-ken-len列" tabindex="-1"><a class="header-anchor" href="#_2-7-ken-len列"><span>2.7 ken_len列</span></a></h4><p>​ 表示索引中使用的字节数，可通过该列计算查询中使用的索引长度。在不损失精确性的情况下，<strong>长度越短越好</strong>。key_len 显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出来的。</p><h4 id="_2-8-ref列" tabindex="-1"><a class="header-anchor" href="#_2-8-ref列"><span>2.8 ref列</span></a></h4><p>​ 显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值。</p><h4 id="_2-9-rows列" tabindex="-1"><a class="header-anchor" href="#_2-9-rows列"><span>2.9 rows列</span></a></h4><p>​ 根据表统计信息及索引选用的情况，大致估算找到所需记录需要读取的行数。</p><h4 id="_2-10-extra列" tabindex="-1"><a class="header-anchor" href="#_2-10-extra列"><span>2.10 Extra列</span></a></h4><p>扩展属性，但是很重要的信息，Extra: 额外信息,，使用优先级using index &gt; using filesort &gt; using temporary.</p><ul><li><p>Using filesort(文件排序)：mysql无法按照表内既定的索引顺序进行读取。</p></li><li><p>Using temporary:Mysql使用了临时表保存中间结果，常见于排序order by 和分组查询 group by。</p></li><li><p>Using index 表示相应的select 操作使用了覆盖索引，避免访问了表的数据行，效率不错。</p><p>如果同时出现Using where ，表明索引被用来执行索引键值的查找。</p><p>如果没有同时出现using where 表明索引用来读取数据而非执行查找动作。</p></li><li><p>Using where: WHERE子句用于限制匹配哪些行针对下一个表或发送到客户端</p></li><li><p>Using join buffer (Block Nested Loop)， Using join buffer (Batched Key Access) ：表示当前sql使用了连接缓存。来自较早联接的表被部分读取到联接缓冲区中，然后使用它们的行从缓冲区中执行与当前表的联接。</p></li><li><p>impossible where ：where 字句 总是false ，mysql 无法获取数据行。</p></li><li><p>select tables optimized away：</p></li><li><p>distinct：MySQL正在寻找不同的值，因此在找到第一个匹配的行后，它将停止为当前行组合搜索更多行。</p></li><li><p>Using where with pushed condition: NDB Cluster正在使用条件下推优化来提高在非索引列和常量之间进行直接比较的效率</p></li><li><p>Using sort_union(...)，Using union(...)，Using intersect(...): 这些指示了特定算法，该算法显示了如何针对index_merge联接类型合并索引扫描 。</p></li><li><p>Using MRR: 使用多范围读取优化策略读取表</p></li><li><p>Using index for group-by: 与Using index表访问方法类似，Using index for group-by 表示MySQL找到了一个索引，该索引可用于检索a GROUP BY或 DISTINCT查询的所有列，而无需对实际表进行任何额外的磁盘访问。此外，以最有效的方式使用索引，因此对于每个组，仅读取少数索引条目。</p></li><li><p>Using index condition: 通过访问索引元组并首先对其进行测试以确定是否读取完整的表行来读取表。这样，除非有必要，否则索引信息将用于延迟（“ 下推 ”）整个表行的读取。</p></li></ul><h3 id="三-索引优化" tabindex="-1"><a class="header-anchor" href="#三-索引优化"><span>三，索引优化</span></a></h3><p>在学习完mysql的索引底层数据结构和explain后，就可以进行简单的索引优化了。</p><h5 id="_3-1-基本优化" tabindex="-1"><a class="header-anchor" href="#_3-1-基本优化"><span>3.1 基本优化</span></a></h5><ul><li>连接查询优化：左连接，右表建索引，左表是数据量最好少些；右连接，左表建索引，右表数据量最好少些。（连接后的结果集相当一张虚表）</li><li>in和exsits优化：小表驱动大表原则，in内的表的数据集 小于 in外表的数据集；exists内的表的数据集 大于 in外表的数据集。</li></ul><h5 id="_3-2-索引失效分析" tabindex="-1"><a class="header-anchor" href="#_3-2-索引失效分析"><span>3.2 索引失效分析</span></a></h5><p>①，查询使用索引以最左侧按顺序，最好不要跳过中间索引。 ---- 最左前缀原则</p><p>②，不要在索引上有任何操作计算，函数，自动或手动进行类型转换，会导致索引失效进而转向全表扫描。</p><p>③，查询时，尽量不使用select *，查询的列表最好和索引保持一致。 ---- 覆盖索引</p><p>④，使用不等于（！=或者&lt;&gt;）的时候无法使用索引，会导致全表扫描。</p><p>⑤，使用is null 或者 is not null的时候无法使用索引，会导致全表扫描。</p><p>⑥，使用like模糊查询，以%通配符开头的时候无法使用索引，会导致全表扫描最好将%放在右边。 ---- 索引下推</p><p>⑦，字符串不加单引号会导致索引失效。</p><p>⑧，in和or在表数据量比较大的情况会走索引，在表记录不多的情况下会选择全表扫描，少使用or，用nuion替换。</p><h5 id="_3-3-索引的设计原则" tabindex="-1"><a class="header-anchor" href="#_3-3-索引的设计原则"><span>3.3 索引的设计原则：</span></a></h5><ul><li>索引列的<strong>区分度越高</strong>，索引的效果越好。比如使用性别这种区分度很低的列作为索引，效果就会很差。</li><li>尽量使用<strong>短索引</strong>，对于较长的字符串进行索引时应该指定一个较短的前缀长度，因为较小的索引涉及到的磁盘I/O较少，查询速度更快。</li><li>索引不是越多越好，每个索引都需要额外的物理空间，维护也需要花费时间。</li><li>利用<strong>最左前缀原则</strong>。</li></ul>',109)]))}]]),t=JSON.parse('{"path":"/blog/mysql/mysql%E7%9A%84%E7%B4%A2%E5%BC%95.html","title":"mysql的索引","lang":"zh-CN","frontmatter":{"icon":"document","title":"mysql的索引","author":"Ms.Zyh","date":"2022-04-14T00:00:00.000Z","category":["mysql"],"tag":["推荐","mysql"],"sticky":false,"star":false,"description":"一，索引介绍 1.1 什么是索引 ​ 索引其实是一种数据结构，能够帮助我们快速的检索数据库中的数据. 1.2 索引类型 1.2.1按数据结构分类 按数据结构分类：BTree索引，Hash索引，full-index全文索引. 1.2.1.1 B+tree索引 ​ B+Tree是在B-Tree基础上的一种优化，使其更适合实现外存储索引结构，InnoDB存储...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql的索引\\",\\"image\\":[\\"http://img.zouyh.top/article-img/20240917135012183.png\\"],\\"datePublished\\":\\"2022-04-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-23T07:50:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ms.Zyh\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/mysql/mysql%E7%9A%84%E7%B4%A2%E5%BC%95.html"}],["meta",{"property":"og:site_name","content":"Mr.Zyh"}],["meta",{"property":"og:title","content":"mysql的索引"}],["meta",{"property":"og:description","content":"一，索引介绍 1.1 什么是索引 ​ 索引其实是一种数据结构，能够帮助我们快速的检索数据库中的数据. 1.2 索引类型 1.2.1按数据结构分类 按数据结构分类：BTree索引，Hash索引，full-index全文索引. 1.2.1.1 B+tree索引 ​ B+Tree是在B-Tree基础上的一种优化，使其更适合实现外存储索引结构，InnoDB存储..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://img.zouyh.top/article-img/20240917135012183.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-23T07:50:09.000Z"}],["meta",{"property":"article:author","content":"Ms.Zyh"}],["meta",{"property":"article:tag","content":"mysql"}],["meta",{"property":"article:tag","content":"推荐"}],["meta",{"property":"article:published_time","content":"2022-04-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-23T07:50:09.000Z"}]]},"git":{"createdTime":1755935409000,"updatedTime":1755935409000,"contributors":[{"name":"zyh1020","username":"zyh1020","email":"898362059@qq.pcom","commits":1,"url":"https://github.com/zyh1020"}]},"readingTime":{"minutes":15.99,"words":4797},"filePathRelative":"blog/mysql/mysql的索引.md","excerpt":"<h3>一，索引介绍</h3>\\n<h4>1.1 什么是索引</h4>\\n<p>​\\t索引其实是一种<strong>数据结构</strong>，能够帮助我们快速的检索数据库中的数据.</p>\\n<h4>1.2 索引类型</h4>\\n<h5>1.2.1按数据结构分类</h5>\\n<blockquote>\\n<p>按数据结构分类：BTree索引，Hash索引，full-index全文索引.</p>\\n</blockquote>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th>InnoDB</th>\\n<th>MyISAM</th>\\n<th>Memory</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>B+tree索引</td>\\n<td>√</td>\\n<td>√</td>\\n<td>√</td>\\n</tr>\\n<tr>\\n<td>Hash索引</td>\\n<td>√</td>\\n<td>√</td>\\n<td>×</td>\\n</tr>\\n<tr>\\n<td>Full-text索引</td>\\n<td>√（MySQL5.6.4）</td>\\n<td>√</td>\\n<td>×</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')}}]);